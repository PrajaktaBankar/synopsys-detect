{"version":3,"sources":["webpack:///src/app/routes/profile/profile.component.ts","webpack:///src/app/routes/profile/profile.component.html","webpack:///src/app/shared/pipes/row-col-val-converter.pipe.ts","webpack:///src/assets/data/timeseries-nlp.ts","webpack:///src/app/routes/dashboard/schedular/schedular.service.ts","webpack:///src/app/shared/directives/checkall/checkall.directive.ts","webpack:///src/app/shared/directives/now/now.directive.ts","webpack:///src/app/shared/directives/flot/flot.directive.ts","webpack:///src/app/shared/directives/vectormap/vectormap.directive.ts","webpack:///src/app/shared/directives/sparkline/sparkline.directive.ts","webpack:///src/app/routes/dashboard/sample-dataset/sample-dataset.service.ts","webpack:///src/app/routes/dashboard/dashboard.service.ts","webpack:///src/app/routes/dashboard/create-connection/create-connection.service.ts","webpack:///src/app/routes/data-drift/data-drift.service.ts","webpack:///src/app/shared/pipes/index-data-type.pipe.ts","webpack:///src/app/shared/static-data.ts","webpack:///src/app/shared/pipes/normalization-options.pipe.ts","webpack:///src/app/shared/pipes/eda-value-formatter.pipe.ts","webpack:///src/app/shared/pipes/file-size-converter.pipe.ts","webpack:///src/app/routes/dashboard/reports/reports.service.ts","webpack:///src/app/shared/directives/jqcloud/jqcloud.directive.ts","webpack:///src/app/shared/directives/scrollable/scrollable.directive.ts"],"names":["ProfileComponent","_fb","_localStorage","_users","_toaster","_utils","_router","_login","unsubscribe$","newPassword","required","maxLength","minLength","pattern","passwordPolicies","hideCurrPassword","hidePassword","hideNewPassword","hideConfirmPassword","settingActive","this","passwordForm","group","currentPassword","verifyPassword","equalTo","personalDetailsForm","firstName","lastName","username","email","compose","user","getItem","patchValue","formDetails","updateUser","pipe","subscribe","res","setItem","userProfileSubject","success","error","err","message","value","updateUserPassword","clearValidators","updateValueAndValidity","get","reset","logoutUser","deleteItem","window","location","reload","next","unsubscribe","RowColValConverterPipe","val","NLP_LANGUAGES","NLP_FEATURE_COUNTS","RESAMPLING_CONSTANTS","desc","index","METHOD_CONSTANTS","FREQUENCIES","SchedularService","_htttp","serverBaseUrl","schedularDetails","post","schedularId","put","id","delete","CheckallDirective","el","$element","$","nativeElement","on","checkbox","find","parents","prop","checked","NowDirective","element","updateTime","intervalId","setInterval","bind","dt","format","innerHTML","clearInterval","FlotDirective","ready","plot","console","log","changes","onDatasetChanged","dataset","onSerieToggled","series","plotObj","width","attrWidth","height","css","options","setData","setupGrid","draw","init","someData","getData","sName","forEach","toggleFor","s","i","show","shutdown","VectormapDirective","mapHeight","length","vectorMap","map","mapName","backgroundColor","mapOptions","bgColor","zoomMin","zoomMax","zoomOnScroll","regionStyle","initial","regionFill","hover","selected","fill","selectedHover","focusOn","x","y","scale","markerStyle","markerColor","stroke","onRegionLabelShow","e","code","seriesData","html","markers","markersData","regions","values","scaleColors","normalizeFunction","remove","SparklineDirective","resizeEventId","initSparkLine","sparkline","data","extend","type","disableHiddenCheck","runSparkline","resize","split","off","SampleDatasetService","file","formValue","formData","FormData","append","JSON","stringify","DatasetId","DatasetData","DashboardService","_http","projectDetails","projectId","uplaodType","set","name","filename","deleteType","taskType","params","CreateConnectionService","connectionDetials","source","reqObj","connectionId","connId","DataDriftService","configId","settingDetails","reportId","trainingId","modelId","featurewiseDetails","IndexDataTypePipe","items","filter","item","dataType","toasterMsg","fileUpload","pullData","DomainList","NormalizationOptionsPipe","project","useGPU","EdaValueFormatterPipe","_decimalPipe","_datePipe","transform","Date","parse","FileSizeConverterPipe","bytes","decimals","dm","Math","floor","parseFloat","pow","toFixed","ReportsService","reportData","edaId","responseType","outputId","dataId","JqcloudDirective","initialized","$elem","fn","jQCloud","defaults","opts","steps","words","ScrollableDirective","defaultHeight","slimScroll"],"mappings":"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","file":"x","sourcesContent":["import { LoginService } from './../pages/login/login.service';\nimport { UtilsService } from './../../shared/utils.service';\nimport { UsersService } from './../dashboard/users/users.service';\nimport { LocalStorageService } from './../../shared/local-storage.service';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { CustomValidators } from 'ngx-custom-validators';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { PsCustomValidators } from 'src/app/shared/ps-custom-validators';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  newPassword = new FormControl('', [\n    Validators.required,\n    Validators.maxLength(32),\n    Validators.minLength(8),\n    Validators.pattern('^[^\\\\s]+'),\n    PsCustomValidators.passwordPolicies,\n  ]);\n\n  hideCurrPassword: boolean = true;\n  hidePassword: boolean = true;\n  hideNewPassword: boolean = true;\n  hideConfirmPassword: boolean = true;\n\n  personalDetailsForm: FormGroup;\n  passwordForm: FormGroup;\n  settingActive: number = 1;\n  user: any;\n\n  constructor(\n    private _fb: FormBuilder,\n    private _localStorage: LocalStorageService,\n    private _users: UsersService,\n    private _toaster: ToastrService,\n    private _utils: UtilsService,\n    private _router: Router,\n    private _login: LoginService\n  ) {\n    // Password form structure\n    this.passwordForm = this._fb.group({\n      currentPassword: [null, Validators.required],\n      verifyPassword: [null, [Validators.required, CustomValidators.equalTo(this.newPassword)]],\n    });\n\n    // Personal details form structure\n    this.personalDetailsForm = this._fb.group({\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      username: [null, Validators.required],\n      email: [null, Validators.compose([Validators.required, CustomValidators.email])],\n    });\n  }\n\n  ngOnInit(): void {\n    this.user = this._localStorage.getItem('user');\n    this.personalDetailsForm.patchValue({\n      firstName: this.user.firstName,\n      lastName: this.user.lastName,\n      username: this.user.username,\n      email: this.user.email,\n    });\n  }\n\n  /**\n   * Updates the users personal details\n   * @param formDetails\n   */\n  updatePersonalDetails(formDetails: any): void {\n    this.user.firstName = formDetails.firstName;\n    this.user.lastName = formDetails.lastName;\n    this.user.username = formDetails.username;\n    this.user.email = formDetails.email;\n    this._users\n      .updateUser(this.user)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this._localStorage.setItem('user', this.user);\n            this._utils.userProfileSubject(this.user);\n            this.personalDetailsForm.patchValue({\n              firstName: this.user.firstName,\n              lastName: this.user.lastName,\n              username: this.user.username,\n              email: this.user.email,\n            });\n            this._toaster.success('Personal details updated successfully', 'Profile');\n          } else {\n            this._toaster.error('Cannot update personal details', 'Profile');\n          }\n        },\n        (err: any) => {\n          this._toaster.error(err.error?.message || 'Server Error', 'Profile');\n        }\n      );\n  }\n\n  /**\n   * Updates the user password\n   * @param formDetails\n   */\n  updatePassword(formDetails: any): void {\n    formDetails.newPassword = this.newPassword.value;\n    this._users\n      .updateUserPassword(formDetails)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.newPassword.clearValidators();\n            this.newPassword.updateValueAndValidity();\n            this.passwordForm.get('currentPassword').clearValidators();\n            this.passwordForm.get('currentPassword').updateValueAndValidity();\n            this.passwordForm.get('verifyPassword').clearValidators();\n            this.passwordForm.get('verifyPassword').updateValueAndValidity();\n            this.passwordForm.reset();\n            this.newPassword.reset();\n            this._toaster.success('Password updated successfully', 'Profile');\n            this.logoutUser();\n          } else {\n            this._toaster.error('Cannot update the password', 'Profile');\n          }\n        },\n        (err: any) => {\n          this._toaster.error(err.error.message || 'Server Error', 'Profile');\n        }\n      );\n  }\n\n  /**\n   * Signouts the user\n   */\n  logoutUser(): void {\n    this._login.logoutUser().subscribe(\n      (res) => {},\n      (err: HttpErrorResponse) => {\n        this._localStorage.deleteItem('project');\n        this._localStorage.deleteItem('user');\n        this._localStorage.deleteItem('paymentCaptured');\n        window.location.reload();\n      }\n    );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<div class=\"fluid-container\">\n  <div class=\"row\">\n    <!-- MENU -->\n    <div class=\"col-md-3\">\n      <mat-card>\n        <mat-card-header>\n          <!-- <div mat-card-avatar class=\"example-header-image\"></div> -->\n          <mat-card-title style=\"font-size: 18px\">Edit Profile</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"list-group\">\n            <a\n              href=\"#\"\n              class=\"list-group-item\"\n              (click)=\"settingActive = 1\"\n              [ngClass]=\"{ active: settingActive == 1 }\"\n              >Personal</a\n            >\n            <a\n              href=\"#\"\n              class=\"list-group-item\"\n              (click)=\"settingActive = 2\"\n              [ngClass]=\"{ active: settingActive == 2 }\"\n              >Password</a\n            >\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n    <!-- MENU BODY -->\n    <div class=\"col-md-8\">\n      <div *ngIf=\"settingActive === 1\">\n        <mat-card class=\"p-4\">\n          <mat-card-content>\n            <form\n              [formGroup]=\"personalDetailsForm\"\n              class=\"form-validate\"\n              role=\"form\"\n              name=\"personalDetailsForm\"\n              novalidate=\"\"\n            >\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <!-- First name input -->\n                  <div class=\"form-group\">\n                    <mat-form-field appearance=\"outline\">\n                      <mat-label>First Name</mat-label>\n                      <input\n                        matInput\n                        class=\"form-control\"\n                        id=\"firstName\"\n                        type=\"text\"\n                        name=\"firstName\"\n                        placeholder=\"Enter first name\"\n                        autocomplete=\"off\"\n                        formControlName=\"firstName\"\n                        required=\"\"\n                      />\n                      <mat-icon matSuffix>person</mat-icon>\n                      <mat-error\n                        *ngIf=\"\n                          personalDetailsForm.get('firstName').hasError('required') &&\n                          (personalDetailsForm.get('firstName').dirty ||\n                            personalDetailsForm.get('firstName').touched)\n                        \"\n                      >\n                        First name is required.\n                      </mat-error>\n                    </mat-form-field>\n                  </div>\n                </div>\n                <div class=\"col-md-6\">\n                  <!-- Last name input -->\n                  <div class=\"form-group\">\n                    <mat-form-field appearance=\"outline\">\n                      <mat-label>Last Name</mat-label>\n                      <input\n                        matInput\n                        class=\"form-control border-right-0\"\n                        id=\"lastName\"\n                        type=\"text\"\n                        name=\"lastName\"\n                        placeholder=\"Enter last name\"\n                        autocomplete=\"off\"\n                        formControlName=\"lastName\"\n                        required=\"\"\n                      />\n                      <mat-icon matSuffix>person</mat-icon>\n                      <mat-error\n                        *ngIf=\"\n                          personalDetailsForm.get('lastName').hasError('required') &&\n                          (personalDetailsForm.get('lastName').dirty ||\n                            personalDetailsForm.get('lastName').touched)\n                        \"\n                      >\n                        Last name is required.\n                      </mat-error>\n                    </mat-form-field>\n                  </div>\n                </div>\n              </div>\n              <!-- User name input -->\n              <div class=\"form-group\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Username</mat-label>\n                  <input\n                    matInput\n                    class=\"form-control border-right-0\"\n                    id=\"username\"\n                    type=\"text\"\n                    name=\"username\"\n                    placeholder=\"Enter user name\"\n                    autocomplete=\"off\"\n                    formControlName=\"username\"\n                    required=\"\"\n                  />\n                  <mat-icon matSuffix>person</mat-icon>\n                  <mat-error\n                    *ngIf=\"\n                      personalDetailsForm.get('username').hasError('required') &&\n                      (personalDetailsForm.get('username').dirty ||\n                        personalDetailsForm.get('username').touched)\n                    \"\n                  >\n                    User name is required.\n                  </mat-error>\n                </mat-form-field>\n              </div>\n              <!-- Email input -->\n              <div class=\"form-group\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Email</mat-label>\n                  <input\n                    matInput\n                    class=\"form-control border-right-0\"\n                    type=\"email\"\n                    name=\"account_email\"\n                    placeholder=\"Enter email\"\n                    autocomplete=\"off\"\n                    formControlName=\"email\"\n                    required=\"\"\n                  />\n                  <mat-icon matSuffix>email</mat-icon>\n                  <mat-error\n                    *ngIf=\"\n                      personalDetailsForm.controls['email'].hasError('required') &&\n                      (personalDetailsForm.controls['email'].dirty ||\n                        personalDetailsForm.controls['email'].touched)\n                    \"\n                  >\n                    Email id is required.\n                  </mat-error>\n                  <mat-error\n                    *ngIf=\"\n                      personalDetailsForm.get('email').hasError('email') &&\n                      (personalDetailsForm.get('email').dirty ||\n                        personalDetailsForm.get('email').touched)\n                    \"\n                  >\n                    Invalid email id.\n                  </mat-error>\n                </mat-form-field>\n              </div>\n              <!-- BUTTON -->\n              <div class=\"text-right\">\n                <button\n                  [disabled]=\"personalDetailsForm.invalid\"\n                  class=\"mr-1 btn-primary\"\n                  mat-flat-button\n                  type=\"submit\"\n                  (click)=\"updatePersonalDetails(personalDetailsForm.value)\"\n                >\n                  Update\n                </button>\n              </div>\n            </form>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      <div *ngIf=\"settingActive === 2\">\n        <mat-card class=\"p-4\">\n          <mat-card-content>\n            <form\n              [formGroup]=\"passwordForm\"\n              class=\"form-validate\"\n              role=\"form\"\n              name=\"passwordForm\"\n              novalidate=\"\"\n            >\n              <!-- Current password input -->\n              <div class=\"row\">\n                <div class=\"col-md-12 form-group\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label for=\"password\">Current password</mat-label>\n                    <input\n                      appBlockCopyPaste\n                      matInput\n                      [type]=\"hideCurrPassword ? 'password' : 'text'\"\n                      name=\"password\"\n                      id=\"password\"\n                      formControlName=\"currentPassword\"\n                      placeholder=\"Enter current password\"\n                      required\n                    />\n                    <button mat-icon-button matSuffix (click)=\"hideCurrPassword = !hideCurrPassword\">\n                      <mat-icon>{{ hideCurrPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n                    </button>\n                    <mat-error\n                      *ngIf=\"\n                        passwordForm.get('currentPassword').hasError('required') &&\n                        (passwordForm.get('currentPassword').dirty ||\n                          passwordForm.get('currentPassword').touched)\n                      \"\n                      >Current password is required.\n                    </mat-error>\n                  </mat-form-field>\n                </div>\n              </div>\n              <div class=\"row\">\n                <!-- New Password input -->\n                <div class=\"col-md-6\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label for=\"password\">New password</mat-label>\n                    <input\n                      appBlockCopyPaste\n                      matInput\n                      [type]=\"hidePassword ? 'password' : 'text'\"\n                      name=\"newPassword\"\n                      id=\"newPassword\"\n                      [formControl]=\"newPassword\"\n                      placeholder=\"Enter your new password\"\n                      required\n                    />\n                    <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\">\n                      <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n                    </button>\n                    <mat-error\n                      *ngIf=\"\n                        newPassword.hasError('required') &&\n                        (newPassword.dirty || newPassword.touched)\n                      \"\n                    >\n                      New password is required.\n                    </mat-error>\n                    <mat-error *ngIf=\"newPassword.hasError('pattern')\">\n                      New password cannot start with a blank space.\n                    </mat-error>\n                  </mat-form-field>\n                </div>\n\n                <!-- Confirm new password input -->\n                <div class=\"col-md-6\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label for=\"confirmpassword\">Confirm password</mat-label>\n                    <input\n                      matInput\n                      appBlockCopyPaste\n                      [type]=\"hideConfirmPassword ? 'password' : 'text'\"\n                      name=\"confirmpassword\"\n                      id=\"confirmpassword\"\n                      formControlName=\"verifyPassword\"\n                      placeholder=\"Enter your confirm password\"\n                      required\n                    />\n                    <button\n                      mat-icon-button\n                      matSuffix\n                      (click)=\"hideConfirmPassword = !hideConfirmPassword\"\n                    >\n                      <mat-icon>{{\n                        hideConfirmPassword ? 'visibility_off' : 'visibility'\n                      }}</mat-icon>\n                    </button>\n                    <mat-error\n                      *ngIf=\"\n                        passwordForm.get('verifyPassword').hasError('required') &&\n                        (passwordForm.get('verifyPassword').dirty ||\n                          passwordForm.get('verifyPassword').touched)\n                      \"\n                      >Confirm password is required.\n                    </mat-error>\n                    <mat-error\n                      *ngIf=\"\n                        passwordForm.get('verifyPassword').hasError('equalTo') &&\n                        passwordForm.get('verifyPassword').value\n                      \"\n                      >Confirm password doesn't match.\n                    </mat-error>\n                  </mat-form-field>\n                </div>\n              </div>\n              <!-- PASSWORD POLICY -->\n              <div class=\"row mt-2\">\n                <div class=\"col-md-12\">\n                  <!-- <div class=\"ml-3 \"> -->\n                  <mat-chip-list class=\"d-flex justify-content-center\">\n                    <mat-chip [ngClass]=\"newPassword.hasError('number') ? 'has-error' : 'no-error'\"\n                      >1 number</mat-chip\n                    >\n                    <mat-chip\n                      [ngClass]=\"newPassword.hasError('upperCase') ? 'has-error' : 'no-error'\"\n                      >1 upper case\n                    </mat-chip>\n                    <mat-chip\n                      [ngClass]=\"newPassword.hasError('lowerCase') ? 'has-error' : 'no-error'\"\n                      >1 lower case\n                    </mat-chip>\n                    <mat-chip\n                      [ngClass]=\"newPassword.hasError('specialChar') ? 'has-error' : 'no-error'\"\n                      >1 special char\n                    </mat-chip>\n                    <mat-chip\n                      [ngClass]=\"newPassword.hasError('minlength') ? 'has-error' : 'no-error'\"\n                      >Min. 8 chars\n                    </mat-chip>\n                    <mat-chip\n                      [ngClass]=\"newPassword.hasError('maxlength') ? 'has-error' : 'no-error'\"\n                      >Max. 32 chars\n                    </mat-chip>\n                  </mat-chip-list>\n                  <!-- </div> -->\n                </div>\n              </div>\n              <!-- BUTTON -->\n              <div class=\"text-right mt-4\">\n                <button\n                  [disabled]=\"passwordForm.invalid || newPassword.invalid\"\n                  class=\"mr-1 btn-primary\"\n                  mat-flat-button\n                  type=\"submit\"\n                  (click)=\"updatePassword(passwordForm.value)\"\n                >\n                  Update\n                </button>\n              </div>\n            </form>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Pipe, PipeTransform } from '@angular/core';\n/**\n * Converts row col value to K, M, B.\n * Accepts row col value in original and formats it accordingly.\n * Usage:\n *  value|rowColValConverter\n * Example:\n *  {{ 150000 | rowColValConverter }}\n */\n\n@Pipe({ name: 'rowColValConverter' })\nexport class RowColValConverterPipe implements PipeTransform {\n    transform(val:number) {\n        if(val == 0) {\n            return 0;\n        }\n        else\n        {        \n          // hundreds\n          if(val <= 999){\n            return val ;\n          }\n          // thousands\n          else if(val >= 1000 && val <= 999999){\n            return (val / 1000) + 'K';\n          }\n          // millions\n          else if(val >= 1000000 && val <= 999999999){\n            return (val / 1000000) + 'M';\n          }\n          // billions\n          else if(val >= 1000000000 && val <= 999999999999){\n            return (val / 1000000000) + 'B';\n          }\n          else\n            return val ;\n          }\n        }\n}","/**\n * NLP languages\n */\nexport const NLP_LANGUAGES: Array<string> = ['English', 'Portuguese'];\n\n/**\n * NLP feature counts\n */\nexport const NLP_FEATURE_COUNTS: Array<number> = [50, 100, 150, 200];\n\n/**\n * Resampling constants\n */\nexport const RESAMPLING_CONSTANTS: Array<any> = [\n  { desc: 'Business day frequency', value: 'B', index: 3 },\n  { desc: 'Custom business day frequency (experimental)', value: 'C' },\n  { desc: 'Calendar day frequency', value: 'D', index: 3 },\n  { desc: 'Weekly frequency', value: 'W', index: 4 },\n  { desc: 'Month end frequency', value: 'M', index: 6 },\n  //{ desc: 'Semi-month end frequency (15th and end of month)', value: 'SM', index:5 },\n  //{ desc: 'Business month end frequency', value: 'BM', index:6 },\n  { desc: 'Custom business month end frequency', value: 'CBM' },\n  { desc: 'Month start frequency', value: 'MS', index: 6 },\n  //{ desc: 'Semi-month start frequency (1st and 15th)', value: 'SMS', index:5 },\n  //{ desc: 'Business month start frequency', value: 'BMS', index:6 },\n  { desc: 'Custom business month start frequency', value: 'CBMS' },\n  //{ desc: 'Quarter end frequency', value: 'Q', index:7 },\n  //{ desc: 'Business quarter end frequency', value: 'BQ', index:7 },\n  //{ desc: 'Quarter start frequency', value: 'QS', index:7 },\n  //{ desc: 'Business quarter start frequency', value: 'BQS', index:7 },\n  { desc: \"Year end frequency\", value: \"A\", index: 8 },\n  //{ desc: \"Business year end frequency\", value: \"BA\", index: 8 },\n  { desc: \"Year start frequency\", value: \"AS\", index: 8 },\n  //{ desc: \"Business year start frequency\", value: \"BAS\", index: 8 },\n  { desc: \"Business hour frequency\", value: \"BH\", index: 2 },\n  { desc: 'Hourly frequency', value: 'H', index: 2 },\n  { desc: 'Minutely frequency', value: 'T', index: 1 },\n];\n\n/**\n * Method constants\n */\nexport const METHOD_CONSTANTS: Array<any> = [\n  { desc: 'Backward fill', value: 'bfill' },\n  // { desc: 'Count of values', value: 'count' },\n  { desc: 'Forward fill', value: 'ffill' },\n  { desc: 'First valid data value', value: 'first' },\n  { desc: 'Last valid data value', value: 'last' },\n  { desc: 'Maximum data value', value: 'max' },\n  { desc: 'Mean of values in time range', value: 'mean' },\n  { desc: 'Median of values in time range', value: 'median' },\n  { desc: 'Minimum data value', value: 'min' },\n  //{ desc: 'Number of unique values', value: 'nunique' },\n  //{ desc: \"Opening value, highest value, lowest value, closing value\", value: \"ohlc\" },\n  { desc: 'Same as forward fill', value: 'pad' },\n  { desc: 'Standard deviation of values', value: 'std' },\n  { desc: 'Sum of values', value: 'sum' },\n  { desc: 'Variance of values', value: 'var' },\n];\n\n/**\n * Frequencies constant\n */\nexport const FREQUENCIES: Array<number> = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n  28, 29, 30,\n];\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchedularService {\n\n  serverBaseUrl = environment.serverBaseUrl;\n\n  constructor(private _htttp: HttpClient) { }\n\n  /**\n   * Fetches the schedulars list from DB\n   */\n  getSchedularsList(): Observable<any> {\n    return this._htttp.get(`${this.serverBaseUrl}/api/v2/scheduler`);\n  }\n\n  /**\n   * Creates a new schedular\n   * @param schedularDetails \n   */\n  createNewSchedular(schedularDetails: any): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/v2/scheduler`, schedularDetails);\n  }\n\n  /**\n   * Updates the schedular\n   * @param schedularDetails \n   */\n  updatedSchedular(schedularDetails: any, schedularId: string): Observable<any> {\n    return this._htttp.put(`${this.serverBaseUrl}/api/v2/scheduler/${schedularId}`, schedularDetails);\n  }\n  /**\n   * Starts the schedular\n   * @param schedularId \n   */\n  startSchedular(schedularId: string): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/v2/scheduler/${schedularId}/play`, { id: schedularId });\n  }\n\n  /**\n   * Stops the schedular\n   * @param schedularId \n   */\n  stopSchedular(schedularId: string): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/v2/scheduler/${schedularId}/pause`, { id: schedularId });\n  }\n\n  /**\n   * Deletes the schedular from DB\n   * @param schedularId \n   */\n  deleteSchedular(schedularId: string): Observable<any> {\n    return this._htttp.delete(`${this.serverBaseUrl}/api/v2/scheduler/${schedularId}`);\n  }\n}\n","import { Directive, ElementRef } from '@angular/core';\r\ndeclare var $: any;\r\n\r\n@Directive({\r\n    selector: '[checkAll]'\r\n})\r\nexport class CheckallDirective {\r\n\r\n    constructor(public el: ElementRef) {\r\n        let $element = $(el.nativeElement);\r\n\r\n        $element.on('change', function() {\r\n            let index = $element.index() + 1,\r\n                checkbox = $element.find('input[type=\"checkbox\"]'),\r\n                table = $element.parents('table');\r\n            // Make sure to affect only the correct checkbox column\r\n            table.find('tbody > tr > td:nth-child(' + index + ') input[type=\"checkbox\"]')\r\n                .prop('checked', checkbox[0].checked);\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","import { OnInit, OnDestroy, Directive, Input, ElementRef } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n@Directive({\r\n    selector: '[now]'\r\n})\r\nexport class NowDirective implements OnInit, OnDestroy {\r\n\r\n    @Input() format;\r\n    intervalId;\r\n\r\n    constructor(public element: ElementRef) { }\r\n\r\n    ngOnInit() {\r\n        this.updateTime();\r\n        this.intervalId = setInterval(this.updateTime.bind(this), 1000);\r\n    }\r\n\r\n    updateTime() {\r\n        let dt = moment().format(this.format);\r\n        this.element.nativeElement.innerHTML = dt;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n}\r\n","import { OnInit, OnChanges, OnDestroy, Directive, ElementRef, Input, Output, SimpleChange, EventEmitter } from '@angular/core';\r\n\r\ndeclare var $: any;\r\n\r\n@Directive({\r\n    selector: '[flot]'\r\n})\r\nexport class FlotDirective implements OnInit, OnChanges, OnDestroy {\r\n\r\n    element: any;\r\n    plot: any;\r\n    width: any;\r\n\r\n    @Input() dataset: any;\r\n    @Input() options: any;\r\n    @Input() attrWidth: any;\r\n    @Input() height: number;\r\n    @Input() series: any;\r\n\r\n    @Output() ready = new EventEmitter();\r\n\r\n    constructor(public el: ElementRef) {\r\n        this.element = $(this.el.nativeElement);\r\n\r\n        if (!$.plot) {\r\n            console.log('Flot chart no available.');\r\n        }\r\n\r\n        this.plot = null;\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\r\n        if (!$.plot) {\r\n            return;\r\n        }\r\n        if (changes['dataset']) {\r\n            this.onDatasetChanged(this.dataset);\r\n        }\r\n        if (changes['series']) {\r\n            this.onSerieToggled(this.series);\r\n        }\r\n    }\r\n\r\n    init() {\r\n\r\n        const heightDefault = 220;\r\n\r\n        this.width = this.attrWidth || '100%';\r\n        this.height = this.height || heightDefault;\r\n\r\n        this.element.css({\r\n            width: this.width,\r\n            height: this.height\r\n        });\r\n\r\n        let plotObj;\r\n        if (!this.dataset || !this.options) {\r\n            return;\r\n        }\r\n        plotObj = $.plot(this.el.nativeElement, this.dataset, this.options);\r\n        if (this.ready) {\r\n            this.ready.next({ plot: plotObj });\r\n        }\r\n        return plotObj;\r\n    }\r\n\r\n    onDatasetChanged(dataset) {\r\n        if (this.plot) {\r\n            this.plot.setData(dataset);\r\n            this.plot.setupGrid();\r\n            return this.plot.draw();\r\n        } else {\r\n            this.plot = this.init();\r\n            this.onSerieToggled(this.series);\r\n            return this.plot;\r\n        }\r\n    }\r\n\r\n    onSerieToggled(series) {\r\n        if (!this.plot || !series) {\r\n            return;\r\n        }\r\n        let someData = this.plot.getData();\r\n        for (let sName in series) {\r\n            series[sName].forEach(toggleFor(sName));\r\n        }\r\n\r\n        this.plot.setData(someData);\r\n        this.plot.draw();\r\n\r\n        function toggleFor(sName) {\r\n            return function(s, i) {\r\n                if (someData[i] && someData[i][sName]) {\r\n                    someData[i][sName].show = s;\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.plot) {\r\n            this.plot.shutdown();\r\n        }\r\n    }\r\n}\r\n","import { OnInit, Directive, Input, ElementRef, OnDestroy } from '@angular/core';\r\ndeclare var $: any;\r\n\r\n@Directive({\r\n    selector: '[vectormap]'\r\n})\r\nexport class VectormapDirective implements OnInit, OnDestroy {\r\n\r\n    @Input() mapHeight: number;\r\n    @Input() mapName: any;\r\n    @Input() mapOptions: any;\r\n    @Input() seriesData: any;\r\n    @Input() markersData: any;\r\n\r\n    $element: any;\r\n\r\n    constructor(public element: ElementRef) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this.$element = $(this.element.nativeElement);\r\n        this.$element.css('height', this.mapHeight);\r\n\r\n        if (!this.$element.length || !this.$element.vectorMap) {\r\n            return;\r\n        }\r\n\r\n        this.$element.vectorMap({\r\n            map: this.mapName,\r\n            backgroundColor: this.mapOptions.bgColor,\r\n            zoomMin: 1,\r\n            zoomMax: 8,\r\n            zoomOnScroll: false,\r\n            regionStyle: {\r\n                initial: {\r\n                    'fill': this.mapOptions.regionFill,\r\n                    'fill-opacity': 1,\r\n                    'stroke': 'none',\r\n                    'stroke-width': 1.5,\r\n                    'stroke-opacity': 1\r\n                },\r\n                hover: {\r\n                    'fill-opacity': 0.8\r\n                },\r\n                selected: {\r\n                    fill: 'blue'\r\n                },\r\n                selectedHover: {\r\n                }\r\n            },\r\n            focusOn: { x: 0.4, y: 0.6, scale: this.mapOptions.scale },\r\n            markerStyle: {\r\n                initial: {\r\n                    fill: this.mapOptions.markerColor,\r\n                    stroke: this.mapOptions.markerColor\r\n                }\r\n            },\r\n            onRegionLabelShow: (e, el, code) => {\r\n                if (this.seriesData && this.seriesData[code]) {\r\n                    el.html(el.html() + ': ' + this.seriesData[code] + ' visitors');\r\n                }\r\n            },\r\n            markers: this.markersData,\r\n            series: {\r\n                regions: [{\r\n                    values: this.seriesData,\r\n                    scale: this.mapOptions.scaleColors,\r\n                    normalizeFunction: 'polynomial'\r\n                }]\r\n            },\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.$element.vectorMap('get', 'mapObject').remove();\r\n    }\r\n\r\n}\r\n","import { OnInit, OnDestroy, Directive, Input, ElementRef } from '@angular/core';\r\ndeclare var $: any;\r\n\r\n@Directive({\r\n    selector: '[sparkline]'\r\n})\r\nexport class SparklineDirective implements OnInit, OnDestroy {\r\n\r\n    @Input() sparkline;\r\n    @Input() values;\r\n\r\n    // generate a unique resize event so we can detach later\r\n    private resizeEventId = 'resize.sparkline' + 1324;\r\n    private $element;\r\n\r\n    constructor(private el: ElementRef) {\r\n        this.$element = $(el.nativeElement);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initSparkLine();\r\n    }\r\n\r\n    initSparkLine() {\r\n        let options = this.sparkline,\r\n            data = this.$element.data();\r\n\r\n        if (!options) {// if no scope options, try with data attributes\r\n            options = data;\r\n        }\r\n        else {\r\n            if (data) {// data attributes overrides scope options\r\n                options = $.extend({}, options, data);\r\n            }\r\n        }\r\n\r\n        options.type = options.type || 'bar'; // default chart is bar\r\n        options.disableHiddenCheck = true;\r\n\r\n        this.runSparkline(options);\r\n\r\n        if (options.resize) {\r\n            $(window).on(this.resizeEventId, () => {\r\n                this.runSparkline(options);\r\n            });\r\n        }\r\n    }\r\n\r\n    runSparkline(options) {\r\n        if(this.values) {\r\n            if( typeof this.values === 'string')\r\n                this.values = this.values.split(','); // assume comma separated string\r\n            this.$element.sparkline(this.values, options);\r\n        }\r\n        else {\r\n            this.$element.sparkline('html', options);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        $(window).off(this.resizeEventId);\r\n    }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SampleDatasetService {\n  serverBaseUrl = environment.serverBaseUrl;\n\n  constructor(private _htttp: HttpClient) {}\n\n  /**\n   * Creates a new sample Dataset\n   * @param reqObj\n   * @returns\n   */\n  createDataset(file: any, formValue: any): Observable<any> {\n    const formData: FormData = new FormData();\n    formData.append('file', file);\n    formData.append('data', JSON.stringify(formValue));\n    return this._htttp.post(`${this.serverBaseUrl}/api/sampledatasets`, formData);\n  }\n\n  /**\n   * Fetches the Datasets list\n   */\n  getAllDatasets(): Observable<any> {\n    return this._htttp.get(`${this.serverBaseUrl}/api/sampledatasets`);\n  }\n\n  /**\n   * Deletes the Dataset from DB\n   * @param DatasetId\n   */\n  deleteDataset(DatasetId: string): Observable<any> {\n    return this._htttp.delete(`${this.serverBaseUrl}/api/sampledatasets/${DatasetId}`);\n  }\n\n  /**\n   * Updates the Dataset details\n   * @param userId\n   */\n  updateDataset(DatasetData: any, DatasetId: string): Observable<any> {\n    return this._htttp.put(`${this.serverBaseUrl}/api/sampledatasets/${DatasetId}`, DatasetData);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DashboardService {\n  serverBaseUrl: string = environment.serverBaseUrl;\n  formData: FormData = new FormData();\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches all the projects list of logged user\n   */\n  getAllProjectsList(): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/projects`);\n  }\n\n  /**\n   * Fetches all the projects list of logged user\n   */\n  createNewProject(projectDetails: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/projects`, projectDetails);\n  }\n\n  /**\n   * Updates the project details\n   * @param projectDetails\n   */\n  updateProjectDetails(projectDetails: any, projectId: string): Observable<any> {\n    return this._http.put(`${this.serverBaseUrl}/api/projects/${projectId}`, projectDetails);\n  }\n\n  /**\n   * Uploads the existing project\n   * @param file project file details\n   */\n  uploadProject(file: any, uplaodType?: string): Observable<any> {\n    this.formData.set('file', file, file.name);\n    return this._http.post(\n      `${this.serverBaseUrl}/api/project/import?uploadType=importProject`,\n      this.formData\n    );\n  }\n\n  /**\n   * Imports the file if selected from sample templates\n   * @param filename\n   * @returns\n   */\n  importTemplateProject(filename: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/project/import?uploadType=importTemplate`,\n      filename\n    );\n  }\n\n  /**\n   * Deletes the project\n   * @param projectId\n   */\n  deleteProject(projectId: string, deleteType: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/projects/${projectId}?deleteType=${deleteType}`);\n  }\n\n  /**\n   * Fetches the license information\n   */\n  getLicenseInfo(): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/project/licenseInfo`);\n  }\n\n  /**\n   * Generates a download link for the project for export\n   */\n  generateDownloadLink(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/projects/${projectId}/export`);\n  }\n\n  /**\n   * Gets the generated download link\n   * @param projectId selected project id\n   */\n  getDownloadLink(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/projects/${projectId}/download`);\n  }\n\n  /**\n   * Fetches the particular project comments\n   * @param projectId selected project\n   */\n  fetchProjectComments(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/projects/${projectId}/discuss`);\n  }\n\n  /**\n   * Adds comments to the particular project\n   * @param message comment\n   * @param projectId selected project\n   */\n  addProjectComments(message: object, projectId: string): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/projects/${projectId}/discuss`, message);\n  }\n\n  /**\n   * Shares the project to the provided email\n   * @param email receivers id\n   * @param projectId selected project id\n   */\n  shareProject(email: object, projectId: string): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/projects/${projectId}/share`, email);\n  }\n\n  /**\n   * function to get the list of uploaded models by the admin.\n   * @param taskType this is the identifier for the origin of the request.\n   * @returns\n   */\n  taModel(taskType: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/upload/model`, {\n      params: { taskType: taskType },\n    });\n  }\n\n  /**\n   * Fetches the machine details from server\n   * @returns\n   */\n  getMachineDetails(): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/settings/pscoreIdCreation`);\n  }\n\n  getProjectCount(): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/project/projectCount`);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CreateConnectionService {\n  serverBaseUrl = environment.serverBaseUrl;\n  constructor(private _htttp: HttpClient) {}\n\n  /**\n   * Test the connection with DB for success or not\n   * @param connectionDetials\n   */\n  testDBConnection(connectionDetials: any): Observable<any> {\n    return this._htttp.post(\n      `${this.serverBaseUrl}/api/v2/dbconn/test/connection`,\n      connectionDetials\n    );\n  }\n\n  /**\n   * Test the connection is success or not\n   * @param connectionDetials\n   */\n  testConnection(connectionDetials: any, source: string): Observable<any> {\n    return this._htttp.post(\n      `${this.serverBaseUrl}/api/connections/${source}/test`,\n      connectionDetials\n    );\n  }\n\n  /**\n   * Test the connection with SFTP for success or not\n   * @param connectionDetials\n   */\n  testSFTPConnection(connectionDetials: any): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/v2/sftp/test/connection`, connectionDetials);\n  }\n\n  /**\n   * Fetches all DB connections list\n   */\n  getDbConnectionList(): Observable<any> {\n    return this._htttp.get(`${this.serverBaseUrl}/api/v2/dbconn`);\n  }\n\n  /**\n   * Fetches all DB connections list\n   */\n  getSftpConnectionList(): Observable<any> {\n    return this._htttp.get(`${this.serverBaseUrl}/api/v2/sftp`);\n  }\n\n  /**\n   * Fetches all connections list as per the type\n   */\n  getConnectionsList(type: string): Observable<any> {\n    return this._htttp.get(`${this.serverBaseUrl}/api/connections/${type}`);\n  }\n\n  /**\n   * Creates the new connection as per the type\n   */\n  createNewConnection(type: string, reqObj: any): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/connections/${type}`, reqObj);\n  }\n\n  /**\n   * Creates a new database connection\n   * @param connectionDetials\n   */\n  createDBConnection(connectionDetials: any): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/v2/dbconn`, connectionDetials);\n  }\n\n  /**\n   * Updates the DB connection details\n   * @param connectionDetials\n   * @param connectionId\n   */\n  updateDBConnection(connectionDetials: any, connectionId: string): Observable<any> {\n    return this._htttp.put(\n      `${this.serverBaseUrl}/api/v2/dbconn/${connectionId}`,\n      connectionDetials\n    );\n  }\n\n  /**\n   * Creates a new SFTP connection\n   * @param connectionDetials\n   */\n  createSFTPConnection(connectionDetials: any): Observable<any> {\n    return this._htttp.post(`${this.serverBaseUrl}/api/v2/sftp`, connectionDetials);\n  }\n\n  /**\n   * Updates the SFTP connection details\n   * @param connectionDetials\n   * @param connectionId\n   */\n  updateSFTPConnection(connectionDetials: any, connectionId: string): Observable<any> {\n    return this._htttp.put(`${this.serverBaseUrl}/api/v2/sftp/${connectionId}`, connectionDetials);\n  }\n\n  /**\n   * Deletes the DB connection\n   * @param connectionId\n   */\n  deleteDBConnection(connectionId: string): Observable<any> {\n    return this._htttp.delete(`${this.serverBaseUrl}/api/v2/dbconn/${connectionId}`);\n  }\n\n  /**\n   * Deletes the SFTP connection\n   * @param connectionId\n   */\n  deleteSFTPConnection(connectionId: string): Observable<any> {\n    return this._htttp.delete(`${this.serverBaseUrl}/api/v2/sftp/${connectionId}`);\n  }\n\n  /**\n   * Updates the connection details as per the type\n   */\n  updateConnection(connId: string, type: string, reqObj: any): Observable<any> {\n    return this._htttp.put(\n      `${this.serverBaseUrl}/api/connections/${connId}/update/${type}`,\n      reqObj\n    );\n  }\n\n  /**\n   * Deletes the connection details as per the type\n   */\n  deleteConnection(connId: string, type: string): Observable<any> {\n    return this._htttp.delete(`${this.serverBaseUrl}/api/connections/${connId}/delete/${type}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataDriftService {\n  serverBaseUrl = environment.serverBaseUrl;\n  formData: FormData = new FormData();\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches all the drift configurations from DB\n   */\n  getAllSettings(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/config`);\n  }\n\n  /**\n   * Deletes the drift setting from DB\n   * @param projectId \n   * @param configId \n   * @returns \n   */\n  deleteSetting(projectId: string, configId: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/v2/projects/${projectId}/delete/${configId}`);\n  }\n\n  /**\n   * Creates a new drift setting record in DB\n   * @param projectId \n   * @param settingDetails \n   * @returns \n   */\n  createNewSetting(projectId: string, settingDetails: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/driftConfig`, settingDetails);\n  }\n\n  /**\n   * Updates the selected drift settings details in DB\n   * @param projectId \n   * @param configId \n   * @param settingDetails \n   * @returns \n   */\n  updateSetting(projectId: string, configId: string, settingDetails: any): Observable<any> {\n    return this._http.put(`${this.serverBaseUrl}/api/v2/projects/${projectId}/update/${configId}`, settingDetails);\n  }\n\n  /**\n   * Fetches all the generated drift reports from DB\n   * @param projectId \n   * @returns \n   */\n  getAllReports(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/datadrift/list`);\n  }\n\n  /**\n   * Deletes the report from DB\n   * @param projectId \n   * @param reportId \n   * @returns \n   */\n  deleteReport(projectId: string, reportId: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/v2/projects/${projectId}/datadrift/${reportId}`);\n  }\n\n  /**\n   * Fetches the report details from DB\n   * @param projectId \n   * @param reportId \n   * @returns \n   */\n  getReportDetails(projectId: string, reportId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/datadrift/${reportId}`);\n  }\n\n  /**\n   * Starts the drift analysis\n   * @param trainingId \n   * @param modelId \n   * @param featurewiseDetails \n   * @returns observable \n   */\n  startDriftAnalysis(trainingId: string, modelId: string, featurewiseDetails: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/training/${trainingId}/models/${modelId}/datadrift/start`, featurewiseDetails);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n/**\n * Filters the files schema as per the datatype for index value in timeseries project only\n */\n@Pipe({\n  name: 'indexDataType',\n})\nexport class IndexDataTypePipe implements PipeTransform {\n  transform(items: Array<any>): Array<any> {\n    items = items.filter((item) => item.dataType === 'Datetime');\n    return items;\n  }\n}\n","// Add all common messages or static data in this file to reuse where ever required\n\nexport const toasterMsg = {\n  fileUpload: 'Started file analysing and saving...',\n  pullData: 'Pulling the data...',\n};\n\nexport const DomainList: Array<any> = [\n  { name: 'Health Care', value: 'health_care' },\n  { name: 'Agriculture', value: 'agriculture' },\n  { name: 'Manufacturing', value: 'manufacturing' },\n  { name: 'Sports', value: 'sports' },\n  { name: 'Banking', value: 'banking' },\n  { name: 'Insurance', value: 'insurance' },\n  { name: 'Telecommunication', value: 'telecommunications' },\n  { name: 'Other', value: 'other' },\n];\n","import { Pipe, PipeTransform } from '@angular/core';\n/**\n * Filters the normalization options as per the useGPU and project type\n */\n@Pipe({\n  name: 'normalizationOptions',\n})\nexport class NormalizationOptionsPipe implements PipeTransform {\n  transform(items: Array<any>, project: any): Array<any> {\n    switch (project.type) {\n      case 'predictive_modeling':\n        if (!project.useGPU) {\n          return items;\n        } else {\n          items = items.filter(\n            (item) => item.value !== 'power_transform' && item.value !== 'log_transform'\n          );\n          return items;\n        }\n      case 'clustering':\n        if (!project.useGPU) {\n          return items;\n        } else {\n          items = items.filter(\n            (item) =>\n              item.value !== 'power_transform' &&\n              item.value !== 'log_transform' &&\n              item.value !== 'quantile_transform'\n          );\n          return items;\n        }\n      case 'timeseries':\n        if (!project.useGPU) {\n          return [\n            { name: 'None', value: 'none' },\n            { name: 'Min Max', value: 'minmax_scaler' },\n            { name: 'Quantile Transform', value: 'quantile_transform' },\n            { name: 'Power Transform', value: 'power_transform' },\n          ];\n        } else {\n          return [\n            { name: 'None', value: 'none' },\n            { name: 'Min Max', value: 'minmax_scaler' },\n          ];\n        }\n      default:\n        return items;\n    }\n  }\n}\n","import { DatePipe, DecimalPipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'edaValueFormatter',\n})\nexport class EdaValueFormatterPipe implements PipeTransform {\n  constructor(private _decimalPipe: DecimalPipe, private _datePipe: DatePipe) {}\n\n  transform(value: any): any {\n    if (typeof value === 'number') {\n      return this._decimalPipe.transform(value, '1.0-2');\n    } else if (Date.parse(value)) {\n      return this._datePipe.transform(value, 'dd/MM/yy');\n    } else {\n      return value;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n/**\n * Converts file size to KB,MG,GB\n * Accepts file size in bytes\n * Usage:\n *  value|fileSizeConverter\n * Example:\n *  {{ 2048 | fileSizeConverter }}\n */\n\n@Pipe({ name: 'fileSizeConverter' })\nexport class FileSizeConverterPipe implements PipeTransform {\n    transform(bytes: number, decimals: number) {\n        if (bytes === 0) return '0 Bytes';\n\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportsService {\n  serverBaseUrl = environment.serverBaseUrl;\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches the reports list from DB \n   */\n  getReportsList(): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/shareOutput/byUser`);\n  }\n\n  /**\n   * Fetches the base64 encode for type pdf, png, jpg and tiff\n   * @param reportData selected report data\n   * @param projectId selected report project id\n   */\n  getImageEncode(reportData: object, projectId: string): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/output/data/reportpreview`, reportData);\n  }\n\n  /**\n   * Fetches the advance EDA report html\n   * @param projectId \n   * @param edaId \n   */\n  getAdvanceEdaReport(projectId: string, edaId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/eda/${edaId}/advedainfo`, { responseType: 'text' });\n  }\n\n  /**\n   * Fetches the file data to preiview\n   * @param reportData \n   * @param projectId \n   * @param outputId \n   */\n  getFilePreview(reportData: object, projectId: string, outputId: string): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/output/${outputId}/preview`, reportData);\n  }\n\n  /**\n   * Fetches the advance file data report html\n   * @param projectId \n   * @param edaId \n   */\n  getFileDataReport(projectId: string, dataId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/data/${dataId}/report`, { responseType: 'text' });\n  }\n}\n","import { Directive, Input, OnInit, OnDestroy, ElementRef, OnChanges, SimpleChange } from '@angular/core';\r\ndeclare var $: any;\r\n\r\n@Directive({\r\n    selector: '[jqcloud]'\r\n})\r\nexport class JqcloudDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input() words;\r\n    @Input() width;\r\n    @Input() height;\r\n    @Input() steps;\r\n    $elem: any;\r\n    options: any;\r\n    initialized = false; // flag to not update before plugin was initialized\r\n\r\n    constructor(element: ElementRef) {\r\n        this.$elem = $(element.nativeElement);\r\n        this.options = $.fn.jQCloud.defaults.get();\r\n    }\r\n\r\n    ngOnInit() {\r\n        let opts: any = {};\r\n        if (this.width) {\r\n            opts.width = this.width;\r\n        }\r\n        if (this.height) {\r\n            opts.height = this.height;\r\n        }\r\n        if (this.steps) {\r\n            opts.steps = this.steps;\r\n        }\r\n\r\n        $.extend(this.options, opts);\r\n        this.$elem.jQCloud(this.words, opts);\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\r\n        if (this.initialized && this.words && changes['words']) {\r\n            this.$elem.jQCloud('update', this.words);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.$elem.jQCloud('destroy');\r\n    }\r\n}\r\n","import { OnInit, Directive, Input, ElementRef } from '@angular/core';\r\ndeclare var $: any;\r\n\r\n@Directive({\r\n    selector: 'scrollable'\r\n})\r\nexport class ScrollableDirective implements OnInit {\r\n\r\n    @Input() height: number;\r\n    defaultHeight = 250;\r\n\r\n    constructor(public element: ElementRef) { }\r\n\r\n    ngOnInit() {\r\n        $(this.element.nativeElement).slimScroll({\r\n            height: (this.height || this.defaultHeight)\r\n        });\r\n    }\r\n\r\n}\r\n"]}