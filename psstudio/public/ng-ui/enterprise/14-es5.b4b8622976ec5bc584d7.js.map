{"version":3,"sources":["webpack:///src/app/routes/eda/eda.service.ts","webpack:///src/app/shared/components/eda-report/eda-report.component.ts","webpack:///src/app/shared/components/eda-report/eda-report.component.html","webpack:///src/app/routes/output/output.service.ts","webpack:///src/app/routes/output/output.component.html","webpack:///src/app/routes/output/output.component.ts","webpack:///src/app/routes/output/output.module.ts"],"names":["EdaService","_http","serverBaseUrl","projectId","reqObj","this","post","edaId","get","fileId","responseType","EdaReportComponent","dialogData","_sanitizer","showSpinner","edaData","edaReportData","moduleName","safeUrl","bypassSecurityTrustResourceUrl","dataId","currentEdaId","currentPipelineFilename","fileName","OutputService","environment","formData","FormData","outputId","shareId","OutputComponent","OutputModule","swal","_toaster","_localStorage","_spinner","_dialog","_output","_report","_eda","dataSource","userDataSource","pageSizeOptions","pageSizeOptionsFile","displayedColumns","fileColumnsToDisplay","userColumns","unsubscribe$","Subject","addUserControl","required","email","project","getItem","user","value","paginator","sort","getReportsList","reportOutputList","_id","pipe","takeUntil","subscribe","res","stopSpinner","outputsArray","data","_updateChangeSubscription","error","err","open","template","minWidth","afterOpened","any","reportData","file","filename","outputExt","substring","lastIndexOf","outputType","getEdaData","edaD","tasks","openEdaReport","openPreview","openFilePreview","getImageBase","selectedReportData","openReportModal","getFilePreview","isDataTypeRequired","createdBy","Object","keys","preview","forEach","col","push","fileDataSource","getImageEncode","base64","imageData","reportImage","outputData","type","title","text","icon","buttons","cancel","visible","className","confirm","then","isConfirm","deleteFile","deleteUser","deleteOutput","filter","item","success","userArray","sharedTo","shareEmail","testId","selectedOutput","reset","console","log","message","addUserTemp","dialogRef","manageAccessTemp","getUsersList","height","width","userPaginator","userSort","event","target","trim","toLowerCase","firstPage","next","unsubscribe","forChild","path","component"],"mappings":"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","file":"x","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EdaService {\n  serverBaseUrl: string = environment.serverBaseUrl;\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Does the multi uni variate analysis and generates plot\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  generateMultiUniVariatePlot(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/report/trainmodel/multiunivariate`, reqObj);\n  }\n\n  /**\n   * Shares the report\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  shareReport(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/output`, reqObj);\n  }\n\n  /**\n   * Starts the EDA execution process\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  startEda(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/eda`, reqObj);\n  }\n\n  /**\n   * Get the details about a specific EDA\n   * @param edaId \n   * @returns \n   */\n  getEdaData(edaId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/eda/${edaId}/info`);\n  }\n\n  /**\n   * Reads the uploaded EDA data (summary/features)\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  readUploadedData(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/projects/${projectId}/data/read`, reqObj);\n  }\n\n  /**\n   * Reads Class for the categorical feature\n   * @param reqObj \n   * @returns \n   */\n  getUniqueClass(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/training/feature/unique_categories`, reqObj);\n  }\n\n  /**\n   * Reads conditional filtering data\n   * @param reqObj \n   * @returns \n   */\n  getConditionalFilter(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/conditionalFiltering`, reqObj);\n  }\n\n  /**\n   * Gets List of target\n   * @param reqObj \n   * @returns \n   */\n  getTargetList(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/targetList`, reqObj);\n  }\n\n  /**\n   * Function to find previous Eda details\n   * @param projectId \n   * @param fileId \n   * @returns \n   */\n  getEdaByFileId(projectId: string, fileId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/eda/edaByFile?fileId=${fileId}`);\n  }\n\n  /**\n   * Function to validate the date format\n   * @param reqObj \n   * @returns \n   */\n  dateFormatValidator(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/dateFormat`, reqObj, { responseType: 'text' });\n  }\n\n  multiTimeseriesCheck(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/multiTimeseries`, reqObj, { responseType: 'text' });\n  }\n\n  /**\n   * Reads conditional filtering data\n   * @param reqObj \n   * @returns \n   */\n  getresamplingPreview(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/resamplingPreview`, reqObj);\n  }\n\n  /**\n   * Reads conditional filtering data\n   * @param reqObj \n   * @returns \n   */\n  calculateTimeseriesFrequency(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/multiple/calculateFrequency`, reqObj);\n  }\n\n  /**\n   * find timeseriesGroup\n   */\n  getTimeseriesGroup(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/timeseriesGroupList`, reqObj);\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-eda-report',\n  templateUrl: './eda-report.component.html',\n  styleUrls: ['./eda-report.component.scss'],\n  // encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class EdaReportComponent implements OnInit {\n  serverBaseUrl: string = environment.serverBaseUrl;\n\n  showSpinner: boolean = true;\n  safeUrl: any;\n  edaData: any;\n\n  /**\n   * Receives the injected data in the modal\n   * @param dialogData\n   */\n  constructor(@Inject(MAT_DIALOG_DATA) private dialogData: any, private _sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this.showSpinner = true;\n    this.edaData = this.dialogData.edaReportData;\n    switch (this.dialogData.moduleName) {\n      case 'data-set':\n        this.safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(\n          `${this.serverBaseUrl}/api/v2/projects/${this.edaData.projectId}/data/${this.edaData.dataId}/report`\n        );\n        this.showSpinner = false;\n        break;\n      case 'reports':\n      case 'eda':\n        this.safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(\n          `${this.serverBaseUrl}/api/v2/projects/${this.edaData.projectId}/eda/${this.edaData.edaId}/advedainfo?currentEdaId=${this.edaData.currentEdaId}&currentPipelineFilename=${this.edaData.currentPipelineFilename}`\n        );\n        this.showSpinner = false;\n        break;\n      case 'cluster':\n        this.safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(\n          `${this.serverBaseUrl}/api/projects/${this.edaData.projectId}/clustering/visualize/scatterplot?filename=${this.edaData.fileName}`\n        );\n        this.showSpinner = false;\n        break;\n      default:\n        this.safeUrl = '';\n    }\n  }\n}\n","<mat-dialog-content style=\"max-height: 78vh !important\">\n  <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n  <div *ngIf=\"safeUrl\">\n    <iframe [src]=\"safeUrl\" class=\"ps-iframe-loader\"></iframe>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button class=\"close-btn\" mat-stroked-button mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OutputService {\n  serverBaseUrl = environment.serverBaseUrl;\n  formData: FormData = new FormData();\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches all the report output list\n   */\n  reportOutputList(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/output`);\n  }\n\n  /**\n   * Deletes the output from DB\n   * @param projectId \n   * @param outputId\n   * @returns \n   */\n  deleteOutput(projectId: string, outputId: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/v2/projects/${projectId}/output/${outputId}`);\n  }\n\n  /**\n   * API call to add a share email\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  shareEmail(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/shareOutput`, reqObj);\n  }\n\n  /**\n   * Fetches the added users list from DB\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  getUsersList(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/shareOutput/list`, reqObj);\n  }\n\n  /**\n   * Removes the added user from DB\n   * @param projectId \n   * @param outputId \n   * @returns \n   */\n  deleteUser(projectId: string, shareId: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/v2/projects/${projectId}/shareOutput/${shareId}`);\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">content_paste</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title\">Reports</h3>\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!dataSource.data.length\" class=\"text-center mt-5 font-weight-normal\">\n    You don't have any report shared yet.\n  </h4>\n\n  <!-- Output reports (table) -->\n  <mat-card *ngIf=\"dataSource.data.length\" class=\"reports-listing mt-5 p-4\">\n    <mat-card-content>\n      <!-- Search bar -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" #input />\n      </mat-form-field>\n      <!-- Progress Spinner -->\n      <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n      <table mat-table [dataSource]=\"dataSource\" matSort #reportSort=\"matSort\" matSortActive=\"createdAt\" matSortDirection=\"desc\"\n        matSortDisableClear class=\"mt-2\">\n        <!-- Sr. No Column -->\n        <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef>Sr. No.</th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 }}\n          </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.outputName }}\n          </td>\n        </ng-container>\n\n        <!-- Description Column -->\n        <ng-container matColumnDef=\"desc\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Description</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.outputDescription }}\n          </td>\n        </ng-container>\n\n        <!-- File name Column -->\n        <ng-container matColumnDef=\"fileName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>File Name</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.filename }}\n          </td>\n        </ng-container>\n\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <!-- report button -->\n              <button mat-icon-button (click)=\"handleReportPreview(row)\">\n                <i class=\"fa fa-eye\"></i>\n              </button>\n              <!-- Add user button -->\n              <button mat-icon-button (click)=\"openAddUserModal(row, addUserTemplate)\" matTooltip=\"Share with user\">\n                <i class=\"fa fa-user-plus\"></i>\n              </button>\n              <!-- Manage users button -->\n              <button mat-icon-button (click)=\"manageUser(row, manageAccessTemplate)\" matTooltip=\"Manage user access\">\n                <i class=\"fa fa-users\"></i>\n              </button>\n              <!-- Delete button -->\n              <button class=\"delete-button\" mat-icon-button (click)=\"deleteHandler(row, 'file')\">\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n        </tr>\n      </table>\n      <!-- Paginator -->\n      <mat-paginator #reportPaginator class=\"mt-2\" [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n<!-- Report template to preview pdf, jpg, png, tiff, csv, xls, xlsx files -->\n<ng-template #reportTemplate>\n  <h2 mat-dialog-title>\n    {{ selectedReportData.outputName | titlecase }}\n  </h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <h3>Name : {{ selectedReportData.outputName | titlecase }}</h3>\n    <h3>Description : {{ selectedReportData.outputDescription }}</h3>\n    <h2>Report</h2>\n\n    <!-- To display png, jpg or tiff  -->\n    <div class=\"text-center\" *ngIf=\"outputExt === 'jpg' || outputExt === 'png' || outputExt === 'tiff'\">\n      <img width=\"90%\" [src]=\"reportImage\" class=\"imgbor\" />\n    </div>\n\n    <!-- To display pdf format -->\n    <div *ngIf=\"outputExt === 'pdf'\" class=\"text-center\">\n      <iframe [src]=\"imageData\" class=\"iframe\"></iframe>\n    </div>\n\n    <!-- To display csv, xls, xlsx -->\n    <div *ngIf=\"outputExt === 'csv' || outputExt === 'xls' || outputExt === 'xlsx'\">\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Search\" #input />\n      </mat-form-field>\n\n      <div class=\"mat-elevation-z8\" style=\"box-shadow: none\">\n        <table mat-table [dataSource]=\"fileDataSource\" matSort>\n          <!-- Dynamic columns -->\n          <ng-container [matColumnDef]=\"col\" *ngFor=\"let col of fileColumnsToDisplay\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>{{ col }}</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element[col] }}</td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"fileColumnsToDisplay\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: fileColumnsToDisplay\"></tr>\n\n          <!-- Row shown when there is no matching data. -->\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n              No data matching the filter \"{{ input.value }}\"\n            </td>\n            <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">\n              No data available in table\n            </td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Close</button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!-- Dialog template for email input -->\n<ng-template #addUserTemplate>\n  <h2 mat-dialog-title>Share with</h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label for=\"configName\">Enter email id</mat-label>\n      <input matInput type=\"email\" name=\"email\" [formControl]=\"addUserControl\" id=\"configName\"\n        placeholder=\"Enter email id\" autocomplete required />\n      <mat-error *ngIf=\"\n          addUserControl.hasError('required') && (addUserControl.dirty || addUserControl.touched)\n        \">Email id is required.</mat-error>\n      <mat-error *ngIf=\"addUserControl.hasError('email')\">Invalid email id.</mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Close</button>\n    <button mat-flat-button class=\"btn-primary\" type=\"submit\" [disabled]=\"addUserControl.invalid\"\n      (click)=\"onSubmitUser(addUserControl.value)\" mat-dialog-close>\n      Share\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!-- Dialog template for manages users table -->\n<ng-template #manageAccessTemplate>\n  <h2 mat-dialog-title>Manage Access</h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <mat-form-field class=\"search-input\">\n      <mat-label>Search</mat-label>\n      <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Search\" #input />\n    </mat-form-field>\n    <!-- Progress Spinner -->\n    <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n    <table mat-table [dataSource]=\"userDataSource\" matSort matSortActive=\"createdAt\" matSortDirection=\"desc\"\n      matSortDisableClear>\n      <!-- Sr. No Column -->\n      <ng-container matColumnDef=\"srNo\">\n        <th mat-header-cell *matHeaderCellDef>Sr. No.</th>\n        <td mat-cell *matCellDef=\"let row; let i = index\">\n          {{ i + 1 }}\n        </td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"userId\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>User Id</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.sharedTo.email }}\n        </td>\n      </ng-container>\n\n      <!-- Actions Column -->\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef>Actions</th>\n        <td mat-cell *matCellDef=\"let row\">\n          <div class=\"action-buttons d-flex\">\n            <!-- Delete button -->\n            <button class=\"delete-button\" mat-icon-button (click)=\"deleteHandler(row, 'user')\">\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"userColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: userColumns\"></tr>\n\n      <!-- Row shown when there is no matching data. -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n          No data matching the filter \"{{ input.value }}\"\n        </td>\n        <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n      </tr>\n    </table>\n\n    <!-- Paginator -->\n    <!-- <mat-paginator #userPaginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator> -->\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button class=\"mt-4\" mat-stroked-button mat-dialog-close>Close</button>\n  </mat-dialog-actions>\n</ng-template>","import { ReportsService } from './../dashboard/reports/reports.service';\nimport { OutputService } from './output.service';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { takeUntil } from 'rxjs/operators';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { EdaReportComponent } from 'src/app/shared/components/eda-report/eda-report.component';\nimport { FormControl, Validators } from '@angular/forms';\nimport { EdaService } from '../eda/eda.service';\n\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-output',\n  templateUrl: './output.component.html',\n  styleUrls: ['./output.component.scss'],\n})\nexport class OutputComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  fileDataSource: MatTableDataSource<[]>;\n  userDataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild('reportPaginator') set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild('reportSort') set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n  @ViewChild('userPaginator') userPaginator: MatPaginator;\n  @ViewChild('userSort') userSort: MatSort;\n  @ViewChild('reportTemplate', { static: true }) template: TemplateRef<any>;\n\n  pageSizeOptions: Array<number> = [3, 5, 10, 15, 20];\n  pageSizeOptionsFile: Array<number> = [100, 150, 250, 500];\n  displayedColumns: Array<string> = [];\n  fileColumnsToDisplay: Array<string> = [];\n  userColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Form control */\n  addUserControl = new FormControl('', [Validators.required, Validators.email]);\n\n  dialogRef: MatDialogRef<any>;\n  showSpinner: boolean = false;\n  project: any;\n  user: string;\n  outputsArray: any;\n  outputExt: string;\n  selectedReportData: any;\n  imageData: SafeResourceUrl;\n  reportImage: any;\n  selectedOutput: any;\n  userArray: Array<any>;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dialog: MatDialog,\n    private _output: OutputService,\n    private _report: ReportsService,\n    private _sanitizer: DomSanitizer,\n    private _eda: EdaService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.displayedColumns = ['srNo', 'name', 'desc', 'fileName', 'createdAt', 'actions'];\n    this.userColumns = ['srNo', 'userId', 'actions'];\n  }\n\n  /**\n   * Initializes all the required data for this page\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.getReportsList();\n  }\n\n  /**\n   * Fetches all the output report list\n   */\n  getReportsList(): void {\n    this._output\n      .reportOutputList(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (res) {\n            this.outputsArray = res;\n            this.dataSource.data = res;\n            this.dataSource._updateChangeSubscription();\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this._toaster.error('Cannot fetch outputs list', 'Reports');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Reports');\n        }\n      );\n  }\n\n  /**\n   * Opens the report modal to preview the report\n   */\n  openReportModal(): void {\n    this._dialog\n      .open(this.template, {\n        minWidth: '50vw',\n      })\n      .afterOpened()\n      .subscribe((any) => {\n        this._spinner.stopSpinner();\n      });\n  }\n\n  /**\n   * Generates the data to be view\n   * @param reportData\n   */\n  handleReportPreview(reportData: any): any {\n    this._spinner.showSpinner();\n    let file = reportData.filename;\n    this.outputExt = file.substring(file.lastIndexOf('.') + 1);\n    if (reportData.outputType === 'EDA') {\n      let edaId = reportData.edaId;\n      this._eda\n        .getEdaData(edaId)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            let edaD = res;\n            reportData.currentEdaId = edaD._id;\n            reportData.currentPipelineFilename = edaD.tasks[0].currentPipelineFilename;\n            this.openEdaReport(reportData);\n          },\n          (err) => {\n            this._spinner.stopSpinner();\n            this._toaster.error('Server Error', 'EDA');\n          }\n        );\n    } else {\n      if (\n        this.outputExt === 'pdf' ||\n        this.outputExt === 'png' ||\n        this.outputExt === 'jpg' ||\n        this.outputExt === 'tiff'\n      ) {\n        this.openPreview(reportData);\n      } else if (\n        this.outputExt === 'csv' ||\n        this.outputExt === 'xls' ||\n        this.outputExt === 'xlsx'\n      ) {\n        this.openFilePreview(reportData);\n      }\n    }\n  }\n\n  /**\n   * If the report type is EDA, then preview the EDA report in modal\n   * @param reportData\n   */\n  openEdaReport(edaReportData: any): void {\n    /** Opens the eda report component modal to render report */\n    this._dialog\n      .open(EdaReportComponent, {\n        data: {\n          moduleName: 'reports',\n          edaReportData: edaReportData,\n        },\n      })\n      .afterOpened()\n      .subscribe((any) => {\n        this._spinner.stopSpinner();\n      });\n  }\n\n  /**\n   * Opens the preview for output of type pdf, jpg, png and tiff extenstion\n   * @param reportData\n   */\n  openPreview(reportData: any): void {\n    this.showSpinner = true;\n    this.getImageBase(reportData);\n    this.selectedReportData = reportData;\n    this.openReportModal();\n  }\n\n  /**\n   * Opens the preview for output of type csv, xls, or xlsx extenstion\n   * @param reportData\n   */\n  openFilePreview(reportData: any): void {\n    this.showSpinner = true;\n    this.selectedReportData = reportData;\n    this.openReportModal();\n    let finalData = {\n      isDataTypeRequired: true,\n      projectId: reportData.projectId,\n      filename: reportData.filename,\n      createdBy: reportData.createdBy,\n    };\n    this._report.getFilePreview(finalData, reportData.projectId, reportData._id).subscribe(\n      (res: any) => {\n        if (res) {\n          this.showSpinner = false;\n\n          /** Fetches the key from the reponse for displaying columns */\n          let head: Array<string> = Object.keys(res.preview[0]);\n          head.forEach((col) => {\n            this.fileColumnsToDisplay.push(col);\n          });\n\n          /** Assign the data to the data source for the table to render */\n          this.fileDataSource = new MatTableDataSource(res.preview);\n          this._spinner.stopSpinner();\n        } else {\n          this.showSpinner = false;\n          this._toaster.error('Cannot fetch the file preview details', 'Report');\n          this._spinner.stopSpinner();\n        }\n      },\n      (err: Error) => {\n        this.showSpinner = false;\n        this._spinner.stopSpinner();\n        this._toaster.error('Server Error', 'Report');\n      }\n    );\n  }\n\n  /**\n   * Fetches the base64 encode for type pdf, png, jpg and tiff\n   * @param reportData\n   */\n  getImageBase(reportData: any): void {\n    let finalData: Object = {\n      projectId: reportData.projectId,\n      filename: reportData.filename,\n      createdBy: reportData.createdBy,\n    };\n\n    this._report.getImageEncode(finalData, reportData.projectId).subscribe(\n      (res: any) => {\n        let base64: string;\n        let safeUrl: SafeResourceUrl;\n\n        switch (this.outputExt) {\n          case 'pdf':\n            base64 = `data:application/pdf;base64,${res.data}`;\n            safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(base64);\n            this.imageData = safeUrl;\n            break;\n          case 'png':\n            base64 = `data:image/png;base64,${res.data}`;\n            safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(base64);\n            this.reportImage = safeUrl;\n            break;\n          case 'jpg':\n            base64 = `data:image/jpg;base64,${res.data}`;\n            safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(base64);\n            this.reportImage = safeUrl;\n            break;\n          case 'tiff':\n            base64 = `data:image/tiff;base64,${res.data}`;\n            safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(base64);\n            this.reportImage = safeUrl;\n            break;\n        }\n\n        this.showSpinner = false;\n      },\n      (err: Error) => {\n        this.showSpinner = false;\n        this._toaster.error('Server Error', 'Report');\n      }\n    );\n  }\n\n  /**\n   * Handles the delete operation to delete output\n   * @param settingData\n   */\n  deleteHandler(outputData: any, type: string): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this file!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this.showSpinner = true;\n        type === 'file' ? this.deleteFile(outputData) : this.deleteUser(outputData);\n      }\n    });\n  }\n\n  /**\n   * Deletes the outout file from DB\n   * @param outputData\n   */\n  deleteFile(outputData: any): void {\n    this._output.deleteOutput(this.project._id, outputData._id).subscribe(\n      (res: any) => {\n        if (res) {\n          this.outputsArray = this.outputsArray.filter((item) => item._id !== outputData._id);\n          this.dataSource.data = this.outputsArray;\n          this.dataSource._updateChangeSubscription();\n          this._toaster.success(`${outputData.fileName} deleted successfully`, 'Reports');\n        } else {\n          this._toaster.error('Cannot delete the output', 'Reports');\n        }\n        this.showSpinner = false;\n      },\n      (err: Error) => {\n        this.showSpinner = false;\n        this._toaster.error('Server Error', 'Reports');\n      }\n    );\n  }\n\n  /**\n   * Deletes the outout file from DB\n   * @param outputData\n   */\n  deleteUser(outputData: any): void {\n    this._output.deleteUser(this.project._id, outputData._id).subscribe(\n      (res: any) => {\n        if (res) {\n          this.userArray = this.userArray.filter((item) => item._id !== outputData._id);\n          this.userDataSource.data = this.userArray;\n          this.userDataSource._updateChangeSubscription();\n          this._toaster.success(`${outputData.sharedTo.email} removed successfully`, 'Reports');\n        } else {\n          this._toaster.error('Cannot removed the user.', 'Reports');\n        }\n        this.showSpinner = false;\n      },\n      (err: Error) => {\n        this.showSpinner = false;\n        this._toaster.error('Server Error', 'Reports');\n      }\n    );\n  }\n\n  /**\n   * Calls when the new user is added to share with\n   * @param email\n   */\n  onSubmitUser(email: any): void {\n    let reqObj: any = {\n      _id: this.project._id,\n      testId: this.selectedOutput._id,\n      email: email,\n    };\n    this._output\n      .shareEmail(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this.addUserControl.reset();\n          this._toaster.success('Sharing user added successfully', 'Reports');\n        },\n        (err) => {\n          console.log(err);\n          this._spinner.stopSpinner();\n          this._toaster.error(err.error.message, 'Reports');\n        }\n      );\n  }\n\n  /**\n   * Opens the share with modal pop-up\n   * @param data\n   * @param addUserTemp\n   */\n  openAddUserModal(data: any, addUserTemp: TemplateRef<any>) {\n    this.selectedOutput = data;\n    this.dialogRef = this._dialog.open(addUserTemp, {\n      minWidth: '50vw',\n    });\n  }\n\n  /**\n   * Opens the dialog with shared users list\n   * @param data\n   * @param manageAccessTemp\n   */\n  manageUser(data: any, manageAccessTemp: TemplateRef<any>) {\n    let reqObj: any = {\n      _id: this.project._id,\n      outputId: data._id,\n    };\n    this._output\n      .getUsersList(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.dialogRef = this._dialog.open(manageAccessTemp, {\n              height: 'auto',\n              width: '50%',\n            });\n            this.userArray = res;\n            this.userDataSource.data = res;\n            this.userDataSource._updateChangeSubscription();\n            this.userDataSource.paginator = this.userPaginator;\n            this.userDataSource.sort = this.userSort;\n          } else {\n            this._toaster.error('Cannot fetch users list', 'Reports');\n          }\n        },\n        (err) => {\n          this._toaster.error(err.error.message, 'Reports');\n        }\n      );\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { SharedModule } from './../../shared/shared.module';\nimport { OutputComponent } from './output.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [OutputComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild([{\n      path: '', component: OutputComponent,\n    }]),\n  ]\n})\nexport class OutputModule { }\n"]}