{"version":3,"sources":["webpack:///node_modules/ngx-csv/ngx-csv.js","webpack:///src/assets/data/advance-algorithms.ts","webpack:///src/app/routes/models/forms-dialog-handler/forms-dialog-handler.component.html","webpack:///src/app/routes/models/forms-dialog-handler/forms-dialog-handler.component.ts","webpack:///src/app/routes/models/quick-prediction/quick-prediction.component.html","webpack:///src/app/routes/models/quick-prediction/quick-prediction.component.ts","webpack:///src/app/routes/models/pipeline/pipeline-expansion/pipeline-expansion.component.html","webpack:///src/app/routes/models/pipeline/pipeline-expansion/pipeline-expansion.component.ts","webpack:///src/app/routes/models/pipeline/pipeline.component.html","webpack:///src/app/routes/models/pipeline/pipeline.component.ts","webpack:///src/app/routes/models/expansion-graphs/expansion-graphs.component.html","webpack:///src/app/routes/models/expansion-graphs/expansion-graphs.component.ts","webpack:///src/app/routes/models/predictive-expansion/predictive-expansion.component.html","webpack:///src/app/routes/models/predictive-expansion/predictive-expansion.component.ts","webpack:///src/app/routes/models/timeseries-expansion/timeseries-expansion.component.html","webpack:///src/app/routes/models/timeseries-expansion/timeseries-expansion.component.ts","webpack:///src/app/routes/models/cluster-expansion/cluster-expansion.component.html","webpack:///src/app/routes/models/cluster-expansion/cluster-expansion.component.ts","webpack:///src/app/routes/models/models.component.html","webpack:///src/app/routes/models/models.component.ts","webpack:///src/app/routes/models/models.module.ts"],"names":["Object","defineProperty","exports","value","CsvConfigConsts","EOL","BOM","DEFAULT_FIELD_SEPARATOR","DEFAULT_DECIMAL_SEPARATOR","DEFAULT_QUOTE","DEFAULT_SHOW_TITLE","DEFAULT_TITLE","DEFAULT_FILENAME","DEFAULT_SHOW_LABELS","DEFAULT_USE_BOM","DEFAULT_HEADER","DEFAULT_NO_DOWNLOAD","DEFAULT_REMOVE_EMPTY_VALUES","ConfigDefaults","filename","fieldSeparator","quoteStrings","decimalseparator","showLabels","showTitle","title","useBom","headers","noDownload","removeEmptyValues","ngxCsv","DataJSON","options","this","csv","config","data","JSON","parse","_options","target","from","source","_i","arguments","length","symbols","to","toObject","s","key","hasOwnProperty","call","getOwnPropertySymbols","i","propIsEnumerable","generateCsv","prototype","getHeaders","getBody","blob","Blob","navigator","msSaveBlob","replace","encodeURI","link","document","createElement","href","URL","createObjectURL","setAttribute","download","body","appendChild","click","removeChild","console","log","_this","row","reduce","headerRow","header","slice","index","formartData","isFloat","toLocaleString","toString","indexOf","getCsv","input","isFinite","Boolean","propertyIsEnumerable","val","TypeError","ADV_ALGORITHMS_FORM_FIELDS","algoName","fields","type","name","label","required","gs_data","bo_data","validators","select_options","option_label","placeholder_text","isBOSupported","radio_btns","radio_label","FormsDialogHandlerComponent","swal","dialogData","_modelsDialogRef","_localStorage","_toaster","_data","_dataDrift","_spinner","_snackBar","_training","_utils","fb","unsubscribe$","Subject","hideMssqlSourceType","hidePgsqlSourceType","hideMysqlSourceType","hideSelectConnection","showDriftAnalysis","isImported","disableBO","appType","environment","allowedSettingsOption","retrainType","sourceType","backGround","foreGround","mergeDataset","dataSetsList","driftConfigList","dataConnectionsArray","hideSubmitBtn","isMultilabel","disableBagging","disableBoosting","disableRandomSearch","hptForm","group","ALGORITHMS_ARRAY","showSpinner","getAlgorithms","filter","item","status","user","getItem","project","modelInfo","training","trainingInfo","edaInfo","originalFileWithEdaDetails","setRestrictions","dialogHeading","initializeRetrainData","initializeTuningData","stopSpinner","dataSets","iteration","genModelName","models","modelMetaData","getAllProjectDatas","_id","pipe","takeUntil","toPromise","e","error","message","dataGroupId","filesList","fileSource","baseTrainingFile","find","originalFileId","retrainSourceType","selectedModelName","algoType","algorithm","split","retrainObj","algorithms","trainingId","modelId","projectId","modelTuning","modelFile","modelPath","sampling","useGPU","dataSetInfo","trainings","edaId","logTransformationColumns","scalarValue","getAllSettings","push","algo","timeseriesAlgo","modelTuningOption","algoSplit","algorithmName","includes","dynamicFormFieldsAdvAlgo","getAdvAlgoFormFields","hptPreference","charAt","toUpperCase","formFields","forEach","defaultFieldVal","dbFormVal","dynamicFormFields","getHptFormFields","map","filterFormFields","tuningOption","baggingBoosting","isError","open","horizontalPosition","verticalPosition","isGridSearchSupported","splitAlgo","obj","parseFloat","reqObj","pId","indepVariable","projectType","trainPipeFilePath","transformedDatasetPath","startModelTuning","subscribe","res","info","closeModal","err","fieldsArray","createFormAndAddValidation","selectedDataset","selectedConnection","getAllConnections","edaSummary","query","retrainingFileId","connectionSettings","connection","connectionName","database","databaseName","databaseConnectionId","dataConnId","selectedDataSet","retrainingDataFilename","fileSchema","startReTraining","modelErrorCount","stdThreshold","reportName","inputFeature","incomingFileId","driftConfig","incomingFilepath","incomingSchema","colName","dataType","startDriftAnalysis","advAlgoName","checkAdvTrainingAlreadyDone","a","dynamicFormAdvAlgoFields","formAdvAlgoFeilds","advAlgoReqObject","algoname","modelFilePath","hyperParams","selection","hyperParam","advAlgoSelected","tempObj","isFound","text","icon","className","advAlgoOptions","degree","startAdvTraining","found","model","toLowerCase","customValue","field","stringify","close","psFeatures","allowedFeaturesList","controls","control","validatorsToAdd","entries","min","Number","requiredTrue","email","minLength","maxLength","get","setValidators","pattern","updateValueAndValidity","String","nullValidator","max","addControl","next","unsubscribe","QuickPredictionComponent","_textAnalysis","_models","_socket","_snackbar","_window","_dialog","$win","$","window","predMode","toggleView","fileUploadControl","quickPredformData","taFeatureConfig","quickPredUIMetaData","predictionPreviewData","allowedModelOptions","fileEncoding","initQuickPredictionSocket","allowedPSFileUploadSize","graphSupported","isDeleted","initializeQuickPrediction","originalFileDetails","getMyFileData","currentModelMeta","taExperimentId","taExperiment","getTaExperiment","dataset","selectedModel","predictionResult","mode","notebookInputFileName","notebookInputFileDetails","getQuickPredictionFormData","modelToPredict","qpFormData","qpData","notebookInputFileId","depVariable","itemExist","fileToUpload","modelName","scalerObj","reTrainFileId","predictionUploadResult","fileUploadPrediction","projectDetails","predictionFile","performPrediction","show","keys","predictionData","doPrediction","dataId","experimentId","minWidth","maxWidth","rowId","afterClosed","arrayData","some","inputFile","ext","pop","size","serverBaseUrl","event","api","setDomLayout","gridApi","refreshCells","force","setColumnDefs","gridOptions","columnDefs","setRowData","rowData","listen","predictionFileMetaData","generatePreviewTable","firstRecord","headerName","headerHeight","defaultColDef","resizable","success","removeListener","Window","onChangeDataset","selectPredMode","PipelineExpansionComponent","taskData","columnList","method","shape","selectedTask","pipelineDetails","Array","isArray","PipelineComponent","pipelineTask","timelineAlt","showPipelineDetails","element","taskName","parent","afOperation","afOperations","transformer","j","step","metaInfo","fileName","indexPath","samplingType","samplingPercentage","operation","predictiveModelingInfo","clusteringInfo","getPipelineDetails","resp","ExpansionGraphsComponent","dev","activeTabName","modelData","holdout","scoringMetrics","tab","PredictiveExpansionComponent","_colors","updateTrainingModels","pieOptions1","animate","duration","enabled","barColor","byName","trackColor","scaleColor","lineWidth","lineCap","showGraphs","regressionMetrics","classificationMetrics","validationStrategy","technique","nSplit","badgeText","Name","graphListSupported","initCvSocket","metrics","metric","cvData","metricdata","string","getAlgorithmSupported","performHoldOut","emit","runCv","performScoring","textLabel","respData","showGraphsSection","TimeseriesExpansionComponent","Plotly","_eda","showTextError","selectedTimeseriesGroup","selectedTimeseriesGroupForecast","losses","csvData","colNameOtherThanX","isMultipleTimeseries","getTimeseriesGroup","startDate","Date","now","toISOString","endDate","uniqueForecastDiv","uniqueEvaluateDiv","timeseriesGoupList","allowedGroupList","frequency","resampling","resamplingMethod","descriptiveStatistics","timeseriesInfo","datetimeIndex","calculateFrequency","parentPipelineFilename","tasks","currentPipelineFilename","timeseriesIds","nSteps","evaluateGraph","graphDiv","getElementById","deleteTraces","graphContent","layout","xaxis","linecolor","yaxis","plot","preprocessedFilepath","moment","format","forecastModelPath","getForecastGraph","template","xanchor","y","x","yanchor","gridcolor","zerolinecolor","showgrid","prepareGraphData","graphData","transposedData","colNames","d","xdataForCsv","ydataForCsv","sort","Set","forecast","k","sDate","eDate","isAfter","afterDismissed","date","setDate","getDate","evaluateForecast","getForecast","$event","blur","ClusterExpansionComponent","_sanitizer","_changeDetectorRef","dataSource","featuresArray","viewScatterPlot","editMode","selectedFeature","clusteringFeatures","showUpdateButton","viewType","cardColor","hideHeatMap","hideSummary","settingActive","featureList","selectedCluster","checkIsNumber","paginator","analysisInfo","detectChanges","obs","connect","clusteringGraphType","featureImp","uniqueGraphDiv","heatMapDiv","clusterErrorType","indepVar","plotHeatMap","plotDecisionTreePlot","plotFeatureImp","dataItem","purge","X","Y","sortArryOFObjects","featureImportance","importance","orientation","autosize","automargin","showSnackBar","analysisObj","clusterId","clusterName","tempFeature","selectedFeatures","trainPipeFileName","rootFileName","graphType","visualiseGraph","newPlot","openEdaReport","updateModel","analysisMap","clusterHeatMap","clusterStats","clusterDecisionTree","treeModelOutput","decisionTreeImage","bypassSecurityTrustResourceUrl","editedItem","test","isNaN","clusterTemplate","Data","dialogRef","width","edaReportData","moduleName","maxHeight","afterOpened","any","button","snackBarRef","items","b","disconnect","stopPropagation","ModelsComponent","ModelsModule","_router","selectedTrainingControl","values","filterSortOrder","color","downloadToolkitDiameter","psType","downloadFile","deployPsType","hostlist","showTrainingSpinner","erroCount","totalAlgos","trainingList","filtersArray","forcastHtmlData","isMulticlass","isAdvanceAlgoSupport","initTrainingSocket","initDataDriftSocket","initCpuLoadSocket","getTrainingsList","getTrainingList","previousTraining","setValue","setFilterList","showSelectedTrainingModels","createdAt","sortAndRankModels","problemType","genClusteringFeatures","classNames","supportedGraphList","selectedTraining","getModelsList","getOriginalFileDetails","getNotebookInputFileDetails","fileWithEda","getChildDataSets","rejectedGroupList","getTimeseriesList","isAdvanceAlgoSupported","trainingData","decomposition","components","numericFeatures","uploadScoringUrl","initModels","modelSupported","aa","pilot","bb","overallScore","scoringDataTemplate","uploadScoringData","buttons","cancel","visible","confirm","then","isConfirm","deleteTraining","deleteModel","openFormDialog","deployModelTemplate","platform","selectedHost","listHost","deployPsTypeflag","deployFileId","deployObj","findAlgoType","fileId","notebooks","deployReqObj","Host","rejectedGroupTemplate","resDeployfile","deployModelService","modelDeployed","deployModelPost","preDeployModel","getHostList","list","downloadPsType","downloadFileId","downloadAlgoType","downloadNotebooks","downloadNotebookInputFileId","downloadTraining","downloadModelInfo","downloadPlatform","downloadProject","downloadModelFile","getAllChildDatasets","selectedTrainingId","sortedModel","autoGenerationData","getPipelineTask","description","preview","task","dataCollection","eda","pipelineTasks","tempAFoperations","autoFGenOp","pipelineData","fill","order","id","queryForUrl","url","trainingType","navigateByUrl","cpuLoad","withComponents","forChild","path","component"],"mappings":"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","file":"x","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CsvConfigConsts = (function () {\r\n    function CsvConfigConsts() {\r\n    }\r\n    CsvConfigConsts.EOL = \"\\r\\n\";\r\n    CsvConfigConsts.BOM = \"\\ufeff\";\r\n    CsvConfigConsts.DEFAULT_FIELD_SEPARATOR = ',';\r\n    CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR = '.';\r\n    CsvConfigConsts.DEFAULT_QUOTE = '\"';\r\n    CsvConfigConsts.DEFAULT_SHOW_TITLE = false;\r\n    CsvConfigConsts.DEFAULT_TITLE = 'My Report';\r\n    CsvConfigConsts.DEFAULT_FILENAME = 'mycsv.csv';\r\n    CsvConfigConsts.DEFAULT_SHOW_LABELS = false;\r\n    CsvConfigConsts.DEFAULT_USE_BOM = true;\r\n    CsvConfigConsts.DEFAULT_HEADER = [];\r\n    CsvConfigConsts.DEFAULT_NO_DOWNLOAD = false;\r\n    CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES = false;\r\n    return CsvConfigConsts;\r\n}());\r\nexports.CsvConfigConsts = CsvConfigConsts;\r\nexports.ConfigDefaults = {\r\n    filename: CsvConfigConsts.DEFAULT_FILENAME,\r\n    fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,\r\n    quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,\r\n    decimalseparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,\r\n    showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,\r\n    showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,\r\n    title: CsvConfigConsts.DEFAULT_TITLE,\r\n    useBom: CsvConfigConsts.DEFAULT_USE_BOM,\r\n    headers: CsvConfigConsts.DEFAULT_HEADER,\r\n    noDownload: CsvConfigConsts.DEFAULT_NO_DOWNLOAD,\r\n    removeEmptyValues: CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES\r\n};\r\nvar ngxCsv = (function () {\r\n    function ngxCsv(DataJSON, filename, options) {\r\n        this.csv = \"\";\r\n        var config = options || {};\r\n        this.data = typeof DataJSON != 'object' ? JSON.parse(DataJSON) : DataJSON;\r\n        this._options = objectAssign({}, exports.ConfigDefaults, config);\r\n        if (this._options.filename) {\r\n            this._options.filename = filename;\r\n        }\r\n        this.generateCsv();\r\n    }\r\n    /**\r\n     * Generate and Download Csv\r\n     */\r\n    ngxCsv.prototype.generateCsv = function () {\r\n        if (this._options.useBom) {\r\n            this.csv += CsvConfigConsts.BOM;\r\n        }\r\n        if (this._options.showTitle) {\r\n            this.csv += this._options.title + '\\r\\n\\n';\r\n        }\r\n        this.getHeaders();\r\n        this.getBody();\r\n        if (this.csv == '') {\r\n            console.log(\"Invalid data\");\r\n            return;\r\n        }\r\n        if (this._options.noDownload) {\r\n            return this.csv;\r\n        }\r\n        var blob = new Blob([this.csv], { \"type\": \"text/csv;charset=utf8;\" });\r\n        if (navigator.msSaveBlob) {\r\n            var filename = this._options.filename.replace(/ /g, \"_\") + \".csv\";\r\n            navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            var uri = 'data:attachment/csv;charset=utf-8,' + encodeURI(this.csv);\r\n            var link = document.createElement(\"a\");\r\n            link.href = URL.createObjectURL(blob);\r\n            link.setAttribute('visibility', 'hidden');\r\n            link.download = this._options.filename.replace(/ /g, \"_\") + \".csv\";\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    };\r\n    /**\r\n     * Create Headers\r\n     */\r\n    ngxCsv.prototype.getHeaders = function () {\r\n        var _this = this;\r\n        if (this._options.headers.length > 0) {\r\n            var headers = this._options.headers;\r\n            var row = headers.reduce(function (headerRow, header) {\r\n                return headerRow + header + _this._options.fieldSeparator;\r\n            }, '');\r\n            row = row.slice(0, -1);\r\n            this.csv += row + CsvConfigConsts.EOL;\r\n        }\r\n    };\r\n    /**\r\n     * Create Body\r\n     */\r\n    ngxCsv.prototype.getBody = function () {\r\n        for (var i = 0; i < this.data.length; i++) {\r\n            var row = \"\";\r\n            for (var index in this.data[i]) {\r\n                row += this.formartData(this.data[i][index]) + this._options.fieldSeparator;\r\n            }\r\n            row = row.slice(0, -1);\r\n            this.csv += row + CsvConfigConsts.EOL;\r\n        }\r\n    };\r\n    /**\r\n     * Format Data\r\n     * @param {any} data\r\n     */\r\n    ngxCsv.prototype.formartData = function (data) {\r\n        if (this._options.removeEmptyValues && !data) {\r\n            return \"\";\r\n        }\r\n        if (this._options.decimalseparator === 'locale' && ngxCsv.isFloat(data)) {\r\n            return data.toLocaleString();\r\n        }\r\n        if (this._options.decimalseparator !== '.' && ngxCsv.isFloat(data)) {\r\n            return data.toString().replace('.', this._options.decimalseparator);\r\n        }\r\n        if (typeof data === 'string') {\r\n            data = data.replace(/\"/g, '\"\"');\r\n            if (this._options.quoteStrings || data.indexOf(',') > -1 || data.indexOf('\\n') > -1 || data.indexOf('\\r') > -1) {\r\n                data = this._options.quoteStrings + data + this._options.quoteStrings;\r\n            }\r\n            return data;\r\n        }\r\n        if (typeof data === 'boolean') {\r\n            return data ? 'TRUE' : 'FALSE';\r\n        }\r\n        return data;\r\n    };\r\n    /**\r\n     * Get CSV String\r\n     */\r\n    ngxCsv.prototype.getCsv = function () {\r\n        return this.csv;\r\n    };\r\n    /**\r\n     * Check if is Float\r\n     * @param {any} input\r\n     */\r\n    ngxCsv.isFloat = function (input) {\r\n        return +input === input && (!isFinite(input) || Boolean(input % 1));\r\n    };\r\n    return ngxCsv;\r\n}());\r\nexports.ngxCsv = ngxCsv;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n/**\r\n * Convet to Object\r\n * @param {any} val\r\n */\r\nfunction toObject(val) {\r\n    if (val === null || val === undefined) {\r\n        throw new TypeError('Object.assign cannot be called with null or undefined');\r\n    }\r\n    return Object(val);\r\n}\r\n/**\r\n * Assign data  to new Object\r\n * @param {any}   target\r\n * @param {any[]} ...source\r\n */\r\nfunction objectAssign(target) {\r\n    var source = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        source[_i - 1] = arguments[_i];\r\n    }\r\n    var from;\r\n    var to = toObject(target);\r\n    var symbols;\r\n    for (var s = 1; s < arguments.length; s++) {\r\n        from = Object(arguments[s]);\r\n        for (var key in from) {\r\n            if (hasOwnProperty.call(from, key)) {\r\n                to[key] = from[key];\r\n            }\r\n        }\r\n        if (Object.getOwnPropertySymbols) {\r\n            symbols = Object.getOwnPropertySymbols(from);\r\n            for (var i = 0; i < symbols.length; i++) {\r\n                if (propIsEnumerable.call(from, symbols[i])) {\r\n                    to[symbols[i]] = from[symbols[i]];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return to;\r\n}\r\n//# sourceMappingURL=ngx-csv.js.map","export const ADV_ALGORITHMS_FORM_FIELDS: Array<any> = [\n  {\n    algoName: 'Boosting-Regression',\n    fields: [\n      {\n        type: 'number',\n        name: 'n_estimators',\n        label: 'n_estimators',\n        required: false,\n        data: 50,\n        gs_data: '50,100,500',\n        bo_data: '50,500',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'number',\n        name: 'learning_rate',\n        label: 'learning_rate',\n        required: false,\n        data: 1.0,\n        gs_data: '0.01, 0.1,1.0',\n        bo_data: '0.01,1.0',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'select',\n        name: 'loss',\n        label: 'loss',\n        required: true,\n        data: 'linear',\n        gs_data: ['linear', 'square', 'exponential'],\n        select_options: [\n          { option_label: 'linear', value: 'linear' },\n          { option_label: 'square', value: 'square' },\n          { option_label: 'exponential', value: 'exponential' },\n        ],\n        placeholder_text: 'Select loss',\n        validators: {\n          \"required\": true\n        }\n      },\n    ],\n    isBOSupported: true,\n  },\n  {\n    algoName: 'Boosting-Classification',\n    fields: [\n      {\n        type: 'number',\n        name: 'n_estimators',\n        label: 'n_estimators',\n        required: false,\n        data: 50,\n        gs_data: '50,100,500',\n        bo_data: '50,500',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'number',\n        name: 'learning_rate',\n        label: 'learning_rate',\n        required: false,\n        data: 1.0,\n        gs_data: '0.01, 0.1,1.0',\n        bo_data: '0.01,1.0',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'select',\n        name: 'algorithm',\n        label: 'algorithm',\n        required: true,\n        data: 'SAMME.R',\n        gs_data: ['SAMME.R'],\n        select_options: [\n          { option_label: 'SAMME.R', value: 'SAMME.R' },\n          { option_label: 'SAMME', value: 'SAMME' },\n        ],\n        placeholder_text: 'Select loss',\n        validators: {\n          \"required\": true\n        }\n      },\n    ],\n    isBOSupported: true,\n  },\n  {\n    algoName: 'Bagging-Regression',\n    fields: [\n      {\n        type: 'number',\n        name: 'n_estimators',\n        label: 'n_estimators',\n        required: false,\n        data: 10,\n        gs_data: '10,50,100',\n        bo_data: '10,100',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'number',\n        name: 'max_samples',\n        label: 'max_samples',\n        required: false,\n        data: 1.0,\n        gs_data: '0.5,0.7,1.0',\n        bo_data: '0.5,1.0',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'number',\n        name: 'max_features',\n        label: 'max_features',\n        required: false,\n        data: 1.0,\n        gs_data: '0.5,0.7,1.0',\n        bo_data: '0.5,1.0',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'bootstrap',\n        label: 'bootstrap',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'bootstrap_features',\n        label: 'bootstrap_features',\n        required: false,\n        data: false,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'oob_score',\n        label: 'oob_score',\n        required: false,\n        data: false,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n    ],\n    isBOSupported: true,\n  },\n  {\n    algoName: 'Bagging-Classification',\n    fields: [\n      {\n        type: 'number',\n        name: 'n_estimators',\n        label: 'n_estimators',\n        required: false,\n        data: 10,\n        gs_data: '10,50,100',\n        bo_data: '10,100',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'number',\n        name: 'max_samples',\n        label: 'max_samples',\n        required: false,\n        data: 1.0,\n        gs_data: '0.5,0.7,1.0',\n        bo_data: '0.5,1.0',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'number',\n        name: 'max_features',\n        label: 'max_features',\n        required: false,\n        data: 1.0,\n        gs_data: '0.5,0.7,1.0',\n        bo_data: '0.5,1.0',\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'bootstrap',\n        label: 'bootstrap',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'bootstrap_features',\n        label: 'bootstrap_features',\n        required: false,\n        data: false,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'oob_score',\n        label: 'oob_score',\n        required: false,\n        data: false,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n    ],\n    isBOSupported: true,\n  },\n  {\n    algoName: 'GridSearchCV-Regression',\n    fields: [\n      {\n        type: 'select',\n        name: 'scoring',\n        label: 'scoring',\n        required: true,\n        data: 'None',\n        gs_data: [\n          'explained_variance',\n          'neg_mean_absolute_error',\n          'neg_mean_squared_error',\n          'neg_mean_squared_log_error',\n          'neg_median_absolute_error',\n        ],\n        select_options: [\n          { option_label: 'explained_variance', value: 'explained_variance' },\n          { option_label: 'None', value: 'None' },\n          { option_label: 'neg_mean_absolute_error', value: 'neg_mean_absolute_error' },\n          { option_label: 'neg_mean_squared_error', value: 'neg_mean_squared_error' },\n          { option_label: 'neg_mean_squared_log_error', value: 'neg_mean_squared_log_error' },\n          { option_label: 'neg_median_absolute_error', value: 'neg_median_absolute_error' },\n          { option_label: 'r2', value: 'r2' },\n        ],\n        placeholder_text: 'Select loss',\n        validators: {\n          \"required\": true\n        }\n      },\n      { type: 'text', name: 'fit_params', label: 'fit_params', required: false, data: 'None',validators: {\n        \"required\": true\n      } },\n      {\n        type: 'radio',\n        name: 'iid',\n        label: 'iid',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'refit',\n        label: 'refit',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'text',\n        name: 'error_score',\n        label: 'error_score',\n        required: false,\n        data: 'raise-deprecating',\n        validators: {\n          \"required\": true\n        }\n      },\n      { type: 'number', name: 'verbose', label: 'verbose', required: false, data: 0,validators: {\n        \"required\": true\n      } },\n      {\n        type: 'radio',\n        name: 'return_train_score',\n        label: 'return_train_score',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n    ],\n    isBOSupported: true,\n  },\n  {\n    algoName: 'GridSearchCV-Classification',\n    fields: [\n      {\n        type: 'select',\n        name: 'scoring',\n        label: 'scoring',\n        required: true,\n        data: 'None',\n        gs_data: ['None', 'accuracy', 'f1', 'precision', 'recall'],\n        select_options: [\n          { option_label: 'None', value: 'None' },\n          { option_label: 'accuracy', value: 'accuracy' },\n          { option_label: 'f1', value: 'f1' },\n          { option_label: 'precision', value: 'precision' },\n          { option_label: 'recall', value: 'recall' },\n        ],\n        placeholder_text: 'Select loss',\n        validators: {\n          \"required\": true\n        }\n      },\n      { type: 'text', name: 'fit_params', label: 'fit_params', required: false, data: 'None' },\n      {\n        type: 'radio',\n        name: 'iid',\n        label: 'iid',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'radio',\n        name: 'refit',\n        label: 'refit',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n      {\n        type: 'text',\n        name: 'error_score',\n        label: 'error_score',\n        required: false,\n        data: 'raise-deprecating',\n        validators: {\n          \"required\": true\n        }\n      },\n      { type: 'number', name: 'verbose', label: 'verbose', required: false, data: 0,validators: {\n        \"required\": true\n      } },\n      {\n        type: 'radio',\n        name: 'return_train_score',\n        label: 'return_train_score',\n        required: false,\n        data: true,\n        radio_btns: [\n          { radio_label: 'true', value: true },\n          { radio_label: 'false', value: false },\n        ],\n        validators: {\n          \"required\": true\n        }\n      },\n    ],\n    isBOSupported: true,\n  },\n];\n","<h2 mat-dialog-title>\n  {{ dialogHeading }}\n</h2>\n<!-- BODY (RETRAIN) -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'retrain'\" class=\"mat-typography\">\n  <!-- RADIO (retrain type) -->\n  <div *ngIf=\"!project?.useGPU\" class=\"row\">\n    <div class=\"col-md-12 form-group\">\n      <mat-label id=\"retrain-type\">Select retrain type</mat-label>\n      <mat-radio-group aria-labelledby=\"retrain-type\" id=\"retrain-type\" class=\"radio-group flex-row\"\n        [(ngModel)]=\"retrainType\" (change)=\"changeRetrainType(retrainType)\">\n        <mat-radio-button class=\"ml-3\" value=\"refit\">Fitting data using pipeline</mat-radio-button>\n        <mat-radio-button class=\"ml-3\" value=\"transform\">Transforming data using pipeline</mat-radio-button>\n      </mat-radio-group>\n    </div>\n  </div>\n  <!-- RADIO (data source) -->\n  <div *ngIf=\"!project?.useGPU\" class=\"row\">\n    <div class=\"col-md-12 form-group\">\n      <mat-label id=\"retrain-type\">Select data source</mat-label>\n      <mat-radio-group aria-labelledby=\"retrain-type\" id=\"retrain-type\" class=\"radio-group flex-row\"\n        [(ngModel)]=\"sourceType\" (change)=\"changeSourceType(sourceType)\">\n        <mat-radio-button class=\"ml-3\" value=\"file\">File</mat-radio-button>\n        <span [hidden]=\"\n            retrainType === 'transform' &&\n            baseTrainingFile?.fileSource !== 'mssql' &&\n            baseTrainingFile?.fileSource !== 'postgresql' &&\n            baseTrainingFile?.fileSource !== 'mysql'\n          \">\n          <mat-radio-button [hidden]=\"hideMssqlSourceType\" class=\"ml-3\" value=\"mssql\">MS SQL</mat-radio-button>\n          <mat-radio-button [hidden]=\"hideMysqlSourceType\" class=\"ml-3\" value=\"mysql\">MySQL</mat-radio-button>\n          <mat-radio-button [hidden]=\"hidePgsqlSourceType\" class=\"ml-3\" value=\"postgresql\">PostgreSQL</mat-radio-button>\n        </span>\n      </mat-radio-group>\n    </div>\n  </div>\n  <!-- SELECT (dataset) -->\n  <div *ngIf=\"sourceType === 'file'\" class=\"row\">\n    <div class=\"col-md-12 form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select dataset</mat-label>\n        <mat-select [(ngModel)]=\"selectedDataset\" (selectionChange)=\"hideSubmitBtn = false\" required #dataset=\"ngModel\">\n          <mat-option *ngFor=\"let dataset of dataSetsList\" [value]=\"dataset._id\">{{ dataset.name | dropFileExtension:\n            dataset.name }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"dataset.invalid || dataset.touched\">Dataset is required.</mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- SELECT (data connection) -->\n  <div *ngIf=\"\n      retrainType === 'refit' &&\n      (sourceType === 'mssql' ||\n        sourceType === 'mysql' ||\n        sourceType === 'postgresql')\n    \" [hidden]=\"hideSelectConnection\" class=\"row\">\n    <div class=\"col-md-12 form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select data connection</mat-label>\n        <mat-select [(ngModel)]=\"selectedConnection\" (selectionChange)=\"hideSubmitBtn = false\" required\n          #dataconnection=\"ngModel\">\n          <mat-option *ngFor=\"let conn of dataConnectionsArray\" [value]=\"conn\">{{ conn.connectionName }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"dataconnection.invalid || dataconnection.touched\">Data connection is required.</mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- INPUT (query) -->\n  <div *ngIf=\"\n      retrainType !== 'transform' &&\n      (baseTrainingFile?.fileSource !== 'mssql' ||\n        baseTrainingFile?.fileSource !== 'postgresql' ||\n        baseTrainingFile?.fileSource !== 'mysql') &&\n      (sourceType === 'mssql' ||\n        sourceType === 'mysql' ||\n        sourceType === 'postgresql')\n    \" [hidden]=\"\n      retrainType === 'transform' &&\n      (baseTrainingFile?.fileSource === 'mssql' ||\n        baseTrainingFile?.fileSource === 'postgresql' ||\n        baseTrainingFile?.fileSource === 'mysql') &&\n      (sourceType === 'mssql' ||\n        sourceType === 'mysql' ||\n        sourceType === 'postgresql')\n    \" class=\"row\">\n    <div class=\"col-md-12\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Write SQL query</mat-label>\n        <textarea [(ngModel)]=\"query\" matInput placeholder=\"Enter SELECT query\"></textarea>\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- CHECKBOX (merge) -->\n  <mat-checkbox class=\"\" [(ngModel)]=\"mergeDataset\">Merge dataset</mat-checkbox>\n  <!-- HYPERLINK (drift analysis) -->\n  <p class=\"my-3\">\n    <a href=\"#\" (click)=\"showDriftAnalysis = !showDriftAnalysis\">Drift Analysis?</a>\n  </p>\n  <!-- INPUT (report name) -->\n  <div *ngIf=\"showDriftAnalysis\" class=\"row\">\n    <div class=\"col-md-12\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Drift report name</mat-label>\n        <input matInput placeholder=\"Enter the name\" [(ngModel)]=\"reportName\" />\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- SELECT (drift config) -->\n  <div *ngIf=\"showDriftAnalysis\" class=\"row\">\n    <div class=\"col-md-12 form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select drift configuration</mat-label>\n        <mat-select [(ngModel)]=\"driftConfig\" required #driftconfig=\"ngModel\">\n          <mat-option *ngFor=\"let config of driftConfigList\" [value]=\"config\">{{\n            config.configName\n            }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"driftconfig.invalid || driftconfig.touched\">Drift configuration is required.</mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n</mat-dialog-content>\n\n<!-- BODY (MODEL TUNING) -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'tuning'\" class=\"mat-typography\">\n  <!-- CHIP (model name) -->\n  <mat-chip-list>\n    <mat-chip>{{ modelInfo?.modelMetaData?.algoName }}</mat-chip>\n  </mat-chip-list>\n  <!-- RADIO (HPT options) -->\n  <div class=\"row mt-4\">\n    <div class=\"col-md-12 form-group\">\n      <mat-label id=\"retrain-type\">Select model tuning method</mat-label>\n      <mat-radio-group aria-labelledby=\"retrain-type\" id=\"retrain-type\" class=\"radio-group flex-row\"\n        [(ngModel)]=\"modelTuningOption\" (change)=\"onTuningOptionChanged('secondTime')\">\n        <!-- 'secondTime' this is the label for checking if the user visits parameter tuning for the first time or for secondTime. -->\n        <mat-radio-button class=\"ml-3\" value=\"hpt\">Parameter Tuning</mat-radio-button>\n        <mat-radio-button class=\"ml-3\" value=\"gridSearch\" *ngIf=\"!disableRandomSearch\">\n          Random Search</mat-radio-button>\n        <mat-radio-button [hidden]=\"disableBO && isImported\" class=\"ml-3\" [disabled]=\"\n              appType === 'saas' &&\n              !user?.roles?.includes('super_admin') &&\n              !user?.roles?.includes('admin')\n            \" value=\"bayesianOptimization\" *ngIf=\"isMultilabel == false\">\n          <span matBadge [matBadgeIcon]=\"'ENT'\" matBadgeOverlap=\"false\">Bayesian Optimization</span>\n        </mat-radio-button>\n      </mat-radio-group>\n    </div>\n  </div>\n  <!-- LABEL (not supported) \n    [isGridSearchSupported] this key is added only for the linear regression. -->\n  <h4 *ngIf=\"\n      (modelInfo?.modelMetaData?.algoName === 'Gaussian NB Classification' ||\n        modelInfo?.modelMetaData?.algoName === 'Linear Regression') &&\n      modelTuningOption === 'gridSearch' &&\n      !formFields?.isGridSearchSupported\n    \" class=\"text-center text-muted\">\n    Random Search is not supported for this model.\n  </h4>\n  <!-- LABEL (not supported) -->\n  <h4 *ngIf=\"\n      modelTuningOption === 'bayesianOptimization' && !formFields?.isBOSupported\n    \" class=\"text-center text-muted\">\n    Bayesian Optimization is not supported for this model.\n  </h4>\n  <div [hidden]=\"\n      modelTuningOption === 'bayesianOptimization' && !formFields?.isBOSupported\n    \">\n    <!-- TABLE -->\n    <table *ngIf=\"\n        modelInfo?.modelMetaData?.bestParams[modelTuningOption] &&\n        modelInfo?.modelMetaData?.bestParams[modelTuningOption].length\n      \" class=\"table table-bordered mx-auto w-75 mt-2\">\n      <caption>\n        {{\n        modelTuningOption === \"hpt\" ? \"Params\" : \"Best params\"\n        }}\n        used in last model tuning\n      </caption>\n      <thead class=\"thead-dark bg-primary\">\n        <tr>\n          <td>Parameter</td>\n          <td>Value</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"\n            let param of modelInfo?.modelMetaData?.bestParams[modelTuningOption]\n          \">\n          <td>{{ param.name }}</td>\n          <td>{{ param.data === null || param.data === undefined ? 'None' : param.data }}</td>\n        </tr>\n      </tbody>\n    </table>\n    <!-- DYNAMIC FORM -->\n    <div [hidden]=\"\n        ((modelInfo?.modelMetaData?.algoName === 'Gaussian NB Classification' ||\n          modelInfo?.modelMetaData?.algoName === 'Linear Regression') &&\n          modelTuningOption === 'gridSearch' &&\n          !formFields.isGridSearchSupported) ||\n        (modelTuningOption === 'bayesianOptimization' &&\n          !formFields.isBOSupported)\n      \" class=\"row mt-4\" [formGroup]=\"hptForm\">\n      <br />\n      <div *ngFor=\"let field of formFields?.fields\" class=\"col-md-6\">\n        <!-- HPT -->\n        <div *ngIf=\"modelTuningOption === 'hpt'\">\n          <!-- NUMBER & TEXT-->\n          <mat-form-field *ngIf=\"field?.type === 'number' || field?.type === 'text'\" appearance=\"outline\">\n            <mat-label>{{ field?.label }}</mat-label>\n            <input matInput [type]=\"field?.type\" [placeholder]=\"field?.placeholder_text\" [name]=\"field.name\"\n              [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\" />\n          </mat-form-field>\n          <!-- SELECT -->\n          <mat-form-field *ngIf=\"field?.type === 'select'\" appearance=\"outline\">\n            <mat-label>{{\n              field.placeholder_text ? field.placeholder_text : field.name\n              }}</mat-label>\n            <mat-select [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\">\n              <mat-option *ngFor=\"let opt of field.select_options\" [value]=\"opt.value\">{{ opt.option_label }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <!-- dynamic errors based on the errs returned by the formcontrols. -->\n          <!-- hptForm.invalid && (hptForm.dirty || hptForm.touched) -->\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.required\">\n            This field is required.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.minLength\">\n            No of characters are less than minimum length.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.min\">\n            Value is less than minimum.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.max\">\n            Value is greater than maximum.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.maxLength\">\n            No of characters are more than maximum length.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.pattern\">\n            Value type is not proper.\n          </mat-error>\n        </div>\n        <!-- GRID SEARCH -->\n        <div *ngIf=\"modelTuningOption === 'gridSearch'\">\n          <!-- NUMBER & TEXT-->\n          <mat-form-field [hidden]=\"\n              field.disable &&\n              (formFields.algoName ===\n                'Artificial Neural Network Classification' ||\n                formFields.algoName === 'Artificial Neural Network Regression')\n            \" *ngIf=\"field?.type === 'number' || field?.type === 'text'\" appearance=\"outline\">\n            <mat-label>{{ field.label }}</mat-label>\n            <input matInput type=\"text\" [placeholder]=\"field.placeholder_text\" [name]=\"field.name\"\n              [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\" />\n            <!-- (input)=\"bindGridSearch($event.target.value, field)\" -->\n          </mat-form-field>\n          <!-- SELECT -->\n          <mat-form-field *ngIf=\"field?.type === 'select'\" appearance=\"outline\">\n            <mat-label>{{\n              field.placeholder_text ? field.placeholder_text : field.name\n              }}</mat-label>\n            <mat-select (change)=\"bindGridSearch($event.value, field)\" [(ngModel)]=\"field.data\"\n              [formControlName]=\"field?.name\" multiple>\n              <mat-option *ngFor=\"let opt of field.select_options\" [value]=\"opt.value\">{{ opt.option_label }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <!-- dynamic errors based on the errs returned by the formcontrols. -->\n          <!-- hptForm.invalid && (hptForm.dirty || hptForm.touched) -->\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.required\">\n            This field is required.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.minLength\">\n            No of characters are less than minimum length.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.min\">\n            Value is less than minimum.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.max\">\n            Value is greater than maximum.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.maxLength\">\n            No of characters are more than maximum length.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.pattern\">\n            Value type is not proper.\n          </mat-error>\n        </div>\n        <!-- BAYESIAN OPT -->\n        <div *ngIf=\"modelTuningOption === 'bayesianOptimization' && field.bo_data\">\n          <mat-form-field [hidden]=\"\n              field.disable &&\n              (formFields.algoName ===\n                'Artificial Neural Network Classification' ||\n                formFields.algoName === 'Artificial Neural Network Regression')\n            \" appearance=\"outline\">\n            <mat-label>{{ field.label }}</mat-label>\n            <input matInput type=\"text\" [placeholder]=\"field.placeholder_text\" [name]=\"field.name\"\n              [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\" />\n            <!-- (input)=\"bindBayesianOpt($event.target.value, field)\"  -->\n          </mat-form-field>\n          <!-- dynamic errors based on the errs returned by the formcontrols. -->\n          <!-- hptForm.invalid && (hptForm.dirty || hptForm.touched) -->\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.required\">\n            This field is required.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.minLength\">\n            No of characters are less than minimum length.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.min\">\n            Value is less than minimum.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.max\">\n            Value is greater than maximum.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.maxLength\">\n            No of characters are more than maximum length.\n          </mat-error>\n          <mat-error *ngIf=\"hptForm.get(field?.name).errors?.pattern\">\n            Value type is not proper.\n          </mat-error>\n        </div>\n        <!--RADIO-->\n        <div *ngIf=\"\n            field?.type === 'radio' &&\n            modelTuningOption !== 'bayesianOptimization'\n          \" [hidden]=\"\n            field.disable &&\n            (formFields.algoName ===\n              'Artificial Neural Network Classification' ||\n              formFields.algoName === 'Artificial Neural Network Regression')\n          \">\n          <label class=\"ml-2\" id=\"dynamic-radio\">{{ field.label }}</label>\n          <mat-radio-group class=\"d-flex mt-2\" [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\">\n            <mat-radio-button aria-labelledby=\"dynamic-radio\" class=\"ml-4\" *ngFor=\"let radio of field.radio_btns\"\n              [value]=\"radio.value\">{{ radio.radio_label }}</mat-radio-button>\n          </mat-radio-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</mat-dialog-content>\n\n<!-- BODY (ADV ALGO) -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'advAlgo'\" class=\"mat-typography\">\n  <!-- RADIO (types) -->\n  <div class=\"row mt-2\">\n    <div class=\"col-md-12 form-group\">\n      <mat-label id=\"retrain-type\">Select method</mat-label>\n      <mat-radio-group aria-labelledby=\"retrain-type\" id=\"retrain-type\" class=\"radio-group flex-row\"\n        [(ngModel)]=\"advAlgoSelected\" (change)=\"onAdvAlgoSelectionChange(advAlgoSelected)\">\n        <mat-radio-button class=\"ml-3\" value=\"bagging\" [matTooltip]=\"_utils.getTootip('bagging')\"\n          [disabled]=\"disableBagging === true\">Bagging\n        </mat-radio-button>\n        <mat-radio-button *ngIf=\"modelInfo?.modelMetaData?.algoName !== 'KNN Classification'\" class=\"ml-3\"\n          value=\"boosting\" [matTooltip]=\"_utils.getTootip('boosting')\" [disabled]=\"disableBoosting === true\">Boosting\n        </mat-radio-button>\n      </mat-radio-group>\n      <mat-hint *ngIf=\"advAlgoSelected === 'gridSearchCV'\">\n        Note: Base algorithm default hyper parameters will be taken, you can\n        change if you need.\n      </mat-hint>\n    </div>\n  </div>\n  <h4 *ngIf=\"advAlgoSelected && formAdvAlgoFeilds?.fields\">Hyper Parameters</h4>\n  <!-- DYNAMIC FORM -->\n  <div class=\"row\" *ngIf=\"advAlgoSelected && formAdvAlgoFeilds?.fields\">\n    <div class=\"col-md-6\" *ngFor=\"let field of formAdvAlgoFeilds?.fields\">\n      <!-- NUMBER & TEXT-->\n      <mat-form-field *ngIf=\"field.type === 'number' || field.type === 'text'\" appearance=\"outline\">\n        <mat-label>{{ field.label }}</mat-label>\n        <input matInput [type]=\"field.type\" [placeholder]=\"field.placeholder_text\" [name]=\"field.name\"\n          [(ngModel)]=\"field.data\" />\n      </mat-form-field>\n      <!-- SELECT -->\n      <mat-form-field *ngIf=\"field?.type === 'select'\" appearance=\"outline\">\n        <mat-label>{{\n          field.placeholder_text ? field.placeholder_text : field.name\n          }}</mat-label>\n        <mat-select [(ngModel)]=\"field.data\">\n          <mat-option *ngFor=\"let opt of field?.select_options\" [value]=\"opt.value\">{{ opt.option_label }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n      <!--RADIO-->\n      <div *ngIf=\"field?.type === 'radio'\">\n        <label class=\"ml-2\" id=\"dynamic-radio\">{{ field.label }}</label>\n        <mat-radio-group class=\"d-flex mt-2\" [(ngModel)]=\"field.data\">\n          <mat-radio-button aria-labelledby=\"dynamic-radio\" class=\"ml-4\" *ngFor=\"let radio of field.radio_btns\"\n            [value]=\"radio.value\">{{ radio.radio_label }}</mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </div>\n  </div>\n</mat-dialog-content>\n\n<!-- Dialog buttons -->\n<mat-dialog-actions class=\"justify-content-end mt-3 mb-auto\">\n  <button mat-stroked-button class=\"{{ dialogData.type === 'retrain' && !driftConfig ? '' : 'mr-auto' }}\"\n    (click)=\"closeModal()\">\n    Cancel\n  </button>\n  <!-- DRIFT ANALYSIS -->\n  <button *ngIf=\"\n      dialogData.type === 'retrain' &&\n      driftConfig &&\n      selectedDataset &&\n      showDriftAnalysis\n    \" mat-stroked-button type=\"submit\" (click)=\"doDataDriftAnalysis()\">\n    Do Drift Analysis\n  </button>\n  <!-- SUBMIT (RETRAIN) -->\n  <button *ngIf=\"dialogData.type === 'retrain'\" [disabled]=\"\n      hideSubmitBtn || (showDriftAnalysis && !reportName && !driftConfig)\n    \" mat-flat-button class=\"btn-primary\" type=\"submit\" (click)=\"startRetraining()\">\n    Submit\n  </button>\n  <!-- RESET (TUNING) -->\n  <button (click)=\"resetHptValues(formFields?.algoName)\" *ngIf=\"dialogData?.type === 'tuning'\" mat-stroked-button\n    type=\"submit\">\n    Reset\n  </button>\n  <!-- SUBMIT (TUNING) -->\n  <button [disabled]=\"\n      ((modelInfo?.modelMetaData?.algoName === 'Gaussian NB Classification' ||\n        modelInfo?.modelMetaData?.algoName === 'Linear Regression') &&\n        modelTuningOption === 'gridSearch' &&\n        !formFields?.isGridSearchSupported) ||\n      (modelTuningOption === 'bayesianOptimization' &&\n        !formFields?.isBOSupported) || this.hptForm.invalid\n    \" *ngIf=\"dialogData?.type === 'tuning'\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    (click)=\"saveHPTPreference(formFields)\">\n    Submit\n  </button>\n  <!-- SAVE HP (ADV ALGO) -->\n  <button (click)=\"saveHyperParam(advAlgoSelected)\" *ngIf=\"dialogData?.type === 'advAlgo' && formAdvAlgoFeilds?.fields\"\n    mat-stroked-button type=\"submit\">\n    Save HP\n  </button>\n  <!-- SUBMIT (ADV ALGO) -->\n  <button [disabled]=\"!formAdvAlgoFeilds?.fields\" *ngIf=\"dialogData?.type === 'advAlgo'\" mat-flat-button\n    class=\"btn-primary\" type=\"submit\" (click)=\"startAdvTraining()\">\n    Submit\n  </button>\n</mat-dialog-actions>","import { UtilsService } from './../../../shared/utils.service';\nimport { ADV_ALGORITHMS_FORM_FIELDS } from './../../../../assets/data/advance-algorithms';\nimport { HPT_FORM_FIELDS } from './../../../../assets/data/hpt-form-fields';\nimport { TrainingService } from './../../training/training.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SpinnerService } from './../../../shared/spinner.service';\nimport { DataDriftService } from './../../data-drift/data-drift.service';\nimport { DataService } from './../../data/data.service';\nimport { ModelsComponent } from './../models.component';\nimport { Component, Inject, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-forms-dialog-handler',\n  templateUrl: './forms-dialog-handler.component.html',\n  styleUrls: ['./forms-dialog-handler.component.scss'],\n})\nexport class FormsDialogHandlerComponent implements OnInit, OnDestroy {\n  /** Form group instance */\n  retrainForm: FormGroup;\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  ALGORITHMS_ARRAY: Array<any>;\n  /** Flags */\n  hideMssqlSourceType: boolean = false;\n  hidePgsqlSourceType: boolean = false;\n  hideMysqlSourceType: boolean = false;\n  hideSelectConnection: boolean = false;\n  showDriftAnalysis: boolean = false;\n  isImported: boolean = false;\n  disableBO: boolean = false;\n  appType: string = environment.appType;\n  allowedSettingsOption: Array<any> = null;\n  /** Variables with default values */\n  retrainType: string = 'refit';\n  sourceType: string = 'file';\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  mergeDataset: boolean = false;\n\n  dialogHeading: string;\n  project: any;\n  baseTrainingFile: any;\n  iteration: string;\n  dataSetsList: Array<any> = [];\n  retrainSourceType: any;\n  modelInfo: any;\n  training: any;\n  selectedModelName: string;\n  retrainObj: any;\n  driftConfigList: Array<any> = [];\n  dataConnectionsArray: Array<any> = [];\n  selectedDataset: any;\n  selectedConnection: any;\n  query: string;\n  reportName: string;\n  driftConfig: any;\n  modelErrorCount: number;\n  algoType: string;\n  modelTuningOption: string;\n  algorithmName: any;\n  algorithm: any;\n  formFields: any;\n  advAlgoSelected: any;\n  formAdvAlgoFeilds: any;\n  advAlgoReqObject: any;\n  hyperParam: any;\n  hideSubmitBtn: boolean = true;\n  edaInfo: any;\n  isMultilabel: boolean = false;\n  user: any;\n  disableBagging: Boolean = false;\n  disableBoosting: Boolean = false;\n  disableRandomSearch: Boolean = false;\n  // formgroup for hpt forms.\n  hptForm: FormGroup = this.fb.group({});\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _modelsDialogRef: MatDialogRef<ModelsComponent>,\n    private _localStorage: LocalStorageService,\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _dataDrift: DataDriftService,\n    private _spinner: SpinnerService,\n    private _snackBar: MatSnackBar,\n    private _training: TrainingService,\n    public _utils: UtilsService,\n    private fb: FormBuilder\n  ) { }\n\n  /**\n   * Initializes all the required data\n   */\n  async ngOnInit(): Promise<any> {\n    this._spinner.showSpinner();\n    this.ALGORITHMS_ARRAY = await this._utils.getAlgorithms();\n    this.ALGORITHMS_ARRAY.filter((item) => {\n      if (\n        (item.name == 'Bagging Classifier' || item.name == 'Bagging Regressor') &&\n        item.status === false\n      ) {\n        this.disableBagging = true;\n      } else if (\n        (item.name == 'Boosting Classifier' || item.name == 'Boosting Regressor') &&\n        item.status === false\n      ) {\n        this.disableBoosting = true;\n      }\n      return item;\n    });\n\n    this.user = this._localStorage.getItem('user');\n    this.project = this._localStorage.getItem('project');\n    this.modelInfo = this.dialogData.modelInfo;\n    this.training = this.dialogData.trainingInfo;\n    this.edaInfo = this.dialogData.originalFileWithEdaDetails;\n    this.isMultilabel = this.training.isMultilabel;\n    this.setRestrictions();\n    switch (this.dialogData.type) {\n      case 'retrain':\n        this.dialogHeading = 'Retrain Model';\n        await this.initializeRetrainData();\n        break;\n      case 'tuning':\n        this.dialogHeading = 'Model Tuning (HPT)';\n        this.initializeTuningData();\n        break;\n      case 'advAlgo':\n        this.dialogHeading = 'Advance Algorithms';\n        this._spinner.stopSpinner();\n        break;\n    }\n  }\n\n  /**\n   * Initializes all the required data for retrain\n   */\n  async initializeRetrainData(): Promise<any> {\n    this.iteration = `Retraining- ${this.genModelName(\n      this.training.models,\n      this.modelInfo.modelMetaData.algoName\n    )}`;\n    // API call - fetches list of all the files associated with a project\n    let dataSets: any = await this._data\n      .getAllProjectDatas(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise()\n      .catch((e: Error) => {\n        this._toaster.error(`Error - ${e.message}`, 'Models');\n        this._spinner.stopSpinner();\n      });\n    this.dataSetsList = dataSets[0].filesList.filter((item) => {\n      return item.fileSource !== 'upload_retrained' && !item.hasOwnProperty('taExperimentId');\n    });\n    this.dataSetsList = this.dataSetsList.filter((item) => {\n      return item.fileSource !== 'notebook';\n    });\n    this.baseTrainingFile = this.dataSetsList.find(\n      (item) => item._id === this.training.originalFileId\n    );\n    this.retrainSourceType = this.modelInfo.retrainSourceType;\n    this.modelInfo.retrainSourceType\n      ? (this.baseTrainingFile.fileSource = this.modelInfo.retrainSourceType)\n      : '';\n    this.selectedModelName = `${this.training.name} - ${this.modelInfo.modelMetaData.algoName}`;\n    this.algoType = this.ALGORITHMS_ARRAY.filter(\n      (algorithm: any) => algorithm.name === this.modelInfo.modelMetaData.algoName.split('-')[0]\n    )[0]?.type;\n    // API parsing object\n    this.retrainObj = {\n      algoType: this.algoType,\n      algorithms: [this.modelInfo.modelMetaData.algoName],\n      trainingId: this.training._id,\n      modelId: this.modelInfo._id,\n      projectId: this.training.projectId,\n      modelTuning: this.modelInfo.modelMetaData.modelTuning,\n      modelFile: this.modelInfo.modelMetaData.modelPath,\n      sampling: this.training.sampling,\n      useGPU: this.project.useGPU,\n      iteration: this.iteration,\n      dataSetInfo: this.dialogData.trainings[0].edaId.dataSetInfo,\n      logTransformationColumns: this.dialogData.trainings[0].logTransformationColumns,\n      scalarValue: this.dialogData.trainings[0].scalarValue,\n      dataGroupId: this.edaInfo.dataGroupId,\n    };\n    // API call - triggers API tp fetch all drift configurations for particular project\n    let driftConfig: any = await this._dataDrift\n      .getAllSettings(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise()\n      .catch((e: Error) => {\n        this._toaster.error(`Error - ${e.message}`, 'Models');\n        this._spinner.stopSpinner();\n      });\n    driftConfig.filter((item: any) => {\n      if (this.algoType === 'regression') {\n        item.algoType === 'regression' ? this.driftConfigList.push(item) : '';\n      } else {\n        item.algoType === 'classification' ? this.driftConfigList.push(item) : '';\n      }\n    });\n    // ! Below block of code is not used anywhere in this module - this.daMetrics\n    //  if (algoType == 'regression') {\n    //    this.daMetrics = daRegressionMetrics;\n    //  } else {\n    //    this.daMetrics =\n    //      TrainingService.findAlgo(modelInfo.modelMetaData.algoName.split('-')[0])['driftMetrics'] ||\n    //      [];\n    //  }\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Initializes all the required data for model tuning\n   */\n  initializeTuningData(): void {\n    (this.project.isImported && this.modelInfo.modelMetaData.isMultilabel) ||\n      this.modelInfo.modelMetaData.isMultilabel\n      ? (this.isImported = true)\n      : (this.isImported = false);\n    let algo = this.modelInfo.modelMetaData.algoName.split('-');\n    let timeseriesAlgo = algo.find(item => item === 'Prophet');\n    if (timeseriesAlgo === 'Prophet') {\n      this.disableRandomSearch = true;\n    } else {\n      this.disableRandomSearch = false;\n    }\n    this.iteration = `Tuning-${this.genModelName(\n      this.training.models,\n      this.modelInfo.modelMetaData.algoName\n    )}`;\n    ((algo === 'XGBoost Classification' || algo === 'LightGBM Classification') &&\n      this.training.isMultilabel) ||\n      this.project.type === 'timeseries'\n      ? (this.disableBO = true)\n      : (this.disableBO = false);\n\n    // ! originalHpt is not used anywhere in the tuning operation\n    // this.originalHpt = angular.copy(this.training.hptPreference);\n\n    // ! retrainStatus is not used any where in whole models module\n    // this.retrainStatus = modelInfo.modelMetaData.status;\n\n    // Split algoname with delimeter '-' to check it is an advance or normal algo.\n    this.modelTuningOption = this.modelInfo.modelMetaData.modelTuning || 'hpt';\n    // console.log('this is hpt option value : ', this.modelTuningOption);\n    let algoSplit = this.modelInfo.modelMetaData.algoName.split('-');\n    this.algorithmName = algoSplit[0];\n    this.algorithm = this.ALGORITHMS_ARRAY.filter(\n      (algorithm: any) => algorithm.name === this.modelInfo.modelMetaData.algoName.split('-')[0]\n    )[0];\n    this.algoType = this.algorithm.type;\n    if (\n      this.modelInfo.modelMetaData.algoName.includes('Boosting') ||\n      this.modelInfo.modelMetaData.algoName.includes('Bagging')\n    ) {\n      const dynamicFormFieldsAdvAlgo = this.getAdvAlgoFormFields();\n      if (this.modelInfo.hptPreference) {\n        this.modelTuningOption = this.modelInfo.modelMetaData.modelTuning || 'hpt';\n        this.modelInfo.hptPreference.algoName = this.modelInfo.modelMetaData.algoName;\n        if (this.modelInfo.modelMetaData.algoName.includes('Tuning')) {\n          let algoName: string = `${algoSplit[1].charAt(0).toUpperCase()}${algoSplit[1].slice(\n            1\n          )}-${this.algorithm.type.charAt(0).toUpperCase()}${this.algorithm.type.slice(1)}`;\n          // setting up the db hpt values to the dynamic form fields.\n          this.formFields = dynamicFormFieldsAdvAlgo.filter(\n            (algo: any) => algo.algoName === algoName\n          )[0];\n          this.formFields?.fields.forEach((defaultFieldVal) => {\n            this.modelInfo?.hptPreference?.fields.forEach((dbFormVal) => {\n              if (defaultFieldVal.name === dbFormVal.name) {\n                defaultFieldVal.data = dbFormVal.data;\n              }\n            });\n          });\n        } else {\n          this.formFields = this.modelInfo.hptPreference;\n        }\n      } else {\n        let algoName: string = `${algoSplit[1].charAt(0).toUpperCase()}${algoSplit[1].slice(\n          1\n        )}-${this.algorithm.type.charAt(0).toUpperCase()}${this.algorithm.type.slice(1)}`;\n        this.formFields = dynamicFormFieldsAdvAlgo.filter(\n          (algo: any) => algo.algoName === algoName\n        )[0];\n      }\n    } else {\n      const dynamicFormFields = this.getHptFormFields();\n      let algoName: string = this.modelInfo.modelMetaData.algoName.split('-')[0];\n      if (this.modelInfo.hptPreference) {\n        // Get previously trained data and set it to formFields\n        this.modelTuningOption = this.modelInfo.modelMetaData.modelTuning || 'hpt';\n        // console.log('this is hpt option value inside the else if : ', this.modelTuningOption);\n        this.modelInfo.hptPreference.algoName = this.modelInfo.modelMetaData.algoName;\n        // setting up the db hpt values to the dynamic form fields.\n        this.formFields = dynamicFormFields.filter((algo: any) => algo.algoName === algoName)[0];\n        this.formFields?.fields.map((defaultFieldVal) => {\n          this.modelInfo?.hptPreference?.fields.map((dbFormVal) => {\n            if (defaultFieldVal.name === dbFormVal.name) {\n              defaultFieldVal.data = dbFormVal.data;\n            }\n          });\n        });\n        // console.log('this is after mapping dynamic form field filtered for setting db hpt values : ', this.formFields);\n      } else {\n        this.formFields = dynamicFormFields.filter((algo: any) => algo.algoName === algoName)[0];\n      }\n    }\n    this.filterFormFields(this.formFields.fields);\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Initialize default values when tuning option is changed\n   * @param val - this is the label passed from the html code, which is used to check if user visit the parameter tuning first time or second time.\n   */\n  onTuningOptionChanged(val?: string): void {\n    this._spinner.showSpinner();\n    // For bagging,boosting hyper params are different different\n    var tuningOption = this.modelInfo.modelMetaData.modelTuning || 'hpt';\n    var baggingBoosting = null;\n    if (this.modelInfo.modelMetaData.algoName.includes('Boosting')) {\n      baggingBoosting = 'Boosting';\n    } else if (this.modelInfo.modelMetaData.algoName.includes('Bagging')) {\n      baggingBoosting = 'Bagging';\n    }\n    if (baggingBoosting) {\n      const dynamicFormFieldsAdvAlgo = this.getAdvAlgoFormFields();\n      if (this.modelInfo.hptPreference && this.modelTuningOption === tuningOption) {\n        this.modelTuningOption = this.modelInfo.modelMetaData.modelTuning || 'hpt';\n        this.modelInfo.hptPreference.algoName = this.modelInfo.modelMetaData.algoName;\n        // this.formFields = this.modelInfo.hptPreference;\n        if (this.modelInfo.modelMetaData.algoName.includes('Tuning')) {\n          let algoName: string = `${baggingBoosting}-${this.algorithm.type\n            .charAt(0)\n            .toUpperCase()}${this.algorithm.type.slice(1)}`;\n          // setting up the db hpt values to the dynamic form fields.\n          this.formFields = dynamicFormFieldsAdvAlgo.filter(\n            (algo: any) => algo.algoName === algoName\n          )[0];\n          this.formFields?.fields.forEach((defaultFieldVal) => {\n            this.modelInfo?.hptPreference?.fields.forEach((dbFormVal) => {\n              if (defaultFieldVal.name === dbFormVal.name) {\n                defaultFieldVal.data = dbFormVal.data;\n              }\n            });\n          });\n        } else {\n          this.formFields = this.modelInfo.hptPreference;\n        }\n      } else {\n        let algoName: string = `${baggingBoosting}-${this.algorithm.type\n          .charAt(0)\n          .toUpperCase()}${this.algorithm.type.slice(1)}`;\n        this.formFields = dynamicFormFieldsAdvAlgo.filter(\n          (algo: any) => algo.algoName === algoName\n        )[0];\n      }\n    } else {\n      const dynamicFormFields = this.getHptFormFields();\n      if (this.modelInfo.hptPreference && this.modelTuningOption === tuningOption) {\n        this.modelInfo.hptPreference.algoName = this.algorithmName;\n        // this.formFields = this.modelInfo.hptPreference;\n        // setting up the db hpt values to the dynamic form fields.\n        this.formFields = dynamicFormFields.filter(\n          (algo: any) => algo.algoName === this.algorithmName\n        )[0];\n        // console.log('this is dynamic form field filtered for setting db hpt values : ', this.formFields);\n        this.modelInfo?.hptPreference?.fields.map((dbFormVal) => {\n          this.formFields?.fields.map((defaultFieldVal) => {\n            if (defaultFieldVal.name === dbFormVal.name) {\n              defaultFieldVal.data = dbFormVal.data;\n              if(dbFormVal.gs_data){\n                defaultFieldVal.gs_data = dbFormVal.gs_data;\n              }\n            }\n          });\n        });\n        // console.log('this is after mapping dynamic form field filtered for setting db hpt values : ', this.formFields);\n      } else {\n        this.formFields = dynamicFormFields.filter(\n          (algo: any) => algo.algoName === this.algorithmName\n        )[0];\n      }\n    }\n    this.filterFormFields(this.formFields.fields, val);\n  }\n\n  /**\n   *\n   * Function to save hyper parameter tuning preferences\n   * @param hptPreference\n   */\n  saveHPTPreference(hptPreference: any): void {\n    this._spinner.showSpinner();\n    let isError: boolean = false;\n    if (this.modelTuningOption === 'bayesianOptimization' && !this.formFields.isBOSupported) {\n      this._snackBar.open('Bayesian Optimization is not supported for this model', 'OK', {\n        horizontalPosition: 'right',\n        verticalPosition: 'bottom',\n      });\n      isError = true;\n    }\n    if (\n      (this.modelInfo.modelMetaData.algoName === 'Gaussian NB Classification' ||\n        this.modelInfo.modelMetaData.algoName === 'Linear Regression') &&\n      this.modelTuningOption === 'gridSearch' &&\n      !this.formFields.isGridSearchSupported\n    ) {\n      this._snackBar.open('Random Search is not supported for this model', 'OK', {\n        horizontalPosition: 'right',\n        verticalPosition: 'bottom',\n      });\n      isError = true;\n    }\n    hptPreference.algoName = `${this.modelInfo.modelMetaData.algoName}-${this.iteration}`;\n    hptPreference.modelTuningOption = this.modelTuningOption;\n    let splitAlgo: any = this.modelInfo.modelMetaData.algoName.split('-');\n    if (splitAlgo[1] === 'GridSearchCV') {\n      const dynamicFormFields: Array<any> = this.getHptFormFields();\n      let formFields: any = dynamicFormFields.filter(\n        (algo: any) => algo.algoName === splitAlgo[0]\n      )[0];\n      hptPreference.fields.forEach((data: any, i: any) => {\n        if (data.name === 'param_grid') {\n          hptPreference.fields[i] = formFields;\n        } else {\n          let t = {\n            name: 'param_grid',\n            label: 'param_grid',\n            data: formFields,\n          };\n          hptPreference.fields.push(t);\n        }\n      });\n    }\n    // Converts the HPT form data values into integer, if type is integer.\n    if (this.modelTuningOption === 'hpt') {\n      hptPreference.fields = hptPreference.fields.map((obj: any) => {\n        if (obj.type === 'number' && typeof obj.data === 'string') {\n          obj.data = parseFloat(obj.data);\n        }\n        return obj;\n      });\n    }\n    let reqObj: any = {\n      trainingId: this.training._id,\n      modelId: this.modelInfo._id,\n      pId: this.training.projectId,\n      hptPreference: hptPreference,\n      algoType: this.algorithm.type,\n      indepVariable: this.training.indepVariable,\n      foreGround: this.foreGround,\n      backGround: this.backGround,\n      modelTuning: this.modelTuningOption,\n      projectType: this.project.type,\n      trainPipeFilePath: this.modelInfo.trainPipeFilePath,\n      transformedDatasetPath: this.modelInfo.transformedDatasetPath,\n      logTransformationColumns: this.dialogData.trainings[0].logTransformationColumns,\n      scalarValue: this.dialogData.trainings[0].scalarValue,\n    };\n    if (this.modelInfo.hasOwnProperty('edaId') && this.modelInfo.edaId !== null) {\n      reqObj.edaId = this.modelInfo.edaId;\n    } else {\n      reqObj.edaId = this.training.edaId;\n    }\n    // API call\n    if (!isError) {\n      this._training\n        .startModelTuning(this.training._id, this.modelInfo._id, reqObj)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this._spinner.stopSpinner();\n              this._toaster.info('Model tuning started, please wait', 'Models');\n              this.closeModal({ type: 'tuning', algorithms: res.algorithms });\n            } else {\n              this._toaster.error('Cannot start the model tuning', 'Models');\n              this._spinner.stopSpinner();\n            }\n          },\n          (err) => {\n            this._toaster.error(`Server Error - ${err.message}.`, 'Models');\n            this._spinner.stopSpinner();\n          }\n        );\n    }\n  }\n\n  /**\n   * Function to reset model tuning option values\n   * @param algorith name of the algorithm\n   * @param modelTuningOption selected model tuning option value\n   */\n  resetHptValues(algorithm: string): void {\n    if (algorithm.includes('Boosting') || algorithm.includes('Bagging')) {\n      const dynamicFormFields: Array<any> = this.getHptFormFields();\n      let base: string = algorithm.includes('Boosting') ? 'Boosting' : 'Bagging';\n      let algoName: string = `${base}-${this.algoType.charAt(0).toUpperCase()}${this.algoType.slice(\n        1\n      )}`;\n      this.formFields = dynamicFormFields.filter((algo: any) => algo.algoName === algoName)[0];\n    } else {\n      const dynamicFormFields: Array<any> = this.getHptFormFields();\n      this.formFields = dynamicFormFields.filter(\n        (algo: any) => algo.algoName === algorithm.split('-')[0]\n      )[0];\n    }\n    this.filterFormFields(this.formFields.fields);\n  }\n\n  /**\n   * Filters the required fields in the dynamic form\n   * @param fieldsArray\n   * @param val - this is the label passed from the html code, which is used to check if user visit the parameter tuning first time or second time.\n   */\n  filterFormFields(fieldsArray: Array<any>, val?: string): void {\n    if (this.modelTuningOption === 'bayesianOptimization') {\n      this.formFields.fields = fieldsArray\n        .filter((item: any) => (item.bo_data ? item : null))\n        .map((item: any) => {\n          if (item.bo_data) {\n            item.data = item.bo_data;\n          }\n          return item;\n        });\n    } else if (this.modelTuningOption === 'gridSearch') {\n      this.formFields.fields = fieldsArray\n        .filter((item: any) => (item.gs_data ? item : null))\n        .map((item: any) => {\n          if (item.gs_data) {\n            item.data = item.gs_data;\n          }\n          return item;\n        });\n    }\n    this.createFormAndAddValidation(this.formFields?.fields, val, this.formFields?.algoName);\n  }\n\n  /**\n   * Function to toggle hide/show different fields in the retrain form, when retrain type is changed\n   * @param {*} type fit/transform\n   */\n  changeRetrainType(type: string): void {\n    if (type === 'transform') {\n      this.baseTrainingFile.fileSource === 'mssql'\n        ? ((this.hideMysqlSourceType = true), (this.hidePgsqlSourceType = true))\n        : '';\n      this.baseTrainingFile.fileSource === 'mysql'\n        ? ((this.hideMssqlSourceType = true), (this.hidePgsqlSourceType = true))\n        : '';\n      this.baseTrainingFile.fileSource === 'postgresql'\n        ? ((this.hideMysqlSourceType = true), (this.hideMssqlSourceType = true))\n        : '';\n    } else {\n      this.hideMysqlSourceType = false;\n      this.hideMssqlSourceType = false;\n      this.hidePgsqlSourceType = false;\n    }\n  }\n\n  /**\n   * Function to fetch connections list for selected data source type\n   * @param {*} type data source name - mysql, postgresql, mssql, file\n   */\n  changeSourceType(type: any): void {\n    this.baseTrainingFile.fileSource === type\n      ? (this.hideSelectConnection = true)\n      : (this.hideSelectConnection = false);\n    if ((type === 'file' || this.sourceType === 'file') && !this.selectedDataset) {\n      this.hideSubmitBtn = true;\n    } else {\n      this.hideSubmitBtn = false;\n    }\n    if ((type !== 'file' || this.sourceType !== 'file') && !this.selectedConnection) {\n      this.hideSubmitBtn = true;\n    } else {\n      this.hideSubmitBtn = false;\n    }\n    // API call\n    this._data\n      .getAllConnections(this.project._id, type)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          this.dataConnectionsArray = res;\n        },\n        (err: Error) => {\n          this._toaster.error(`Error - ${err.message}.`, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Starts the retraining by triggering API on retrain button clicked\n   */\n  startRetraining() {\n    this._spinner.showSpinner();\n    let isError: boolean = false;\n    this.driftConfigList = [];\n    this.retrainObj.sourceType = this.sourceType;\n    this.retrainObj.mergeDataset = this.mergeDataset;\n    if (this.dialogData.originalFileWithEdaDetails) {\n      this.retrainObj.edaSummary = this.dialogData.trainings[0].edaId.edaSummary;\n    } else {\n      this.retrainObj.edaSummary = null;\n    }\n    if (!this.project.useGPU) {\n      this.retrainObj.retrainType = this.retrainType;\n    }\n    if (\n      this.sourceType === 'mssql' ||\n      this.sourceType === 'mysql' ||\n      this.sourceType === 'postgresql'\n    ) {\n      if (this.retrainType !== 'transform') {\n        let foudDangerKeys =\n          this.query?.includes('delete') ||\n          this.query?.includes('insert') ||\n          this.query?.includes('update');\n        if (foudDangerKeys) {\n          this._snackBar.open('Only SELECT query is allowed', 'OK', {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n          });\n          isError = true;\n        }\n        //original file used for training\n        this.retrainObj.retrainingFileId = this.training.originalFileId;\n        this.retrainObj.connectionSettings = {};\n        this.retrainObj.connectionSettings.query = this.query;\n        if (this.selectedConnection) {\n          this.retrainObj.connectionSettings.connection = {};\n          this.retrainObj.connectionSettings.connectionName =\n            this.selectedConnection.connectionName;\n          this.retrainObj.connectionSettings.dataGroupId = this.selectedConnection.dataGroupId;\n          this.retrainObj.connectionSettings.database = this.selectedConnection.databaseName;\n          this.retrainObj.connectionSettings.source = this.selectedConnection.source;\n          this.retrainObj.connectionSettings.connection =\n            this.selectedConnection.databaseConnectionId;\n          this.retrainObj.connectionSettings.dataConnId = this.selectedConnection._id;\n        }\n      }\n    } else {\n      let selectedDataSet = this.dataSetsList.find((item) => item._id === this.selectedDataset);\n      if (selectedDataSet) {\n        this.retrainObj.retrainingDataFilename = selectedDataSet.name;\n        this.retrainObj.fileSchema = selectedDataSet.fileSchema;\n        this.retrainObj.retrainingFileId = selectedDataSet._id ? selectedDataSet._id : null;\n      }\n    }\n    this.retrainObj.filename = this.dialogData.originalFileWithEdaDetails.filename;\n    this.retrainObj.dataSetInfo = this.dialogData.trainings[0].edaId.dataSetInfo;\n    // API call\n    if (!isError) {\n      this._training\n        .startReTraining(this.training._id, this.modelInfo._id, this.retrainObj)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this.modelErrorCount = 0;\n              this._toaster.info('Retraining started, please wait', 'Models');\n              this.closeModal({ type: 'retrain', algorithms: res.algorithms });\n            } else {\n              this._toaster.error('Cannot start the retraining', 'Models');\n              this._spinner.stopSpinner();\n            }\n          },\n          (err: Error) => {\n            this._toaster.error(`Server Error - ${err.message}.`, 'Models');\n            this._spinner.stopSpinner();\n          }\n        );\n    }\n  }\n\n  /**\n   * Does drift analysis and generates drift report by triggering API, on \"Do drift analysis\" button click\n   */\n  doDataDriftAnalysis(): void {\n    this._spinner.showSpinner();\n    let reqObj: any = {\n      algoType: this.algoType,\n      type: 'summary',\n      stdThreshold: this.project.stdThreshold || 3,\n      reportName: this.reportName,\n      inputFeature: null,\n      incomingFileId: this.selectedDataset,\n      driftConfig: this.driftConfig ? this.driftConfig : null,\n    };\n    if (this.modelInfo.edaId !== null) {\n      reqObj.edaId = this.modelInfo.edaId;\n    } else {\n      reqObj.edaId = this.training.edaId._id;\n    }\n    let selectedDataSet: any = this.dataSetsList.find((item) => item._id === this.selectedDataset);\n    reqObj.incomingFilepath = selectedDataSet.name;\n    reqObj.incomingSchema = selectedDataSet.fileSchema.map((item: any) => {\n      let obj: any = { colName: item.colName, dataType: item.dataType };\n      return obj;\n    });\n    // API call\n    this._dataDrift\n      .startDriftAnalysis(this.training._id, this.modelInfo._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this._toaster.info('Drift analysis started, please wait', 'Models');\n            this.closeModal();\n          } else {\n            this._toaster.error('Cannot perform drift analysis', 'Models');\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(`Server Error - ${err.message}.`, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Function called when advance algo type options are changed - Bagging/Boosting\n   * @param {*} advAlgoName selected algo name\n   */\n  onAdvAlgoSelectionChange(advAlgoName: string): void {\n    // Checks whether adv algo is performed already or not\n    let isAlreadyDone: boolean = this.checkAdvTrainingAlreadyDone(\n      advAlgoName,\n      this.modelInfo.modelMetaData.algoName,\n      this.training\n    );\n    if (!isAlreadyDone) {\n      this.algoType = this.ALGORITHMS_ARRAY.filter(\n        (a: any) => a.name === this.modelInfo.modelMetaData.algoName.split('-')[0]\n      )[0]?.type;\n      const dynamicFormAdvAlgoFields = this.getAdvAlgoFormFields();\n      let algo = `${advAlgoName.charAt(0).toUpperCase()}${advAlgoName.slice(1)}-${this.algoType\n        .charAt(0)\n        .toUpperCase()}${this.algoType.slice(1)}`;\n      if (\n        this.modelInfo.modelMetaData.algoName === 'Ridge Classification' ||\n        this.modelInfo.modelMetaData.algoName === 'Ridge Classification with Cross Validation'\n      ) {\n        this.formAdvAlgoFeilds = dynamicFormAdvAlgoFields.filter(\n          (a: any) => a.algoName === algo\n        )[0];\n        this.formAdvAlgoFeilds.fields = this.formAdvAlgoFeilds.fields.map((item: any) => {\n          if (item.type === 'select') {\n            item.select_options = [{ option_label: 'SAMME', value: 'SAMME' }];\n            item.data = 'SAMME';\n          }\n          return item;\n        });\n      } else {\n        this.formAdvAlgoFeilds = dynamicFormAdvAlgoFields.filter(\n          (a: any) => a.algoName === algo\n        )[0];\n      }\n      let algoName: string = `${this.modelInfo.modelMetaData.algoName}-${advAlgoName\n        .charAt(0)\n        .toUpperCase()}${advAlgoName.slice(1)}`;\n      if (advAlgoName === 'gridSearchCV') {\n        const dynamicFormFields = this.getHptFormFields();\n        let formFields = dynamicFormFields.filter(\n          (a: any) => a.algoName === this.modelInfo.modelMetaData.algoName\n        )[0];\n        this.advAlgoReqObject = {\n          algoname: algoName,\n          modelFilePath: this.modelInfo.modelMetaData.modelPath,\n          hyperParams: formFields,\n        };\n      } else {\n        this.advAlgoReqObject = {\n          algoname: algoName,\n          modelFilePath: this.modelInfo.modelMetaData.modelPath,\n          hyperParams: null,\n        };\n      }\n    }\n  }\n\n  /**\n   * Function is called for save HP button, which saves the hyper params value\n   * @param {*} selection\n   */\n  saveHyperParam(selection: string): void {\n    this.hyperParam = this.formAdvAlgoFeilds;\n    let formFields: Array<any> = [];\n    let algoName: string = `${this.modelInfo.modelMetaData.algoName}-${this.advAlgoSelected\n      .charAt(0)\n      .toUpperCase()}${this.advAlgoSelected.slice(1)}`;\n    if (selection === 'gridSearchCV') {\n      if (this.formFields && this.formFields.algoName === this.modelInfo.modelMetaData.algoName) {\n        formFields = this.formFields;\n      } else {\n        const dynamicFormFeilds: Array<any> = this.getHptFormFields();\n        formFields = dynamicFormFeilds.filter(\n          (a: any) => a.algoName === this.modelInfo.modelMetaData.algoName\n        )[0];\n      }\n      let tempObj: any = {\n        name: 'param_grid',\n        label: 'param_grid',\n        required: true,\n        data: formFields,\n      };\n      let isFound: boolean = false;\n      this.hyperParam.fields.forEach((data: any, i: any) => {\n        if (data.name === 'param_grid') {\n          this.hyperParam.fields[i] = tempObj;\n          isFound = true;\n        }\n      });\n      isFound ? '' : this.hyperParam.fields.push(tempObj);\n      this.advAlgoReqObject = {\n        algoname: algoName,\n        modelFilePath: this.modelInfo.modelMetaData.modelPath,\n        hyperParams: this.hyperParam,\n      };\n    } else {\n      this.advAlgoReqObject = {\n        algoname: algoName,\n        modelFilePath: this.modelInfo.modelMetaData.modelPath,\n        hyperParams: this.hyperParam,\n      };\n    }\n    // Converts the HPT form data string values into integer, if type is integer.\n    this.hyperParam.fields = this.hyperParam.fields.map((obj: any) => {\n      if (obj.type === 'number' && typeof obj.data === 'string') {\n        obj.data = parseFloat(obj.data);\n      }\n      return obj;\n    });\n    swal({\n      title: 'HPT Preference',\n      text: `Preference saved successfully!`,\n      icon: 'success',\n      className: 'custom-alert',\n    });\n  }\n\n  /**\n   * Starts the advance training execution\n   */\n  startAdvTraining(): void {\n    this._spinner.showSpinner();\n    if (!this.hyperParam?.length) {\n      let algoName: string = `${this.modelInfo.modelMetaData.algoName}-${this.advAlgoSelected\n        .charAt(0)\n        .toUpperCase()}${this.advAlgoSelected.slice(1)}`;\n      this.advAlgoReqObject = {\n        algoname: algoName,\n        modelFilePath: this.modelInfo.modelMetaData.modelPath,\n        hyperParams: this.formAdvAlgoFeilds,\n      };\n    }\n    // Converts the HPT form data string values into integer, if type is integer.\n    this.advAlgoReqObject.hyperParams.fields = this.advAlgoReqObject.hyperParams.fields.map(\n      (obj: any) => {\n        if (obj.type === 'number' && typeof obj.data === 'string') {\n          obj.data = parseFloat(obj.data);\n        }\n        return obj;\n      }\n    );\n    let reqObj: any = {\n      advAlgoOptions: this.advAlgoReqObject,\n      transformedDatasetPath: this.modelInfo.transformedDatasetPath,\n      algoType: this.algoType,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      degree: this.modelInfo.modelMetaData.degree ? this.modelInfo.modelMetaData.degree : 2,\n      logTransformationColumns: this.dialogData.trainings[0].logTransformationColumns,\n      scalarValue: this.dialogData.trainings[0].scalarValue,\n    };\n    if (this.modelInfo.edaId !== null) {\n      reqObj.edaId = this.modelInfo.edaId;\n    } else {\n      reqObj.edaId = this.training.edaId;\n    }\n    // API call\n    this._training\n      .startAdvTraining(this.training._id, this.modelInfo._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.modelErrorCount = 0;\n            this._toaster.info('Advance algorithm training started, please wait', 'Models');\n            this.closeModal({ type: 'advAlgo', algorithms: res.algorithms });\n          } else {\n            this._toaster.error('Cannot start the advance algorithm training', 'Models');\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(`Server Error - ${err.message}.`, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Checks whether advance training is already done or not\n   * @param {*} selection\n   * @param {*} algoName\n   * @param {*} training\n   */\n  checkAdvTrainingAlreadyDone(selection: string, algoName: string, training: any): boolean {\n    let found: boolean = false;\n    training.models.forEach((model: any) => {\n      if (model.modelMetaData.algoName.toLowerCase() === `${algoName}-${selection}`.toLowerCase()) {\n        found = true;\n        this._snackBar.open(`Already performed ${selection} for this model`, 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n        this.formAdvAlgoFeilds = [];\n      }\n    });\n    return found;\n  }\n\n  /**\n   * Disables the Boosting option for some algos\n   */\n  disableForAlgos(): boolean {\n    let algo: any = this.modelInfo.modelMetaData.algoName.split('-')[0];\n    let index: number = ['KNN Classification', 'Nearest Centroid Classification'].indexOf(algo);\n    return index !== -1 ? false : true;\n  }\n\n  /**\n   * Generates the model name and returns it\n   * @param {*} models\n   * @param {*} algoName\n   */\n  genModelName(models: any, algoName: any): any {\n    return models.filter((model: any) => model.modelMetaData.algoName.includes(algoName)).length;\n  }\n\n  /**\n   * Returns the form data to be shown if grid search is selected\n   * Eg: For grid search we need to show \"gs_data\" values as default in the form,\n   * but while submiting we need to send \"data\" value\n   * @returns\n   */\n  bindGridSearch(customValue: string, field: any): any {\n    if (customValue) {\n      field.data = customValue;\n    } else {\n      field.data = field.gs_data;\n    }\n    return field.data;\n  }\n\n  /**\n   * Returns the form data to be shown if bayesian optimization is selected\n   * Eg: For grid search we need to show \"bo_data\" values as default in the form,\n   * but while submiting we need to send \"data\" value\n   * @param field\n   * @returns\n   */\n  bindBayesianOpt(customValue: string, field: any): any {\n    if (customValue) {\n      field.data = customValue;\n    } else {\n      field.data = field.bo_data;\n    }\n    return field.data;\n  }\n\n  /**\n   * Retursn the original HPT form fields array\n   * @returns\n   */\n  getHptFormFields(): Array<any> {\n    return JSON.parse(JSON.stringify(HPT_FORM_FIELDS));\n  }\n\n  /**\n   * Returns the original adv algo form fields array\n   * @returns\n   */\n  getAdvAlgoFormFields(): Array<any> {\n    return JSON.parse(JSON.stringify(ADV_ALGORITHMS_FORM_FIELDS));\n  }\n\n  /**\n   * Closes the current opened dialog\n   */\n  closeModal(data?: any): void {\n    this._modelsDialogRef.close(data);\n  }\n\n  /**\n   * function to add restrictions to the project types.\n   */\n  setRestrictions(): void {\n    this.allowedSettingsOption = this.user?.psFeatures?.allowedFeaturesList || [];\n  }\n\n  /**\n   * function to create form controls and then attach the validators.\n   * @param val - this is the label passed from the html code, \n   * which is used to check if user visit the parameter tuning first time or second time.\n  */\n  createFormAndAddValidation(controls: any, val?: string, algoName?: string): void {\n    for (const control of controls) {\n      const validatorsToAdd = [];\n      for (const [key, value] of Object.entries(control.validators)) {\n        switch (key) {\n          case 'min':\n            validatorsToAdd.push(Validators.min(Number(value)));\n            break;\n          case 'required':\n            if (value) {\n              validatorsToAdd.push(Validators.required);\n            }\n            break;\n          case 'requiredTrue':\n            if (value) {\n              validatorsToAdd.push(Validators.requiredTrue);\n            }\n            break;\n          case 'email':\n            if (value) {\n              validatorsToAdd.push(Validators.email);\n            }\n            break;\n          case 'minLength':\n            validatorsToAdd.push(Validators.minLength(Number(value)));\n            break;\n          case 'maxLength':\n            validatorsToAdd.push(Validators.maxLength(Number(value)));\n            break;\n          case 'pattern':\n            if (this.modelTuningOption === 'bayesianOptimization' && control.bo_data) {\n              if(( algoName === 'Random Forest Regression' && (control.name === 'max_depth' || control.name === 'max_leaf_nodes')) || \n                 ( algoName === 'Polynomial Regression' && control.name === 'degree') ||\n                 ( algoName === 'Ridge Regression' && control.name === 'max_iter') ||\n                 ( algoName === 'Lasso Regression' && control.name === 'max_iter') || \n                 ( algoName === 'Passive Regression' && control.name === 'tol') ||\n                 ( algoName === 'LassoLARS Regression' && control.name === 'eps') ||\n                 ( algoName === 'MLP Classification' && (control.name === 'hidden_layer_sizes' || control.name === 'epsilon' || control.name === 'max_iter')) ||\n                 ( algoName === 'Logistic Regression' && control.name === 'C') ||\n                 ( algoName === 'nuSV Regression' && (control.name === 'C' || control.name === 'degree')) || \n                 ( algoName === 'SGD Regression' && (control.name === 'epsilon' || control.name === 'l1_ratio' || control.name === 'alpha')) ||\n                 ( algoName === 'XGBoost Regression' && (control.name === 'max_depth' || control.name === 'n_estimators' || control.name === 'scale_pos_weight')) || \n                 ( algoName === 'LightGBM Regression' && (control.name === 'max_depth' || control.name === 'num_leaves' || control.name === 'n_estimators')) ||\n                 ( algoName === 'Decision Tree Classification' && control.name === 'max_leaf_nodes') || \n                 ( algoName === 'Random Forest Classification' && control.name === 'max_depth') || \n                 ( algoName === 'Ridge Classification' && control.name === 'max_iter') || \n                 ( algoName === 'Ridge Classification with Cross Validation' && control.name === 'cv') || \n                 ( algoName === 'Logistic Regression with Cross Validation' && (control.name === 'cv' || control.name === 'Cs')) || \n                 ( algoName === 'Passive Aggressive Classification' && (control.name === 'max_iter' || control.name === 'tol')) ||\n                 ( algoName === 'XGBoost Classification' && (control.name === 'max_depth' || control.name === 'n_estimators' || control.name === 'subsample')) || \n                 ( algoName === 'SVM Classification' && (control.name === 'C' || control.name === 'gamma')) ||\n                 ( algoName === 'LightGBM Classification' && (control.name === 'max_depth' || control.name === 'num_leaves' || control.name === 'n_estimators')) ||\n                 ( algoName === 'Extra Tree Classification' && (control.name === 'max_depth' || control.name === 'min_samples_split' || control.name === 'min_samples_leaf' || control.name === 'max_leaf_nodes' || control.name === 'min_impurity_decrease')) || \n                 ( algoName === 'Ensemble Extra Trees Classification' && (control.name === 'max_depth' || control.name === 'n_estimators' || control.name === 'max_features' || control.name === 'min_samples_split' || control.name === 'min_samples_leaf' || control.name === 'max_leaf_nodes' || control.name === 'min_impurity_decrease')))  {\n                if(this.hptForm.get(control.name) !== undefined && this.hptForm.get(control.name) !== null) {\n                  this.hptForm.get(control.name).setValidators([Validators.required, Validators.pattern(/^([0-9]+(\\.[0-9]+)*(,[0-9]+(\\.[0-9]+)*){1})$/)]);\n                  this.hptForm.updateValueAndValidity();\n                } else {\n                  validatorsToAdd.push(Validators.pattern(/^([0-9]+(\\.[0-9]+)*(,[0-9]+(\\.[0-9]+)*){1})$/));\n                }\n              } else {\n                if(this.hptForm.get(control.name) !== undefined && this.hptForm.get(control.name) !== null) {\n                  let val = String(value).replace(/[\\*]/g, '?');\n                  this.hptForm.get(control.name).setValidators([Validators.required, Validators.pattern(String(val))]);\n                  this.hptForm.updateValueAndValidity();\n                } else {\n                  validatorsToAdd.push(Validators.pattern(String(value).replace(/[\\*]/g, '?')));\n                }\n              }\n            } else if (this.modelTuningOption === 'gridSearch' && control.gs_data) {\n              if(this.hptForm.get(control.name) !== undefined && this.hptForm.get(control.name) !== null) {\n                this.hptForm.get(control.name).setValidators([Validators.required, Validators.pattern(String(value))]);\n                this.hptForm.updateValueAndValidity();\n              } else {\n                validatorsToAdd.push(Validators.pattern(String(value)));\n              }\n            } else {\n              validatorsToAdd.push(Validators.pattern(String(value)));\n            }\n            break;\n          case 'nullValidator':\n            if (value) {\n              validatorsToAdd.push(Validators.nullValidator);\n            }\n            break;\n          default:\n            if (this.appType === 'saas' && key === 'saasMax' && value) {\n              validatorsToAdd.push(Validators.max(Number(value)));\n            } else if (this.appType === 'enterprise' && key === 'entMax' && value) {\n              validatorsToAdd.push(Validators.max(Number(value)));\n            }\n            break;\n        }\n      }\n      if (this.modelTuningOption == 'hpt' && val === 'secondTime' && this.hptForm.get(control.name) !== undefined && this.hptForm.get(control.name) !== null) {\n        this.hptForm.get(control.name).setValidators(validatorsToAdd);\n        this.hptForm.updateValueAndValidity();\n      } else {\n        this.hptForm.addControl(control.name, this.fb.control(control.data, validatorsToAdd));\n      }\n    }\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<!-- HEADER (title) -->\n<h2 mat-dialog-title>Quick Prediction</h2>\n<!-- BODY -->\n<mat-dialog-content>\n  <!-- SELECT (model) -->\n  <div class=\"row mt-3\">\n    <div class=\"col-md-12 form-group\">\n      <mat-form-field appearance=\"outline\" class=\"w-50\">\n        <mat-label>Select a model</mat-label>\n        <mat-select [(ngModel)]=\"modelToPredict\" required #model=\"ngModel\"\n          (selectionChange)=\"onChangeDataset($event.value)\">\n          <mat-option *ngFor=\"let model of models\" [value]=\"model\">\n            {{ dialogData.trainings[0].name }}\n            - {{ model.modelMetaData.algoName }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"model.invalid || model.touched\">Model is required.</mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class=\"d-flex align-items-center justify-content-between\">\n    <!-- TOGGLE BUTTONS (upload and keyboard) -->\n    <mat-button-toggle-group [disabled]=\"!modelToPredict\" class=\"mt-2\" [(ngModel)]=\"predMode\"\n      (change)=\"selectPredMode(predMode)\">\n      <mat-button-toggle value=\"file_upload\">\n        <mat-icon>file_upload</mat-icon>\n      </mat-button-toggle>\n      <mat-button-toggle value=\"input_form\" [hidden]=\"selectedModel == 'Agglomerative'\">\n        <mat-icon>keyboard</mat-icon>\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n    <!-- BUTTON (refresh form data)  -->\n    <button class=\"text-primary\" mat-button *ngIf=\"predMode === 'input_form'\" (click)=\"selectPredMode('input_form')\">\n      Refresh Form\n      <mat-icon class=\"ml-2\">autorenew</mat-icon>\n    </button>\n  </div>\n  <!-- FILE UPLOAD -->\n  <mat-form-field appearance=\"outline\" *ngIf=\"predMode === 'file_upload'\" class=\"mt-3\">\n    <mat-label>Select encoding</mat-label>\n    <mat-select [(ngModel)]=\"fileEncoding\" required>\n      <mat-option value=\"utf_8\">utf_8</mat-option>\n      <mat-option value=\"latin_1\">latin_1</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <div *ngIf=\"predMode === 'file_upload'\" class=\"mt-1\">\n    <input class=\"mb-2\" type=\"file\" name=\"file\" accept=\".csv\"\n      (change)=\"handleFileInput($event.target.files,fileEncoding)\" /><br />\n    <mat-hint class=\"mt-2\">Only .csv file is allowed.</mat-hint>\n  </div>\n  <!-- INPUT FORM -->\n  <div *ngIf=\"predMode === 'input_form'\" class=\"row mt-3\">\n    <div class=\"col-md-3\" *ngFor=\"let field of quickPredUIMetaData\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>{{ field.colName }}</mat-label>\n        <input matInput type=\"{{\n            field.dataType === 'Integer' ||\n            field.dataType === 'Decimal'\n              ? 'number'\n              : 'text'\n          }}\" [placeholder]=\"field.colName\" [name]=\"field.name\" [(ngModel)]=\"quickPredformData[field.colName]\" />\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- PREDICTION RESULT -->\n  <div *ngIf=\"predictionResult?.predictionFileMetaData && predictionPreviewData.length\" class=\"mt-4\">\n    <mat-divider></mat-divider>\n    <div class=\"d-flex justify-content-between align-items-center mt-4\">\n      <!-- DOWNLOAD -->\n      <h6 class=\"m-0\">\n        <a href=\"#\" (click)=\"downloadPredictedFile()\">Download</a> the prediction result.\n      </h6>\n      <!-- INPUT -->\n      <mat-form-field *ngIf=\"predMode === 'file_upload' && project.type !== 'clustering'\" appearance=\"standard\"\n        class=\"ml-auto mr-4\" style=\"width: 20% !important\">\n        <mat-label>Record No.</mat-label>\n        <input matInput type=\"number\" placeholder=\"Enter number\" [(ngModel)]=\"rowId\" />\n      </mat-form-field>\n      <!-- BUTTON (lime report) -->\n      <button *ngIf=\"project.type !== 'clustering' && modelToPredict.graphSupported.limeReport === true\"\n        mat-stroked-button (click)=\"openGraphDialog('limeReport', modelToPredict, predMode)\"\n        [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions.includes('limeReport')\">\n        <span matBadge [matBadgeIcon]=\"allowedModelOptions.includes('limeReport') ? '' : 'PRO'\" matBadgeOverlap=false\n          [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('limeReport') ? '' : 'text-muted disable-Btn'\">\n          <mat-icon class=\"mr-2\">show_chart</mat-icon>Lime Report\n        </span>\n      </button>\n    </div>\n    <!-- DATA GRID TABLE -->\n    <!-- <div class=\"mt-3\">\n      <table class=\"table w-100 table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of predictionPreviewData[0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of  predictionPreviewData\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div> -->\n    <ag-grid-angular *ngIf=\"predictionPreviewData.length\" #agGrid id=\"myGrid\" class=\"ag-angle my-4\"\n      [gridOptions]=\"gridOptions\" (gridReady)=\"gridReady($event)\">\n    </ag-grid-angular>\n  </div>\n</mat-dialog-content>\n<!-- FOOTER (buttons) -->\n<mat-dialog-actions class=\"justify-content-end mt-4 mb-auto\">\n  <!-- CANCEL -->\n  <button class=\"{{ predMode === 'input_form' ? 'mr-auto' : '' }}\" mat-stroked-button mat-dialog-close>\n    Cancel\n  </button>\n  <!-- RESET -->\n  <button *ngIf=\"predMode === 'input_form'\" (click)=\"quickPredformData = {}\" mat-stroked-button>\n    Clear\n  </button>\n  <!-- SUBMIT -->\n  <button [disabled]=\"!modelToPredict\" (click)=\"doPrediction()\" mat-flat-button class=\"btn-primary\" type=\"submit\">\n    Predict\n  </button>\n</mat-dialog-actions>","import { FormControl } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { ModelsService } from './../models.service';\nimport { DataService } from './../../data/data.service';\nimport { SpinnerService } from './../../../shared/spinner.service';\nimport { LocalStorageService } from './../../../shared/local-storage.service';\nimport { Component, Inject, OnDestroy, OnInit, OnChanges } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { TextAnalysisService } from '../../text-analysis/text-analysis.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ModelsComponent } from '../models.component';\nimport { GridApi, GridOptions } from 'ag-grid-community';\nimport { GraphsDialogHandlerComponent } from '../graphs-dialog-handler/graphs-dialog-handler.component';\nimport { UtilsService } from 'src/app/shared/utils.service';\n\ndeclare var $: any;\n@Component({\n  selector: 'app-quick-prediction',\n  templateUrl: './quick-prediction.component.html',\n  styleUrls: ['./quick-prediction.component.scss'],\n})\nexport class QuickPredictionComponent implements OnInit, OnDestroy, OnChanges {\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Angular grid settings */\n  gridOptions: GridOptions;\n  $win = $(window);\n  gridApi: GridApi;\n  /** Variables with default values */\n  predMode: string = 'file_upload';\n  toggleView: boolean = false;\n  fileToUpload: any;\n\n  fileUploadControl = new FormControl('');\n  fileEncoding: any;\n  project: any;\n  modelToPredict: any;\n  predictionResult: any;\n  originalFileDetails: any;\n  quickPredformData: any = {};\n  taFeatureConfig: Array<any> = [];\n  quickPredUIMetaData: Array<any> = [];\n  predictionPreviewData: Array<any> = [];\n  predictionUploadResult: any;\n  rowId: number;\n  //configure it to change the file size - this is in mb.\n  allowedPSFileUploadSize: number;\n  // restriction variables\n  appType: string = environment.appType;\n  allowedModelOptions: Array<any> = null;\n  user: any;\n  gridColumnApi: any;\n  selectedModel: any;\n  models: any;\n  ALGORITHMS_ARRAY: Array<any>;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _data: DataService,\n    private _textAnalysis: TextAnalysisService,\n    private _localStorage: LocalStorageService,\n    private _toaster: ToastrService,\n    private _spinner: SpinnerService,\n    private _modelsDialogRef: MatDialogRef<ModelsComponent>,\n    private _models: ModelsService,\n    private _socket: SocketIoService,\n    private _snackbar: MatSnackBar,\n    private _window: Window,\n    private _dialog: MatDialog,\n    private _utils: UtilsService\n  ) {}\n\n  async ngOnInit(): Promise<any> {\n    this._spinner.showSpinner();\n    this.ALGORITHMS_ARRAY = await this._utils.getAlgorithms();\n    this.fileEncoding = 'utf_8';\n    this.initQuickPredictionSocket();\n    this.project = this._localStorage.getItem('project');\n    //fetching the restriction details from localstorage user.\n    this.user = this._localStorage.getItem('user');\n    this.allowedPSFileUploadSize = this.user?.psFeatures?.allowedPSFileUploadSize || 50;\n    this.models = this.dialogData.trainings[0].models;\n    this.models = this.models.filter((item) => {\n      console.log(\"m item\",item)\n      return item?.graphSupported?.status === true && item?.graphSupported?.isDeleted === false;\n    });\n    console.log(this.models)\n    this.allowedModelOptions = this.user?.psFeatures?.allowedFeaturesList || [];\n    await this.initializeQuickPrediction();\n  }\n\n  ngOnChanges() {}\n\n  /**\n   * Initializes the quick prediction required data\n   */\n  async initializeQuickPrediction(): Promise<any> {\n    // this.predictionStarted = false;\n    // API call\n    this.originalFileDetails = await this.getMyFileData(\n      this.project._id,\n      this.dialogData.currentModelMeta.originalFileId\n    ).catch((e: any) => {\n      this._toaster.error('Could not fetch required information for Quick Prediction.', 'Models');\n      this._spinner.stopSpinner();\n      this.closeModal();\n    });\n    if (this.originalFileDetails?.taExperimentId) {\n      // If original file has features generated using textanalysis, fetch and keep in local variable.\n      // Later exclude these new features in qp form\n      let taExperiment: any = await this.getTaExperiment(\n        this.originalFileDetails.taExperimentId\n      ).catch((e: any) => {\n        this._toaster.error(`Error : ${e.error.message}`, 'Models');\n        this._spinner.stopSpinner();\n      });\n      this.taFeatureConfig = taExperiment.taFeatureConfig || [];\n    }\n    this._spinner.stopSpinner();\n  }\n\n  onChangeDataset(dataset) {\n    this.selectedModel = dataset.modelMetaData.algoName;\n    this.predMode = 'file_upload';\n    this.predictionResult = null;\n    this.quickPredUIMetaData = [];\n  }\n  /**\n   * Function to toggle/select the quick prediction mode using any one option\n   * @param {*} mode file upload/input form\n   */\n  selectPredMode(mode: string): void {\n    this.predictionPreviewData = [];\n    this.predictionResult = null;\n    this.quickPredUIMetaData = [];\n    if (mode === 'input_form') {\n      this._spinner.showSpinner();\n      let reqObj: any = {\n        indepVariable: this.dialogData.trainings[0].indepVariable,\n        notebookInputFileName: this.dialogData.notebookInputFileDetails\n          ? this.dialogData.notebookInputFileDetails.filename\n          : '',\n      };\n      // Add ta details if taFeatureConfig is present\n      if (this.taFeatureConfig.length) {\n        reqObj['taFeatureConfig'] = this.taFeatureConfig;\n        reqObj['textAnalysisOutFilePath'] = this.originalFileDetails.filename;\n      }\n      // API call\n      this._models\n        .getQuickPredictionFormData(\n          this.dialogData.trainings[0]._id,\n          this.modelToPredict._id,\n          this.project.type,\n          reqObj\n        )\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              let formArray: Array<any> = res.qpFormData;\n              formArray.forEach((qpData: any) => {\n                if (this.originalFileDetails.notebookInputFileId || this.taFeatureConfig.length) {\n                  if (this.dialogData.trainings[0].depVariable !== qpData.colName) {\n                    this.quickPredUIMetaData.push({\n                      colName: qpData.colName,\n                      dataType: qpData.dataType,\n                      value: qpData.value,\n                    });\n                  }\n                } else {\n                  if (this.itemExist(this.dialogData.trainings[0].indepVariable, qpData.colName)) {\n                    this.quickPredUIMetaData.push({\n                      colName: qpData.colName,\n                      dataType: qpData.dataType,\n                      value: qpData.value,\n                    });\n                  }\n                }\n                this.quickPredUIMetaData.forEach((item) => {\n                  this.quickPredformData[item.colName] = item.value;\n                });\n              });\n              this._spinner.stopSpinner();\n            } else {\n              this._toaster.error('Sorry! Cannot fetch the QP form data.', 'Models');\n              this._spinner.stopSpinner();\n            }\n          },\n          (err: any) => {\n            this._spinner.stopSpinner();\n            this._toaster.error(`Server Error - ${err.error.message}`, 'Models');\n          }\n        );\n    } else {\n      this.fileToUpload = '';\n    }\n  }\n\n  /**\n   * Generates the quick prediction by triggering API calls\n   */\n  async doPrediction(): Promise<any> {\n    // this.predictionStarted = true;\n    this.predictionResult = null;\n    let reqObj: any;\n    let algoName = this.modelToPredict.modelMetaData.algoName.split('-')[0];\n    let algoType: any = this.ALGORITHMS_ARRAY.filter((a: any) => a.name === algoName)[0]?.type;\n    // this.predictionFile = null;\n    reqObj = {\n      modelFilePath: this.modelToPredict.modelMetaData.modelPath,\n      algoName: algoName,\n      algoType: algoType,\n      modelName: `${this.dialogData.trainings[0].name} - ${algoName}`,\n      modelId: this.modelToPredict._id,\n      trainingId: this.dialogData.trainings[0]._id,\n      isMultilabel: this.modelToPredict.modelMetaData.isMultilabel,\n      scalerObj: this.dialogData.trainings[0].scalerObj,\n      reTrainFileId: this.modelToPredict.modelMetaData.reTrainFileId,\n    };\n    if (this.modelToPredict.hasOwnProperty('edaId') && this.modelToPredict.edaId !== null) {\n      reqObj.edaId = this.modelToPredict.edaId;\n    } else {\n      reqObj.edaId = this.dialogData.trainings[0].edaId._id;\n    }\n    if (this.dialogData.trainings[0].logTransformationColumns) {\n      reqObj.logTransformationColumns = this.dialogData.trainings[0].logTransformationColumns;\n      reqObj.scalarValue = this.dialogData.trainings[0].scalarValue;\n    }\n    if (this.predMode == 'file_upload') {\n      if (this.fileToUpload) {\n        this._spinner.showSpinner();\n        this.predictionUploadResult = await this._models\n          .fileUploadPrediction(this.fileToUpload, this.project._id, this.fileEncoding)\n          .pipe(takeUntil(this.unsubscribe$))\n          .toPromise()\n          .catch((e: any) => {\n            this._toaster.error(`Server Error - ${e.error.message}.`, 'Models');\n            this._spinner.stopSpinner();\n          });\n        if (this.predictionUploadResult.projectDetails) {\n          reqObj.predictionFile = this.predictionUploadResult.projectDetails;\n          // API call\n          this.performPrediction(reqObj);\n        } else {\n          this._toaster.show('Sorry! Cannot proceed with the uploaded file.', 'Models');\n          this._spinner.stopSpinner();\n        }\n      } else {\n        this._snackbar.open('Please select a .csv file for prediction', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n        this._spinner.stopSpinner();\n      }\n    } else {\n      if (Object.keys(this.quickPredformData).length) {\n        this._spinner.showSpinner();\n        this.quickPredUIMetaData.forEach((data) => {\n          this.quickPredformData[data.colName] = this.quickPredformData.hasOwnProperty(data.colName)\n            ? this.quickPredformData[data.colName]\n            : null;\n        });\n        if (this.quickPredformData['undefined']) {\n          delete this.quickPredformData['undefined'];\n        }\n        reqObj.predictionData = this.quickPredformData;\n        // API call\n        this.performPrediction(reqObj);\n      } else {\n        // this.predictionStarted = false;\n        this._snackbar.open('Please input data for prediction.', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n        this._spinner.stopSpinner();\n      }\n    }\n  }\n\n  /**\n   * Calls the quick prediction API to execute\n   * @param reqObj\n   */\n  performPrediction(reqObj: any): void {\n    this._models\n      .doPrediction(this.dialogData.trainings[0]._id, this.modelToPredict._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this._toaster.info('Quick prediction started...', 'Models');\n          } else {\n            this._toaster.info('Sorry! Cannot execute the quick prediction.', 'Models');\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: any) => {\n          this._toaster.info(`Server Error - ${err.error.message}`, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Fetchs my file details\n   * @param projectId\n   * @param dataId\n   */\n  getMyFileData(projectId: string, dataId: string): Promise<any> {\n    return this._data\n      .getMyFileData(projectId, dataId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Fetchs text-analysis experiments\n   * @param projectId\n   * @param originalFileId\n   */\n  getTaExperiment(experimentId: string): Promise<any> {\n    return this._textAnalysis\n      .taExperiment(experimentId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Handles the dynamic graph dialog as per the type and opens it\n   * @param type\n   * @param trainingInfo\n   * @param modelInfo\n   */\n  openGraphDialog(type: string, modelInfo: any, predMode: string): void {\n    this._dialog\n      .open(GraphsDialogHandlerComponent, {\n        minWidth: '50vw',\n        maxWidth: '50vw',\n        data: {\n          type: type,\n          modelInfo: modelInfo,\n          predMode: predMode,\n          trainings: this.dialogData.trainings,\n          rowId: this.rowId,\n          predictionFile: this.predictionUploadResult?.projectDetails,\n          quickPredformData: this.quickPredformData,\n          originalFileWithEdaDetails: this.dialogData.originalFileWithEdaDetails,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {});\n  }\n\n  /**\n   * Filters the array and returns the item if exists\n   * @param {*} arrayData input array\n   * @param {*} item item to be searched\n   */\n  itemExist(arrayData: any, item: any): any {\n    return arrayData.some((data: any) => {\n      return data.colName === item;\n    });\n  }\n\n  /**\n   * Stores the file data to be uploaded into the variable\n   * @param inputFile files object\n   */\n  handleFileInput(inputFile: any, fileEncoding) {\n    const ext = inputFile[0].name.split('.').pop();\n    if (inputFile && ['csv'].includes(ext)) {\n      if (inputFile[0].size < this.allowedPSFileUploadSize * 1024 * 1024) {\n        this.fileToUpload = inputFile[0];\n      } else {\n        this._snackbar.open(\n          'File size should be less than ' + this.allowedPSFileUploadSize + 'Mb.',\n          'OK',\n          {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n          }\n        );\n      }\n    } else {\n      this.fileToUpload = '';\n      this._snackbar.open(`.${ext} file type is not supported`, 'OK');\n    }\n  }\n\n  /**\n   * Downloads the quick prediction result\n   */\n  downloadPredictedFile(): void {\n    this._window.open(\n      `${environment.serverBaseUrl}/api/prediction/${this.predictionResult._id}/download`,\n      '_blank'\n    );\n  }\n\n  /**\n   * Called when ng-grid is rendered in dom\n   * @param event\n   */\n  gridReady(event: any) {\n    event.api.setDomLayout('autoHeight');\n    this.gridApi = event.api;\n    this.gridApi.refreshCells({ force: true });\n    this.gridApi.setColumnDefs(this.gridOptions.columnDefs);\n    this.gridApi.setRowData(this.gridOptions.rowData);\n  }\n\n  /**\n   * Closes the current opened dialog\n   */\n  closeModal(data?: any): void {\n    this._modelsDialogRef.close(data);\n  }\n\n  /**\n   * SOCKET - Listen for prediction result when prediction is completed\n   */\n  initQuickPredictionSocket() {\n    this._socket.listen('predictionCompleted').subscribe(\n      (data: any) => {\n        if (data.status == 'failed') {\n          this._toaster.error(data.data.message, 'Models');\n          // this.predictionStarted = false;\n          this.predictionUploadResult = null;\n          this._spinner.stopSpinner();\n        }\n        if (data.predictionFileMetaData) {\n          this.predictionResult = data;\n          // this.predictionStarted = false;\n          // API call\n          this._models\n            .generatePreviewTable(this.predictionResult._id)\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(\n              (res) => {\n                if (res) {\n                  this.predictionPreviewData = [];\n                  let columnDefs: Array<any> = [];\n                  let firstRecord = res[0];\n                  for (let key in firstRecord) {\n                    if (firstRecord.hasOwnProperty(key)) {\n                      columnDefs.push({\n                        headerName: key,\n                        field: key,\n                        minWidth: 120,\n                      });\n                    }\n                  }\n                  this.predictionPreviewData = [...res];\n                  this.gridOptions = {\n                    headerHeight: 40,\n                    columnDefs: columnDefs,\n                    rowData: res,\n                    defaultColDef: { resizable: true },\n                  };\n                  this._toaster.success('Quick prediction completed successfully', 'Models');\n                  this._spinner.stopSpinner();\n                } else {\n                  this._spinner.stopSpinner();\n                  this._toaster.error('Cannot preview the prediction result', 'Models');\n                }\n              },\n              (err: any) => {\n                this._spinner.stopSpinner();\n                this._toaster.error(`Server Error - ${err.error.message}`, 'Models');\n              }\n            );\n        }\n      },\n      (err: any) => {\n        this._spinner.stopSpinner();\n        this._toaster.error(`Socket Error - ${err.error.message}`, 'Models');\n      }\n    );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('predictionCompleted');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<div *ngIf=\"selectedTask\">\n  <!-- {{taskData|json}} -->\n  <div *ngIf=\"selectedTask == 'eda_imputation'\">\n    <div class=\"\">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Feature</td>\n            <td class=\"bold\">Missing</td>\n            <td class=\"bold\">Data Type</td>\n            <td class=\"bold\">Imputation Strategy</td>\n            <td *ngIf=\"project.type != 'timeseries'\" class=\"bold\">Imputed Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData.eda_imputation\">\n            <td>{{ tdata.colName }}</td>\n            <td>{{ tdata.missing }}</td>\n            <td>{{ tdata.dataType }}</td>\n            <td>{{ tdata.imputationStrategy }}</td>\n            <td *ngIf=\"project.type !== 'timeseries'\">\n              <span>\n                <table class=\"table table-bordered\" *ngIf=\"isArrayData(tdata.fillValue)\">\n                  <tbody>\n                    <tr *ngFor=\"let fVal of tdata.fillValue; let i = index\">\n                      <td>{{ fVal.name }}</td>\n                      <td>\n                        {{ fVal['value']['name'] + ':' + fVal['value']['value'] }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n                <span *ngIf=\"!isArrayData(tdata.fillValue)\">{{ tdata.fillValue }}</span>\n              </span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'eda_outlier'\">\n    <div class=\"\">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Feature</td>\n            <td class=\"bold\">Outlier Detection Strategy</td>\n            <td class=\"bold\">Outlier Correction Strategy</td>\n            <td class=\"bold\">Outlier Count</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData.eda_outlier\">\n            <td>{{ tdata.colName }}</td>\n            <td>{{ tdata.outlierDetectionStrategy }}</td>\n            <td>{{ tdata.outlierCorrectionStrategy }}</td>\n            <td>{{ tdata.outlierCount }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'auto_feature_generate'\">\n    <div *ngIf=\"taskData.auto_feature_generate?.length\">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-responsive table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let item of taskData.auto_feature_generate[0] | keyvalue\" class=\"bold\">\n              {{ item.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData.auto_feature_generate\">\n            <td *ngFor=\"let data of tdata | keyvalue\">{{ data.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <br />\n    <div *ngIf=\"columnList['auto_feature_generate'].length\">\n      <label for=\"\">Column list ({{ columnList['auto_feature_generate'].length }} columns)</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let col of columnList['auto_feature_generate']\" class=\"bold\">\n              {{ col }}\n            </td>\n          </tr>\n        </thead>\n      </table>\n    </div>\n    <div *ngIf=\"shape['auto_feature_generate']\" class=\"mt-3\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td>Columns</td>\n            <td>Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['auto_feature_generate']['column'] }}</td>\n            <td>{{ shape['auto_feature_generate']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"method['auto_feature_generate']\">\n      <label>Input Features</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let col of method['auto_feature_generate']['Input feature']\" class=\"bold\">\n              {{ col }}\n            </td>\n          </tr>\n        </thead>\n      </table>\n    </div>\n    <br />\n    <div *ngIf=\"method['auto_feature_generate']\">\n      <label>Output Features</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let col of method['auto_feature_generate']['Output features']\" class=\"bold\">\n              {{ col }}\n            </td>\n          </tr>\n        </thead>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'date_component_generate'\">\n    <div *ngIf=\"taskData['date_component_generate'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let item of taskData['date_component_generate'][0] | keyvalue\" class=\"bold\">\n              {{ item.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['date_component_generate']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"columnList['date_component_generate'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['date_component_generate'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['date_component_generate']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"shape['date_component_generate']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['date_component_generate']['column'] }}</td>\n            <td>{{ shape['date_component_generate']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'feature_normalization'\">\n    <div *ngIf=\"taskData['feature_normalization'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let item of taskData['feature_normalization'][0] | keyvalue\" class=\"bold\">\n              {{ item.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['feature_normalization']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"columnList['feature_normalization'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['feature_normalization'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['feature_normalization']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"shape['feature_normalization']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['feature_normalization']['column'] }}</td>\n            <td>{{ shape['feature_normalization']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"method['feature_normalization']\">\n      <label>Normalization Method</label>\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td>{{ method['feature_normalization']['Method'] }}</td>\n          </tr>\n        </thead>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'categorical_encoding'\">\n    <div *ngIf=\"taskData['categorical_encoding'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['categorical_encoding'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['categorical_encoding']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <br />\n    <div *ngIf=\"method['categorical_encoding']\" class=\"  \">\n      <label>Method</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td>Feature</td>\n            <td>Encoding method</td>\n            <td>Encoded features</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of method['categorical_encoding']\">\n            <td>{{ tdata.Feature }}</td>\n            <td>{{ tdata.Encoding_method }}</td>\n            <td>{{ tdata.Encoded_Features }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <br />\n    <div *ngIf=\"columnList['categorical_encoding'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['categorical_encoding'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['categorical_encoding']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <br />\n    <div *ngIf=\"shape['categorical_encoding']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['categorical_encoding']['column'] }}</td>\n            <td>{{ shape['categorical_encoding']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'string_replacement'\">\n    <div *ngIf=\"taskData['string_replacement'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Feature Name</td>\n            <td class=\"bold\">From Text</td>\n            <td class=\"bold\">To Text</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['string_replacement']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'resampling'\">\n    <div *ngIf=\"taskData['resampling'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let item of taskData['resampling'][0] | keyvalue\" class=\"bold\">\n              {{ item.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['resampling']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"columnList['resampling'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['resampling'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['resampling']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"method['resampling']\" class=\"  \">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Method</td>\n            <td class=\"bold\">Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of method['resampling'] | keyvalue\">\n            <td>{{ item.key }}</td>\n            <td>{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"shape['resampling']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['resampling']['column'] }}</td>\n            <td>{{ shape['resampling']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'stationary_transformation'\">\n    <div *ngIf=\"taskData['stationary_transformation'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['stationary_transformation'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['stationary_transformation']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"columnList['stationary_transformation'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['stationary_transformation'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['stationary_transformation']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"method['stationary_transformation']\" class=\"  \">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Method</td>\n            <td class=\"bold\">Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let method of method['stationary_transformation'] | keyvalue\">\n            <td>{{ method.key }}</td>\n            <td>{{ method.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"shape['stationary_transformation']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['stationary_transformation']['column'] }}</td>\n            <td>{{ shape['stationary_transformation']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'text_cleaning'\">\n    <div *ngIf=\"taskData['text_cleaning'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['text_cleaning'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['text_cleaning']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"columnList['text_cleaning'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['text_cleaning'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['text_cleaning']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"method['text_cleaning']\" class=\"  \">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Feature</td>\n            <td class=\"bold\">Method</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of method['text_cleaning']\">\n            <td>{{ tdata.featureName }}</td>\n            <td>{{ tdata.method }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"shape['text_cleaning']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['text_cleaning']['column'] }}</td>\n            <td>{{ shape['text_cleaning']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'text_extraction'\">\n    <div *ngIf=\"taskData['text_extraction'].length\" class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['text_extraction'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['text_extraction']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"columnList['text_extraction'].length\" class=\"  \">\n      <label for=\"\">Column list( {{ columnList['text_extraction'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['text_extraction']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"method['text_extraction']\" class=\"  \">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Feature</td>\n            <td class=\"bold\">NLP Feature Extraction Method</td>\n            <td class=\"bold\">NLP Language</td>\n            <td class=\"bold\">Feature Count</td>\n            <td class=\"bold\">Strip Accents</td>\n            <td class=\"bold\">Decode Error</td>\n            <td class=\"bold\">NGram</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of method['text_extraction'] | keyvalue\">\n            <td *ngIf=\"item.value['colName']\">{{ item.value.colName }}</td>\n            <td *ngIf=\"item.value['nlpFeatureExtractionMethod']\">{{ item.value.nlpFeatureExtractionMethod }}</td>\n            <td *ngIf=\"item.value['nlpLanguage']\">{{ item.value.nlpLanguage }}</td>\n            <td *ngIf=\"item.value['nFeatureCount']\">{{ item.value.nFeatureCount }}</td>\n            <td *ngIf=\"item.value['stripAccents']\">{{ item.value.stripAccents }}</td>\n            <td *ngIf=\"item.value['decodeError']\">{{ item.value.decodeError }}</td>\n            <td *ngIf=\"item.value['nGram']\">{{ item.value.nGram }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"shape['text_extraction']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['text_extraction']['column'] }}</td>\n            <td>{{ shape['text_extraction']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'feature_scaling'\">\n    <div class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['feature_scaling'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['feature_scaling']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"method['feature_scaling']\" class=\"  \">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Method</td>\n            <td class=\"bold\">Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of method['feature_scaling'] | keyvalue\">\n            <td>{{ item.key }}</td>\n            <td>{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div class=\"  \" *ngIf=\"columnList['feature_scaling'].length\">\n      <label for=\"\">Column list( {{ columnList['feature_scaling'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['feature_scaling']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"shape['feature_scaling']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['feature_scaling']['column'] }}</td>\n            <td>{{ shape['feature_scaling']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'feature_selection'\">\n    <div class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['feature_selection'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['feature_selection']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div class=\"  \" *ngIf=\"columnList['feature_selection'].length\">\n      <label for=\"\">Column list( {{ columnList['feature_selection'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['feature_selection']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"shape['feature_selection']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['feature_selection']['column'] }}</td>\n            <td>{{ shape['feature_selection']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"method['feature_selection']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let method of method['feature_selection'] | keyvalue\" class=\"bold\">\n              {{ method.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td *ngFor=\"let item of method['feature_selection'] | keyvalue\">\n              {{ item.value }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'feature_decomposition'\">\n    <div class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label>\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td *ngFor=\"let data of taskData['feature_decomposition'][0] | keyvalue\" class=\"bold\">\n              {{ data.key }}\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['feature_decomposition']\">\n            <td *ngFor=\"let item of tdata | keyvalue\">{{ item.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div *ngIf=\"method['feature_decomposition']\" class=\"  \">\n      <table class=\"table table-bordered table-responsive\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Method</td>\n            <td class=\"bold\">Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let method of method['feature_decomposition'] | keyvalue\">\n            <td>{{ method.key }}</td>\n            <td>{{ method.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div class=\"  \" *ngIf=\"columnList['feature_decomposition'].length\">\n      <label for=\"\">Column list( {{ columnList['feature_decomposition'].length }} columns)</label>\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td *ngFor=\"let col of columnList['feature_decomposition']\" class=\"bold\">\n                {{ col }}\n              </td>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div *ngIf=\"shape['feature_decomposition']\">\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr>\n            <td class=\"bold\">Columns</td>\n            <td class=\"bold\">Rows</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ shape['feature_decomposition']['column'] }}</td>\n            <td>{{ shape['feature_decomposition']['row'] }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div *ngIf=\"selectedTask == 'sampling'\">\n    <div class=\"  \">\n      <label for=\"\" class=\"control-label\">Preview data</label> <br />\n      <div>\n        <table class=\"table table-bordered table-responsive\">\n          <thead class=\"bg-primary\">\n            <tr>\n              <td class=\"bold\">Sampling Method</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{{ taskData['sampling']['Sampling method'] }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <table class=\"table table-bordered\">\n        <thead class=\"bg-primary\">\n          <tr class=\"bold\">\n            <th>Class Name</th>\n            <th>Sampling Percentage</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tdata of taskData['sampling']['Sampling percentage']\">\n            <td>{{ tdata.colName }}</td>\n            <td>{{ tdata.value }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>","import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\n\n@Component({\n  selector: 'app-pipeline-expansion',\n  templateUrl: './pipeline-expansion.component.html',\n  styleUrls: ['./pipeline-expansion.component.scss'],\n})\nexport class PipelineExpansionComponent implements OnChanges {\n  @Input() pipelineDetails: any;\n  @Input() selectedTask: any;\n  project: any;\n  taskData: any = [];\n  columnList: any = [];\n  method: any = [];\n  shape: any = [];\n\n  constructor(private _localStorage: LocalStorageService) { }\n\n  ngOnChanges(): void {\n    this.project = this._localStorage.getItem('project');\n    this.taskData[this.selectedTask] = this.pipelineDetails['data'];\n    this.columnList[this.selectedTask] = this.pipelineDetails['columnList'];\n    this.method[this.selectedTask] = this.pipelineDetails['method'];\n    this.shape[this.selectedTask] = this.pipelineDetails['shape'];\n    // console.log(this.columnList[this.selectedTask].length);\n  }\n\n  /**\n   * Check whether input data is array or not\n   * @param {*} data\n   */\n  isArrayData(data: any): boolean {\n    return Array.isArray(data);\n  }\n}\n","<!-- HEADER (title) -->\n<h2 mat-dialog-title>PipeLine Steps</h2>\n<!-- BODY -->\n<mat-dialog-content>\n  <ul [hidden]=\"!task['data'].length\" *ngFor=\"let task of pipelineTask; let i = index\"\n    [ngClass]=\"timelineAlt ? 'timeline-alt mt-3' : 'timeline'\">\n    <li class=\"timeline-separator\" data-datetime=\"Task\">\n      <span class=\"pipe\">{{ task['parent'] }}</span>\n    </li>\n    <li *ngFor=\"let subTask of task['data']; let j = index\" class=\"mb-4\">\n      <div class=\"timeline-badge primary\">\n        <em class=\"fa fa-cog\"></em>\n      </div>\n      <div class=\"timeline-card\">\n        <div class=\"popover left\">\n          <h4 class=\"popover-header py-3\">{{ subTask.taskName }}</h4>\n          <div class=\"arrow\"></div>\n          <div class=\"popover-body p-4\">\n            <p>{{ subTask.description }}</p>\n            <div *ngIf=\"subTask.hasOwnProperty('task')\">\n              <div class=\"mt-3\" *ngIf=\"subTask.task == 'auto_feature_generate'\">\n                <mat-radio-group name=\"autofeature\" [(ngModel)]=\"afOperation\">&nbsp;\n                  <mat-radio-button class=\"mr-3\" [checked]=\"afOperation[0]\"\n                    *ngFor=\"let afOperation of subTask.afOperations\" value=\"{{ afOperation }}\">\n                    {{ afOperation | titlecase }}\n                  </mat-radio-button>\n                </mat-radio-group>\n              </div>\n              <mat-accordion [multi]=\"false\" *ngIf=\"subTask.preview == 'True'\">\n                <mat-expansion-panel class=\"mt-3 border border-primary shadow-none\" [expanded]=\"step === i + '' + j\"\n                  (opened)=\"getPipelineTaskDetails(i, subTask.task, j)\">\n                  <mat-expansion-panel-header>\n                    <mat-panel-title> View Details </mat-panel-title>\n                  </mat-expansion-panel-header>\n                  <app-pipeline-expansion *ngIf=\"pipelineDetails\" [selectedTask]=\"selectedTask\"\n                    [pipelineDetails]=\"pipelineDetails\"></app-pipeline-expansion>\n                </mat-expansion-panel>\n              </mat-accordion>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  </ul>\n</mat-dialog-content>\n<mat-dialog-actions class=\"justify-content-end mt-3 mb-auto\">\n  <!-- CANCEL -->\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n</mat-dialog-actions>","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { ModelsService } from '../models.service';\n\n@Component({\n  selector: 'app-pipeline',\n  templateUrl: './pipeline.component.html',\n  styleUrls: ['./pipeline.component.scss'],\n})\nexport class PipelineComponent implements OnInit {\n  unsubscribe$ = new Subject<boolean>();\n  pipelineTask: any = [];\n  timelineAlt: any = true;\n  selectedTask: any;\n  showPipelineDetails = {};\n  project: any;\n  taskData: any = {};\n  columnList: any = {};\n  method: any = {};\n  shape: any = {};\n  step: any;\n  pipelineDetails: any;\n  afOperation: any;\n\n  constructor(\n    private _localStorage: LocalStorageService,\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _toaster: ToastrService,\n    private _spinner: SpinnerService,\n    private _models: ModelsService\n  ) { }\n\n  ngOnInit(): void {\n    this.project = this._localStorage.getItem('project');\n    this.pipelineTask = this.dialogData.pipelineTask;\n    this.pipelineTask.forEach(element => {\n      let taskName = element.parent == 'Training' ? element.data : 'none';\n      if (taskName !== 'none') {\n        taskName.forEach(item => {\n          if (item.taskName == 'Auto Feature Generation') {\n            this.afOperation = item.afOperations[0];\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Fetches selected pipeline task details when clicked on view details\n   * @param index\n   * @param transformer\n   * @param j\n   */\n  getPipelineTaskDetails(i: any, transformer: any, j: any): void {\n    this.step = `${i}${j}`;\n    this.selectedTask = transformer;\n    let reqObj: any;\n    reqObj = {\n      transformer: transformer,\n      trainingId: this.dialogData.trainings[0]._id,\n      projectType: this.project.type,\n      indepVariable: this.dialogData.trainings[0].indepVariable,\n      filename: this.dialogData.trainings[0].metaInfo.fileName,\n      indexPath: this.dialogData.trainings[0].edaId.indexPath,\n    };\n    if (this.dialogData.originalFileWithEdaDetails.taExperimentId) {\n      reqObj.taExperimentId = this.dialogData.originalFileWithEdaDetails.taExperimentId;\n    }\n    if (transformer == 'sampling') {\n      (reqObj.samplingType = this.dialogData.trainings[0].sampling),\n        (reqObj.samplingPercentage = this.dialogData.trainings[0].samplingPercentage);\n    }\n    if (transformer == 'auto_feature_generate') {\n      reqObj.operation = this.afOperation;\n    }\n    if (this.project.type == 'predictive_modeling') {\n      reqObj.predictiveModelingInfo = this.dialogData.trainings[0].predictiveModelingInfo;\n    } else if (this.project.type == 'clustering') {\n      reqObj.clusteringInfo = this.dialogData.trainings[0].clusteringInfo;\n    }\n    // API call\n    this._models\n      .getPipelineDetails(this.dialogData.trainings[0]._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (resp) => {\n          if (resp) {\n            this.pipelineDetails = resp;\n          }\n          this._spinner.stopSpinner();\n        },\n        (err: any) => {\n          this._toaster.error(`${err.error.message || 'Server Error'}`, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<!-- CLASSIFICATION GRAPHS OPTIONS -->\n<div *ngIf=\"training?.algoType === 'classification'\" class=\"row graphs-list mt-4 mb-3 text-center\">\n  <!-- ROC-AUC SCORE -->\n  <div *ngIf=\"!project.useGPU && model.graphSupported?.rocAucScore == true\" class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('rocAucScore')\" matBadge\n      [matBadgeIcon]=\"allowedModelOptions.includes('rocAucScore') ? '' : 'PRO'\" matBadgeOverlap=\"false\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('rocAucScore') ? '' : 'text-muted disable-Btn'\">\n      ROC-AUC Score ({{ modelData?.rocScore ? (modelData.rocScore | number: '1.3-3') : '-' }})\n    </h6>\n    <button (click)=\"openGraphDialog('rocauc', training, model, activeTabName)\" matTooltip=\"View graph\"\n      *ngIf=\"modelData?.rocScore\" mat-icon-button\n      [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions.includes('rocAucScore')\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('rocAucScore') ? '' : 'disable-Btn'\">\n      <mat-icon>show_chart</mat-icon>\n    </button>\n    <h5 *ngIf=\"!modelData?.rocScore\">NA</h5>\n  </div>\n  <!-- LIFT & GAIN -->\n  <div *ngIf=\"!project.useGPU && model.graphSupported?.liftGain == true\" class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('liftAndGain')\" matBadge\n      [matBadgeIcon]=\"allowedModelOptions.includes('liftAndGain') ? '' : 'PRO'\" matBadgeOverlap=\"false\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('liftAndGain') ? '' : 'text-muted disable-Btn'\">\n      Lift & Gain</h6>\n    <button (click)=\"openGraphDialog('liftGain', training, model, activeTabName)\" matTooltip=\"View graph\"\n      mat-icon-button\n      [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions.includes('liftAndGain')\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('liftAndGain') ? '' : 'disable-Btn'\">\n      <mat-icon>show_chart</mat-icon>\n    </button>\n  </div>\n  <!-- FEATURE IMPACT -->\n  <div *ngIf=\"activeTabName !== 'Scoring Result'\" [hidden]=\"activeTabName === 'Hold Out'\" class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('featureImpact')\">\n      Feature Impact\n    </h6>\n    <button (click)=\"openGraphDialog('featureImpact', training, model, activeTabName)\" matTooltip=\"View graph\"\n      mat-icon-button>\n      <mat-icon>show_chart</mat-icon>\n    </button>\n  </div>\n  <!-- PR CURVE -->\n  <div *ngIf=\"!project.useGPU \n  && model.graphSupported?.prCurve == true\" class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('precisionRecall')\" matBadge\n      [matBadgeIcon]=\"allowedModelOptions.includes('prCurve') ? '' : 'PRO'\" matBadgeOverlap=\"false\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('prCurve') ? '' : 'text-muted disable-Btn'\">\n      PR Curve</h6>\n    <button (click)=\"openGraphDialog('prCurve', training, model, activeTabName)\" matTooltip=\"View graph\" mat-icon-button\n      [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions.includes('prCurve')\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('prCurve') ? '' : 'disable-Btn'\">\n      <mat-icon>show_chart</mat-icon>\n    </button>\n  </div>\n  <!-- CONFUSION MATRIX -->\n  <div class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('confusionMatrix')\">\n      Confusion Matrix\n    </h6>\n    <button (click)=\"openGraphDialog('confusionMatrix', training, model, activeTabName)\" matTooltip=\"View graph\"\n      mat-icon-button>\n      <mat-icon>show_chart</mat-icon>\n    </button>\n  </div>\n  <!-- ANALYSIS REPORT -->\n  <div class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('analysisReport')\">\n      Analysis Report\n    </h6>\n    <button (click)=\"openGraphDialog('analysis', training, model, activeTabName)\" matTooltip=\"View report\"\n      mat-icon-button>\n      <mat-icon>table_chart</mat-icon>\n    </button>\n  </div>\n  <!-- CLASSIFICATION REPORT -->\n  <div class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('classificationReport')\">\n      Classification Report\n    </h6>\n    <button (click)=\"openGraphDialog('classificationReport', training, model, activeTabName)\" matTooltip=\"View report\"\n      mat-icon-button>\n      <mat-icon>table_chart</mat-icon>\n    </button>\n  </div>\n  <!-- LIME REPORT -->\n  <div class=\"col border-right\" *ngIf=\"model.graphSupported?.limeReport == true\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('limeReport')\" matBadge\n      [matBadgeIcon]=\"allowedModelOptions.includes('limeReport') ? '' : 'PRO'\" matBadgeOverlap=\"false\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' && (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('limeReport') ? '' : 'text-muted disable-Btn'\">\n      Lime Report</h6>\n    <button (click)=\"openGraphDialog('limeReport', training, model, activeTabName, 'models_page')\"\n      matTooltip=\"View report\" mat-icon-button\n      [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions.includes('limeReport')\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('limeReport') ? '' : 'disable-Btn'\">\n      <mat-icon>table_chart</mat-icon>\n    </button>\n  </div>\n  <!-- MATHEW COEFF -->\n  <div class=\"col\" *ngIf=\"model?.graphSupported?.mathewsCoeff == true\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('mathewCoeff')\">\n      Mathew's Coeff.\n    </h6>\n    <h5 *ngIf=\"modelData?.matCoeff\">\n      {{ modelData?.matCoeff | number: '1.3-3' }}\n    </h5>\n    <h5 *ngIf=\"!modelData?.matCoeff\">NA</h5>\n  </div>\n</div>\n\n<!-- REGRESSION GRAPH OPTIONS -->\n<div *ngIf=\"training?.algoType === 'regression' \" class=\"row graphs-list my-4 text-center\">\n  <!-- R SQUARED -->\n  <div class=\"col border-right\" *ngIf=\"modelData?.rSquared\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('rSquared')\">R Squared</h6>\n    <h5>\n      {{ modelData?.rSquared | number: '1.3-3' }}\n    </h5>\n  </div>\n  <!-- ADJUSTED R SQUARED -->\n  <div class=\"col border-right\" *ngIf=\"modelData?.adjustedRsq\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('adjustedRsquared')\">\n      Adjusted R Squared\n    </h6>\n    <h5>\n      {{ modelData?.adjustedRsq | number: '1.3-3' }}\n    </h5>\n  </div>\n  <!-- TARGET VARIABLE -->\n  <div class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('targetFeature')\">\n      Target Variable\n    </h6>\n    <h5>\n      {{ training.depVariable ? training.depVariable : 'NA' }}\n    </h5>\n  </div>\n  <!-- EXPLAINED VARIANCE -->\n  <div class=\"col border-right\" *ngIf=\"modelData?.varianceIFactor\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('explainedVarianceScore')\">\n      Explained Variance Score\n    </h6>\n    <h5>\n      {{ modelData?.varianceIFactor | number: '1.3-3' }}\n    </h5>\n  </div>\n  <!-- REGRESSION LINE -->\n  <div class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('regressionLine')\">\n      Regression Line\n    </h6>\n    <button (click)=\"openGraphDialog('regressionLine', training, model, activeTabName)\" matTooltip=\"View graph\"\n      mat-icon-button>\n      <mat-icon>show_chart</mat-icon>\n    </button>\n  </div>\n  <!-- FEATURE IMPACT -->\n  <div *ngIf=\"activeTabName !== 'Scoring Result'\" [hidden]=\"activeTabName === 'Hold Out'\" class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('featureImpact')\">\n      Feature Impact\n    </h6>\n    <button (click)=\"openGraphDialog('featureImpact', training, model, activeTabName)\" matTooltip=\"View graph\"\n      mat-icon-button>\n      <mat-icon>show_chart</mat-icon>\n    </button>\n  </div>\n  <!-- ANALYSIS REPORT -->\n  <div class=\"col border-right\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('analysisReport')\">\n      Analysis Report\n    </h6>\n    <button (click)=\"openGraphDialog('analysis', training, model, activeTabName)\" matTooltip=\"View report\"\n      mat-icon-button>\n      <mat-icon>table_chart</mat-icon>\n    </button>\n  </div>\n  <!-- LIME REPORT -->\n  <div class=\"col\" *ngIf=\"model.graphSupported?.limeReport == true\">\n    <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('limeReport')\" matBadge\n      [matBadgeIcon]=\"allowedModelOptions.includes('limeReport') ? '' : 'PRO'\" matBadgeOverlap=\"false\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('limeReport') ? '' : 'text-muted disable-Btn'\">\n      Lime Report</h6>\n    <button (click)=\"openGraphDialog('limeReport', training, model, activeTabName)\" matTooltip=\"View report\"\n      mat-icon-button\n      [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions.includes('limeReport')\"\n      [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions.includes('limeReport') ? '' : 'disable-Btn'\">\n      <mat-icon>table_chart</mat-icon>\n    </button>\n  </div>\n</div>","import { MatDialog } from '@angular/material/dialog';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { Component, Input, OnInit, SimpleChanges } from '@angular/core';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { GraphsDialogHandlerComponent } from '../graphs-dialog-handler/graphs-dialog-handler.component';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-expansion-graphs',\n  templateUrl: './expansion-graphs.component.html',\n  styleUrls: ['./expansion-graphs.component.scss'],\n})\nexport class ExpansionGraphsComponent implements OnInit {\n  @Input() training: any;\n  @Input() model: any;\n  @Input() activeTabName: string;\n  @Input() originalFileWithEdaDetails: string;\n  @Input() trainings: any;\n\n  project: any;\n  modelData: any;\n  // restriction variables\n  appType: string = environment.appType;\n  allowedModelOptions: Array<any> = null;\n  user: any;\n  graphSupported: any;\n  constructor(\n    public _utils: UtilsService,\n    private _localStorage: LocalStorageService,\n    private _dialog: MatDialog\n  ) { }\n\n  ngOnInit(): void {\n    //fetching the restriction details from localstorage user.\n    this.user = this._localStorage.getItem(\"user\");\n    this.allowedModelOptions = this.user?.psFeatures?.allowedFeaturesList || [];\n  }\n\n  ngOnChanges(): void {\n    this.project = this._localStorage.getItem('project');\n    // Use the modelData to render the details as per the selected tab name\n    if (this.model.modelMetaData.dev && this.activeTabName === 'Development') {\n      this.modelData = this.model.modelMetaData.dev;\n    } else if (this.model.modelMetaData.holdout && this.activeTabName === 'Hold Out') {\n      this.modelData = this.model.modelMetaData.holdout;\n    } else if (this.activeTabName === 'Scoring Result') {\n      this.modelData = this.model.modelMetaData.scoringMetrics;\n    }\n  }\n\n  /**\n   * Handles the dynamic graph dialog as per the type and opens it\n   * @param type\n   * @param trainingInfo\n   * @param modelInfo\n   */\n  openGraphDialog(\n    type: string,\n    trainingInfo?: any,\n    modelInfo?: any,\n    tab?: string,\n    predMode?: string\n  ): void {\n    this._dialog\n      .open(GraphsDialogHandlerComponent, {\n        minWidth: type === 'featureImpact' || type === 'analysis' ? '80vw' : '60vw',\n        maxWidth: type === 'limeReport' ? '60vw' : '0',\n        data: {\n          type: type,\n          trainingInfo: trainingInfo,\n          modelInfo: modelInfo,\n          tab: tab,\n          trainings: this.trainings,\n          originalFileWithEdaDetails: this.originalFileWithEdaDetails,\n          predMode: predMode,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => { });\n  }\n}\n","<mat-card class=\"custom-card\">\n  <mat-card-content>\n    <!-- (selectedIndexChange)=\"tabChanged($event)\" -->\n    <mat-tab-group (selectedTabChange)=\"showGraphsSection($event)\" dynamicHeight mat-align-tabs=\"start\">\n      <!-- HOLD OUT -->\n      <mat-tab [matTooltip]=\"_utils.getTootip('holdout')\" *ngIf=\"model.modelMetaData.holdout\" label=\"Hold Out\" active>\n        <!-- TAB LABEL -->\n        <ng-template mat-tab-label>\n          <mat-label [matTooltip]=\"_utils.getTootip('holdout')\">Hold Out</mat-label>\n        </ng-template>\n        <div *ngIf=\"model.modelMetaData.holdout\" class=\"row mx-auto my-4\">\n          <!-- PIE AND SLIDER -->\n          <div class=\"col-md-6 text-center border-right\">\n            <!-- LABEL -->\n            <h6 *ngIf=\"training.algoType === 'regression'\" [matTooltip]=\"_utils.getTootip('modelScore')\">\n              Model Score\n            </h6>\n            <h6 *ngIf=\"training.algoType === 'classification'\" [matTooltip]=\"_utils.getTootip('accuracy')\">\n              Accuracy\n            </h6>\n            <!-- PIE -->\n            <div class=\"easypie-chart mt-3\" easypiechart [options]=\"pieOptions1\"\n              percent=\"{{ model.modelMetaData.holdout.testScore * 100 | number: '1.2-2' }}\">\n              <span>{{ model.modelMetaData.holdout.testScore * 100 | number: '1.2-2' }}%</span>\n            </div>\n          </div>\n          <!-- CAROUSEL -->\n          <div class=\"col-md-6 text-center\">\n            <h6>Losses</h6>\n            <carousel interval=\"0\" [noWrap]=\"false\">\n              <slide *ngFor=\"let loss of model.modelMetaData.holdout.losses; let index = index\" [active]=\"loss.active\">\n                <div class=\"mt-5\" [matTooltip]=\"_utils.getTootip(loss?.name)\">\n                  <mat-chip-list class=\"d-flex justify-content-center\">\n                    <mat-chip [style.font-size.px]=\"18\" class=\"font-weight-bold p-4\">{{\n                      loss.value | number: '1.3-3'\n                      }}</mat-chip>\n                  </mat-chip-list>\n                  <h6 class=\"mt-3\">{{ loss.name }}</h6>\n                </div>\n              </slide>\n            </carousel>\n          </div>\n        </div>\n      </mat-tab>\n      <!-- DEVELOPMENT -->\n      <mat-tab [matTooltip]=\"_utils.getTootip('development')\" *ngIf=\"model.modelMetaData.dev\" label=\"Development\">\n        <!-- TAB LABEL -->\n        <ng-template mat-tab-label>\n          <span [matTooltip]=\"_utils.getTootip('development')\">Development</span>\n        </ng-template>\n        <div class=\"row mx-auto my-4\">\n          <!-- PIE AND SLIDER -->\n          <div class=\"col-md-6 text-center border-right\">\n            <!-- LABEL -->\n            <h6 *ngIf=\"training.algoType === 'regression'\" [matTooltip]=\"_utils.getTootip('modelScore')\">\n              Model Score\n            </h6>\n            <h6 *ngIf=\"training.algoType === 'classification'\" [matTooltip]=\"_utils.getTootip('accuracy')\">\n              Accuracy\n            </h6>\n            <!-- PIE -->\n            <div class=\"easypie-chart mt-3\" easypiechart [options]=\"pieOptions1\"\n              percent=\"{{ model.modelMetaData.dev.testScore * 100 | number: '1.2-2' }}\">\n              <span>{{ model.modelMetaData.dev.testScore * 100 | number: '1.2-2' }}%</span>\n            </div>\n          </div>\n          <!-- CAROUSEL -->\n          <div class=\"col-md-6 text-center\">\n            <h6>Losses</h6>\n            <carousel interval=\"0\" [noWrap]=\"false\">\n              <slide *ngFor=\"let loss of model.modelMetaData.dev.losses; let index = index\" [active]=\"loss.active\">\n                <div class=\"mt-5\" [matTooltip]=\"_utils.getTootip(loss?.name)\">\n                  <mat-chip-list class=\"d-flex justify-content-center\">\n                    <mat-chip [style.font-size.px]=\"18\" class=\"font-weight-bold p-4\">{{\n                      loss.value | number: '1.3-3'\n                      }}</mat-chip>\n                  </mat-chip-list>\n                  <h6 class=\"mt-3\">{{ loss.name }}</h6>\n                </div>\n              </slide>\n            </carousel>\n          </div>\n        </div>\n      </mat-tab>\n      <!-- CROSS VALIDATION -->\n      <mat-tab *ngIf=\"\n         model.modelMetaData.dev && (model.modelMetaData.algoName.split('-')[0] !==\n            'Ridge Classification with Cross Validation' ||\n          !project.useGPU ||\n          !model.modelMetaData.isMultilabel\n         )\"\n        [disabled]=\"appType === 'saas' && !user?.roles?.includes('super_admin') && !user?.roles?.includes('admin') && user?.planType === 'basic' && !allowedModelOptions?.includes('crossValidation')\">\n        <!-- TAB LABEL -->\n        <ng-template mat-tab-label>\n          <mat-label matBadge [matBadgeIcon]=badgeText\n            matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('crossValidation')\"\n            [ngClass]=\"(appType === 'enterprise') || (appType === 'saas' &&  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) || allowedModelOptions?.includes('crossValidation') ? '' : 'disable-Btn'\">\n            Cross Validation</mat-label>\n        </ng-template>\n        <div class=\"row mx-auto my-4 align-items-center\">\n          <mat-spinner class=\"spinner\" diameter=\"50\" *ngIf=\"showSpinner\"> </mat-spinner>\n          <!-- PIE and BUTTON (run cv) -->\n          <div class=\"col-md-7 border-right\">\n            <div class=\"col-md-12\">\n              <h5>Validation strategy</h5>\n              <!-- BUTTON GROUPS -->\n              <mat-button-toggle-group class=\"my-2\" name=\"validation-strategy\"\n                [(ngModel)]=\"validationStrategy.technique\">\n                <mat-button-toggle value=\"kFold\" [matTooltip]=\"_utils.getTootip('kFold')\">kFold</mat-button-toggle>\n                <mat-button-toggle value=\"stratifiedKFold\" *ngIf=\"algoType == 'classification' && isMultilabel == false\"\n                  [matTooltip]=\"_utils.getTootip('stratifiedKFold')\">\n                  stratifiedKFold</mat-button-toggle>\n              </mat-button-toggle-group>\n\n              <mat-form-field appearance=\"outline\" class=\"my-2\">\n                <mat-label>Select Metrics</mat-label>\n                <mat-select [(ngModel)]=\"metric\">\n                  <mat-option *ngFor=\"let type of metrics\" [value]=\"type.value\">\n                    {{ type.Name }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n              <!-- SLIDER-1 -->\n              <div class=\"h5\">\n                <label>Select the number of n_split: {{ validationStrategy.nSplit }} split</label>\n                <br />\n                <mat-slider thumbLabel class=\"\" color=\"primary\" min=\"2\" max=\"10\" step=\"1\"\n                  [(ngModel)]=\"validationStrategy.nSplit\"></mat-slider>\n              </div>\n              <!-- SPLITS -->\n              <div class=\"d-flex border border-primary\">\n                <div *ngFor=\"let kf of getArray(validationStrategy.nSplit); last as isLast; index as i\"\n                  [class]=\"isLast ? 'blocks last-block' : 'blocks'\">\n                  {{ i + 1 }}\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-12 text-center mt-3\">\n              <button [disabled]=\"model.modelMetaData.cvData?.status === 'running' ? true : false\" mat-stroked-button\n                type=\"submit\" (click)=\"runCV(training, model)\">\n                Run CV\n              </button>\n            </div>\n          </div>\n          <!-- BUTTON (learning curve plot) -->\n          <div class=\"col-md-5 border-left text-center\" *ngIf=\"model.modelMetaData.cvData?.status === 'done'\">\n            <div class=\"col-md-12 mb-5\">\n              <!-- PIE -->\n              <div *ngIf=\"model.modelMetaData.cvData?.status === 'done' && training.algoType === 'classification'\">\n                <h6>Average {{metric}}</h6><br>\n                <div class=\"easypie-chart mt-3\" easypiechart [options]=\"pieOptions1\" percent=\"{{\n                                              model.modelMetaData.cvData?.cvScore < 0\n                                                ? 0\n                                                : model.modelMetaData.cvData.cvScore * 100\n                                            }}\">\n                  <span>{{\n                    model.modelMetaData.cvData?.cvScore < 0 ? 0 : (model.modelMetaData.cvData?.cvScore * 100 |\n                      number: '1.2-2' ) }}%</span>\n                </div>\n              </div>\n              <div *ngIf=\"model.modelMetaData.cvData?.status === 'done' && training.algoType === 'regression'\">\n                <h6>Average {{metricdata[0].Name}}</h6><br>\n                <div class=\"h1 m0 text-bold\">\n                  {{model.modelMetaData.cvData?.cvScore | number: '1.3-3'}}\n                </div>\n              </div>\n            </div>\n            <hr>\n            <div class=\"col-md-12 mt-5\">\n              <h6 [style.color]=\"'#08509d'\" [matTooltip]=\"_utils.getTootip('learningCurve')\">\n                Learning Curve\n              </h6>\n              <button (click)=\"openGraphDialog('learningCurve', training, model)\" matTooltip=\"View graph\"\n                mat-icon-button>\n                <mat-icon>show_chart</mat-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n      </mat-tab>\n      <!-- SCORING RESULT -->\n      <mat-tab label=\"Scoring Result\">\n        <!-- TAB LABEL -->\n        <ng-template mat-tab-label>\n          <mat-label [matTooltip]=\"_utils.getTootip('scoringResult')\">Scoring Result</mat-label>\n        </ng-template>\n        <!-- BUTTON (perform scoring) -->\n        <button *ngIf=\"!model.modelMetaData.scoringMetrics\" class=\"mx-auto my-4\" mat-stroked-button\n          (click)=\"doScoring(training, model)\">\n          Perform Scoring\n        </button>\n        <div *ngIf=\"model.modelMetaData.scoringMetrics\" class=\"row mx-auto my-4 align-items-center\">\n          <!-- PIE AND SLIDER -->\n          <div class=\"col-md-4 text-center\">\n            <!-- LABEL -->\n            <h6 *ngIf=\"training.algoType === 'regression'\" [matTooltip]=\"_utils.getTootip('modelScore')\">\n              Model Score\n            </h6>\n            <h6 *ngIf=\"training.algoType === 'classification'\" [matTooltip]=\"_utils.getTootip('accuracy')\">\n              Accuracy\n            </h6>\n            <!-- PIE -->\n            <div class=\"easypie-chart mt-3\" easypiechart [options]=\"pieOptions1\"\n              percent=\"{{ model.modelMetaData.scoringMetrics?.testScore * 100 | number: '1.2-2' }}\">\n              <span>{{ model.modelMetaData.scoringMetrics?.testScore * 100 | number: '1.2-2' }}%</span>\n            </div>\n          </div>\n          <!-- CAROUSEL -->\n          <div class=\"col-md-4 text-center border-left border-right\">\n            <h6>Losses</h6>\n            <carousel interval=\"0\" [noWrap]=\"false\">\n              <slide *ngFor=\"let loss of model.modelMetaData.scoringMetrics?.losses; let index = index\"\n                [active]=\"loss.active\">\n                <div class=\"mt-5\" [matTooltip]=\"_utils.getTootip(loss?.name)\">\n                  <mat-chip-list class=\"d-flex justify-content-center\">\n                    <mat-chip [style.font-size.px]=\"18\" class=\"font-weight-bold p-4\">{{\n                      loss.value | number: '1.3-3'\n                      }}</mat-chip>\n                  </mat-chip-list>\n                  <h6 class=\"mt-3\">{{ loss.name }}</h6>\n                </div>\n              </slide>\n            </carousel>\n          </div>\n          <!-- BUTTON (recalculate) -->\n          <div class=\"col-md-4 text-center\">\n            <button mat-stroked-button type=\"submit\" (click)=\"doScoring(training, model)\">\n              Recalculate Scoring\n            </button>\n          </div>\n        </div>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card-content>\n</mat-card>\n<mat-divider *ngIf=\"showGraphs\"></mat-divider>\n<!-- GRAPHS SECTION -->\n<app-expansion-graphs *ngIf=\"showGraphs\" [training]=\"training\" [model]=\"model\" [activeTabName]=\"activeTabName\"\n  [trainings]=\"trainings\" [originalFileWithEdaDetails]=\"originalFileWithEdaDetails\"></app-expansion-graphs>","import { LocalStorageService } from './../../../shared/local-storage.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { ModelsService } from './../models.service';\nimport { SpinnerService } from './../../../shared/spinner.service';\nimport { ColorsService } from './../../../shared/colors/colors.service';\nimport { UtilsService } from './../../../shared/utils.service';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { GraphsDialogHandlerComponent } from '../graphs-dialog-handler/graphs-dialog-handler.component';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-predictive-expansion',\n  templateUrl: './predictive-expansion.component.html',\n  styleUrls: ['./predictive-expansion.component.scss'],\n})\nexport class PredictiveExpansionComponent implements OnInit, OnDestroy {\n  @Input() training: any;\n  @Input() model: any;\n  @Input() originalFileWithEdaDetails: any;\n  @Input() trainings: any;\n  @Output() updateTrainingModels = new EventEmitter<any>();\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  ALGORITHMS_ARRAY: Array<any>;\n\n  /** EasyPie setting */\n  pieOptions1: any = {\n    animate: {\n      duration: 1000,\n      enabled: true,\n    },\n    barColor: this._colors.byName('info'),\n    trackColor: '#f2f2f2',\n    scaleColor: false,\n    lineWidth: 8,\n    size: 150,\n    lineCap: 'round',\n  };\n\n  /** Variables with default values */\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  showGraphs: boolean = true;\n  activeTabName: string = 'Development';\n  algoType: string;\n  project: any;\n  metric: any;\n  isMultilabel: boolean = false;\n  showSpinner: boolean = false;\n  regressionMetrics: any = [];\n  classificationMetrics: any = [];\n  validationStrategy: any = {\n    technique: 'kFold',\n    nSplit: 5,\n  };\n  metrics: any;\n  metricdata: any[];\n  // restriction variables\n  appType: string = environment.appType;\n  allowedModelOptions: Array<any> = null;\n  user: any;\n  graphSupported: any;\n  badgeText:string = '';\n\n  constructor(\n    public _utils: UtilsService,\n    private _colors: ColorsService,\n    private _spinner: SpinnerService,\n    private _models: ModelsService,\n    private _toaster: ToastrService,\n    private _socket: SocketIoService,\n    private _dialog: MatDialog,\n    private _localStorage: LocalStorageService\n  ) {\n    this.regressionMetrics = [\n      {\n        name: 'R Squared',\n        value: 'r2',\n        Name: 'R-Squared',\n      },\n      {\n        name: 'MAE',\n        value: 'neg_mean_absolute_error',\n        Name: 'Mean absolute error',\n      },\n      {\n        name: 'MSE',\n        value: 'neg_mean_squared_error',\n        Name: 'Mean squared error',\n      },\n      {\n        name: 'RMSE',\n        value: 'neg_root_mean_squared_error',\n        Name: 'Root mean squared error',\n      },\n    ];\n    this.classificationMetrics = [\n      {\n        Name: 'Acurracy',\n        value: 'accuracy',\n      },\n      {\n        Name: 'f1 Score',\n        value: 'f1',\n      },\n      {\n        Name: 'Precision',\n        value: 'precision',\n      },\n      {\n        Name: 'Recall',\n        value: 'recall',\n      },\n    ];\n  }\n\n  async ngOnInit(): Promise<any> {\n    this.ALGORITHMS_ARRAY = await this._utils.getAlgorithms();\n    this.graphListSupported();\n    this.initCvSocket();\n    let algo: any = this.model.modelMetaData.algoName.split('-');\n    this.project = this._localStorage.getItem('project');\n    //fetching the restriction details from localstorage user.\n    this.user = this._localStorage.getItem('user');\n    this.allowedModelOptions = this.user?.psFeatures?.allowedFeaturesList || [];\n    this.allowedModelOptions.includes('crossValidation') ? this.badgeText = '' : this.badgeText = 'PRO';\n    this.algoType = this.ALGORITHMS_ARRAY.filter((a: any) => a.name === algo[0])[0]?.type;\n    this.isMultilabel = this.training.isMultilabel;\n    if (this.model.modelMetaData.holdout) {\n      this.activeTabName = 'Hold Out';\n    }\n    if (this.algoType == 'regression') {\n      this.metrics = this.regressionMetrics;\n      this.metric = 'neg_mean_squared_error';\n      this.validationStrategy.technique = 'kFold';\n      if (this.model.modelMetaData.cvData?.status === 'done') {\n        this.metricdata = [];\n        this.metricdata = this.regressionMetrics.filter((item) => {\n          return item.value == this.model.validationStrategy.metric;\n        });\n      }\n    } else if (this.algoType == 'classification') {\n      this.metrics = this.classificationMetrics;\n      if (this.isMultilabel) {\n        this.metrics = this.classificationMetrics.filter((item) => {\n          return item.value == 'accuracy' || item.value == 'f1';\n        });\n        this.validationStrategy.technique = 'kFold';\n      } else {\n        this.validationStrategy.technique = 'stratifiedKFold';\n      }\n      this.metric = 'accuracy';\n    }\n    if (this.model.validationStrategy) {\n      this.metric = this.model.validationStrategy.metric;\n      this.validationStrategy.technique = this.model.validationStrategy.technique;\n      this.validationStrategy.nSplit = this.model.validationStrategy.nSplit;\n    }\n  }\n\n  graphListSupported() {\n    let string = this.model.modelMetaData.algoName.toLowerCase();\n    let algoName = [];\n    let subString1 = 'bagging';\n    let subString2 = 'boosting';\n    if (string.includes(subString1)) {\n      if (this.training.algoType == 'classification') {\n        algoName = ['Bagging Classifier'];\n      } else if (this.training.algoType === 'regression') {\n        algoName = ['Bagging Regressor'];\n      }\n      this.graphSupported = this._utils.getAlgorithmSupported(algoName, this.training, string);\n      this.model['graphSupported'] = this.graphSupported;\n    } else if (string.includes(subString2)) {\n      if (this.training.algoType == 'classification') {\n        algoName = ['Boosting Classifier'];\n      } else if (this.training.algoType === 'regression') {\n        algoName = ['Boosting Regressor'];\n      }\n      this.graphSupported = this._utils.getAlgorithmSupported(algoName, this.training, string);\n      this.model['graphSupported'] = this.graphSupported;\n    } else {\n      let modelName = this.model.modelMetaData.algoName;\n      modelName = modelName.split('-', 1);\n      this.graphSupported = this._utils.getAlgorithmSupported(modelName, this.training, string);\n      this.model['graphSupported'] = this.graphSupported;\n    }\n  }\n  /**\n   * Function which triggers hold out API and fetchs hold out reuslt\n   * @param {*} training training details\n   * @param {*} modelInfo model details\n   */\n  doHoldOut(training: any, modelInfo: any): void {\n    this._spinner.showSpinner();\n    let reqObj: any = {\n      algoName: modelInfo.modelMetaData.algoName,\n      algoType: this.algoType,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      reTrainFileId: modelInfo.modelMetaData.reTrainFileId,\n      modelFilePath: modelInfo.modelMetaData.modelPath,\n      edaSummary: this.originalFileWithEdaDetails.edaId.edaSummary,\n    };\n    if (training.logTransformationColumns) {\n      reqObj.logTransformationColumns = training.logTransformationColumns;\n      reqObj.scalarValue = training.scalarValue;\n    }\n\n    // API call\n    this._models\n      .performHoldOut(training._id, modelInfo._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.trainings[0].models = this.trainings[0].models.map((data: any) => {\n              if (data._id === res._id) {\n                data = res;\n              }\n              return data;\n            });\n            this.updateTrainingModels.emit(this.trainings[0].models);\n            this._toaster.success('Hold out operation successfully completed', 'Models');\n            this._spinner.stopSpinner();\n          } else {\n            this._toaster.error('Cannot generate distribution graph', 'Models');\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(`Server Error - ${err.message}`, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Function which triggers API to get CV score\n   * @param {*} training training details\n   * @param {*} modelInfo model details\n   */\n  runCV(training: any, modelInfo: any): void {\n    this.showSpinner = true;\n    this._toaster.info('CV score calculation started', 'Models');\n    modelInfo.modelMetaData.cvData = {};\n    modelInfo.modelMetaData.cvData.status = 'running';\n    let edaId;\n    if (modelInfo.edaId !== null) {\n      edaId = modelInfo.edaId;\n    } else {\n      edaId = training.edaId._id;\n    }\n    // API call\n    this._models\n      .runCv(\n        training._id,\n        modelInfo._id,\n        modelInfo.modelMetaData.algoName,\n        this.algoType,\n        this.validationStrategy.technique,\n        this.validationStrategy.nSplit,\n        this.metric,\n        edaId,\n        'running'\n      )\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (!res) {\n            this._toaster.error('Cannot calculate CV score', 'Models');\n            this.showSpinner = false;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(`Server Error - ${err.message}`, 'Models');\n          this.showSpinner = false;\n        }\n      );\n  }\n\n  /**\n   * Function which triggers scoring API, to get scoring result\n   * @param {*} training training details\n   * @param {*} modelInfo model details\n   */\n  doScoring(training: any, modelInfo: any): void {\n    this._spinner.showSpinner();\n    // checkThemeColor();\n    let reqObj: any = {\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      algoName: modelInfo.modelMetaData.algoName,\n      algoType: this.algoType,\n      modelFilePath: modelInfo.modelMetaData.modelPath,\n      transformedDatasetPath: modelInfo.transformedDatasetPath,\n      reTrainFileId: modelInfo.modelMetaData.reTrainFileId,\n    };\n    if (modelInfo.edaId !== null) {\n      reqObj.edaId = modelInfo.edaId;\n    } else {\n      reqObj.edaId = this.trainings[0].edaId._id;\n    }\n    if (this.trainings[0].logTransformationColumns) {\n      reqObj.logTransformationColumns = this.trainings[0].logTransformationColumns;\n      reqObj.scalarValue = this.trainings[0].scalarValue;\n    }\n    // API call\n    this._models\n      .performScoring(training._id, modelInfo._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.trainings[0].models = this.trainings[0].models.map((data: any) => {\n              if (data._id === res._id) {\n                data = res;\n              }\n              return data;\n            });\n            this.updateTrainingModels.emit(this.trainings[0].models);\n            this._toaster.success('Scoring result calculated successfully', 'Models');\n            this._spinner.stopSpinner();\n          } else {\n            this._toaster.error('Cannot calculate scoring result', 'Models');\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: any) => {\n          this._toaster.error(err.error.message, 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Handles the dynamic graph dialog as per the type and opens it\n   * @param type\n   * @param trainingInfo\n   * @param modelInfo\n   */\n  openGraphDialog(type: string, trainingInfo?: any, modelInfo?: any): void {\n    this._dialog\n      .open(GraphsDialogHandlerComponent, {\n        minWidth: type === 'learningCurve' ? '50vw' : '80vw',\n        data: {\n          type: type,\n          trainingInfo: trainingInfo,\n          modelInfo: modelInfo,\n          trainings: this.trainings,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => { });\n  }\n\n  /**\n   * Renders the graphs section view as per the selected tab\n   * @param event\n   */\n  showGraphsSection(event: any): void {\n    if (event.tab.textLabel === 'Development') {\n      this.showGraphs = true;\n    } else if (event.tab.textLabel === 'Hold Out') {\n      this.model.modelMetaData.holdout ? (this.showGraphs = true) : (this.showGraphs = false);\n    } else if (event.tab.textLabel === 'Scoring Result') {\n      this.model.modelMetaData.scoringMetrics\n        ? (this.showGraphs = true)\n        : (this.showGraphs = false);\n    } else {\n      this.showGraphs = false;\n    }\n    this.activeTabName = event.tab.textLabel;\n  }\n\n  /**\n   * SOCKET - Listen for CV score calculation completed messages\n   */\n  initCvSocket(): void {\n    this._socket.listen('cvCompleted').subscribe(\n      async (respData: any) => {\n        if (respData.modelData.status === 'failed') {\n          this.showSpinner = false;\n          this.trainings[0].models = this.trainings[0].models?.map((data: any) => {\n            if (data._id === respData.modelData?.modelId) {\n              data.modelMetaData.cvData.status = 'completed';\n            }\n            return data;\n          });\n          this.updateTrainingModels.emit(this.trainings[0].models);\n          this._toaster.error(respData.modelData.message, 'Models');\n        } else {\n          this.trainings[0].models = this.trainings[0].models?.map((data: any) => {\n            if (data._id === respData.modelData?._id) {\n              data = respData.modelData;\n            }\n            return data;\n          });\n          this.updateTrainingModels.emit(this.trainings[0].models);\n          this._toaster.success('CV score calculated successfully', 'Models');\n          this.showSpinner = false;\n        }\n      },\n      (err: Error) => {\n        this._toaster.error(`Socket Error - ${err.message}`, 'Train Model');\n        this.showSpinner = false;\n      }\n    );\n  }\n  /**\n   * Create an empty array for k-fold\n   * @param data\n   * @returns\n   */\n  getArray(data: any): Array<any> {\n    return new Array(data);\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('cvCompleted');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<mat-tab-group class=\"px-3 pb-3\" dynamicHeight mat-align-tabs=\"start\">\r\n  <!-- LOSSES -->\r\n  <mat-tab>\r\n    <!-- TAB LABEL -->\r\n    <ng-template mat-tab-label>\r\n      <mat-label [matTooltip]=\"_utils.getTootip('losses')\">Losses</mat-label>\r\n    </ng-template>\r\n    <div class=\"mx-auto mt-4\" *ngIf=\"!training.edaId.isMultipleTimeseries\">\r\n      <table class=\"table table-bordered w-50 text-center\">\r\n        <thead class=\"table-dark bg-primary\">\r\n          <tr>\r\n            <td>Loss</td>\r\n            <td>Value</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let loss of model.modelMetaData.losses\">\r\n            <td>{{ loss.name }}</td>\r\n            <td>{{ loss.value !== null ? loss.value : '-' }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div class=\"mx-auto mt-4\" *ngIf=\"training.edaId.isMultipleTimeseries\">\r\n      <table class=\"table table-responsive-md table-bordered w-75 mx-auto my-4\">\r\n        <thead class=\"thead-dark bg-primary\">\r\n          <tr>\r\n            <td>Loss</td>\r\n            <td>Count of Groups</td>\r\n            <td>Min</td>\r\n            <td>25th Percentile</td>\r\n            <td>50th Percentile</td>\r\n            <td>75th Percentile</td>\r\n            <td>Mean</td>\r\n            <td>Standard Deviation</td>\r\n            <td>Max</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let item of losses | keyvalue\">\r\n            <td>{{ item.key }}</td>\r\n            <td *ngIf=\"item.value['count'] != 0\">\r\n              {{\r\n              item.value.count === null || item.value.count === undefined ? '-' : item.value.count\r\n              }}\r\n            </td>\r\n            <td *ngIf=\"item.value['count'] == 0\">\r\n              {{\r\n              0\r\n              }}\r\n            </td>\r\n            <td *ngIf=\"item.value['min'] != 0\">\r\n              {{ item.value.min === null || item.value.min === undefined ? '-' : item.value.min }}\r\n            </td>\r\n            <td *ngIf=\"item.value['min'] == 0\">\r\n              {{ 0}}\r\n            </td>\r\n            <td *ngIf=\"item.value['25%'] != 0\">\r\n              {{\r\n              item.value['25%'] === null || item.value['25%'] === undefined\r\n              ? '-'\r\n              : item.value['25%']\r\n              }}\r\n            </td>\r\n            <td *ngIf=\"item.value['25%'] == 0\">\r\n              {{ 0\r\n              }}\r\n            </td>\r\n            <td *ngIf=\"item.value['50%'] != 0\">\r\n              {{\r\n              item.value['50%'] === null || item.value['50%'] === undefined\r\n              ? '-'\r\n              : item.value['50%']\r\n              }}\r\n            </td>\r\n            <td *ngIf=\"item.value['50%'] == 0\">\r\n              {{0\r\n              }}\r\n            </td>\r\n            <td *ngIf=\"item.value['75%'] != 0\">\r\n              {{\r\n              item.value['75%'] === null || item.value['75%'] === undefined\r\n              ? '-'\r\n              : item.value['75%']\r\n              }}\r\n            <td *ngIf=\"item.value['75%'] == 0\">\r\n              {{0}}\r\n            </td>\r\n            <td *ngIf=\"item.value['mean'] != 0\">\r\n              {{\r\n              item.value.mean === null || item.value.mean === undefined ? '-' : item.value.mean\r\n              }}\r\n            <td *ngIf=\"item.value['mean'] == 0\">\r\n              {{0}}\r\n            </td>\r\n            <td *ngIf=\"item.value['std'] != 0\">\r\n              {{ item.value.std === null || item.value.std === undefined ? '-' : item.value.std }}\r\n            </td>\r\n            <td *ngIf=\"item.value['std'] == 0\">\r\n              {{0}}\r\n            </td>\r\n            <td *ngIf=\"item.value['max'] !=0\">\r\n              {{ item.value.max === null || item.value.max === undefined ? '-' : item.value.max }}\r\n            </td>\r\n            <td *ngIf=\"item.value['max'] == 0\">\r\n              {{0}}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </mat-tab>\r\n  <!-- EVALUATE FORECAST -->\r\n  <mat-tab>\r\n    <!-- TAB LABEL -->\r\n    <ng-template mat-tab-label>\r\n      <mat-label [matTooltip]=\"_utils.getTootip('evaluateForecast')\">Evaluate Forecast</mat-label>\r\n    </ng-template>\r\n    <mat-form-field appearance=\"outline\" class=\"col-md-4 mt-3\" *ngIf=\"training.edaId.isMultipleTimeseries\">\r\n      <mat-label for=\"timeseries\" [matTooltip]=\"_utils.getTootip('selectGroup')\">Select timeseries group\r\n      </mat-label>\r\n      <mat-select [formControl]=\"selectedTimeseriesGroup\" required>\r\n        <mat-option *ngFor=\"let item of timeseriesGoupList\" [value]=\"item\">\r\n          {{ item }}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"\r\n          selectedTimeseriesGroup.hasError('required') &&\r\n          (selectedTimeseriesGroup.dirty || selectedTimeseriesGroup.touched)\r\n        \">Timeseries groups are required.</mat-error>\r\n    </mat-form-field>\r\n    <button class=\"mx-auto my-4\" mat-stroked-button\r\n      [disabled]=\"training.edaId.isMultipleTimeseries && !selectedTimeseriesGroup.value\" (click)=\"evaluateForecast()\">\r\n      Evaluate\r\n    </button>\r\n    <div class=\"d-flex justify-content-center\" [id]=\"uniqueEvaluateDiv\"></div>\r\n  </mat-tab>\r\n  <!-- FORECAST -->\r\n  <mat-tab>\r\n    <!-- TAB LABEL -->\r\n    <ng-template mat-tab-label>\r\n      <mat-label [matTooltip]=\"_utils.getTootip('forecasting')\">Forecast</mat-label>\r\n    </ng-template>\r\n    <div class=\"row mx-auto mt-4\">\r\n      <mat-form-field appearance=\"outline\" class=\"w-25\" *ngIf=\"training.edaId.isMultipleTimeseries\">\r\n        <mat-label for=\"timeseries\" [matTooltip]=\"_utils.getTootip('selectGroup')\">Select timeseries group\r\n        </mat-label>\r\n        <mat-select [formControl]=\"selectedTimeseriesGroupForecast\" required>\r\n          <mat-option *ngFor=\"let item of timeseriesGoupList\" [value]=\"item\">\r\n            {{ item }}\r\n          </mat-option>\r\n        </mat-select>\r\n        <mat-error *ngIf=\"\r\n            selectedTimeseriesGroupForecast.hasError('required') &&\r\n            (selectedTimeseriesGroupForecast.dirty || selectedTimeseriesGroupForecast.touched)\r\n          \">Timeseries groups are required.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"w-25\" appearance=\"outline\" [matTooltip]=\"_utils.getTootip('startDate')\"\r\n        *ngIf=\"!training.edaId.isMultipleTimeseries\">\r\n        <mat-label>Start Input</mat-label>\r\n        <input matInput type=\"date\" [(ngModel)]=\"startDate\" (ngModelChange)=\"onChangeDate(startDate, endDate)\" />\r\n      </mat-form-field>\r\n      <mat-form-field class=\"w-25 ml-4\" appearance=\"outline\" [matTooltip]=\"_utils.getTootip('endDate')\"\r\n        *ngIf=\"!training.edaId.isMultipleTimeseries\">\r\n        <mat-label>End Input</mat-label>\r\n        <input matInput type=\"date\" [(ngModel)]=\"endDate\" (ngModelChange)=\"onChangeDate(startDate, endDate)\" />\r\n      </mat-form-field>\r\n      <button class=\"ml-4 mt-2\" [disabled]=\"\r\n          isError || (training.edaId.isMultipleTimeseries && !selectedTimeseriesGroupForecast.value)\r\n        \" mat-stroked-button (click)=\"getForecast()\" style=\"height: 45px\">\r\n        Get Forecast\r\n      </button>\r\n      <button class=\"ml-4 mt-2\" mat-stroked-button *ngIf=\"csvData.length\" (click)=\"downloadForecast()\"\r\n        style=\"height: 45px\" matTooltip=\"Click here to download graph data (.csv)\">\r\n        Download Forecast\r\n      </button>\r\n      <div class=\"text-muted text-danger col-md-12\" *ngIf=\"showTextError\">\r\n        {{ text }}\r\n      </div>\r\n    </div>\r\n    <!-- PLOT -->\r\n    <div class=\"d-flex justify-content-center\" [id]=\"uniqueForecastDiv\"></div>\r\n  </mat-tab>\r\n</mat-tab-group>","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { ModelsService } from '../models.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ngxCsv } from 'ngx-csv';\nimport { EdaService } from '../../eda/eda.service';\n\n\nconst Plotly = require('plotly.js-dist');\n@Component({\n  selector: 'app-timeseries-expansion',\n  templateUrl: './timeseries-expansion.component.html',\n  styleUrls: ['./timeseries-expansion.component.scss'],\n})\nexport class TimeseriesExpansionComponent implements OnInit, OnDestroy {\n  @Input() training: any;\n  @Input() model: any;\n  @Input() originalFileWithEdaDetails: any;\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Variables with default values */\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  startDate: any;\n  endDate: any;\n  showSpinner: boolean = false;\n  showTextError: boolean = false;\n  text: any;\n  isError: boolean = false;\n  uniqueForecastDiv: string;\n  uniqueEvaluateDiv: string;\n  selectedTimeseriesGroup = new FormControl('', Validators.required);\n  selectedTimeseriesGroupForecast = new FormControl('', Validators.required);\n  frequency: any;\n  losses: any = {};\n  //variable for storing the graph data in csv format.\n  csvData: Array<Object> = [];\n  colNameOtherThanX: any = [];\n  timeseriesGoupList;\n  constructor(\n    public _utils: UtilsService,\n    private _spinner: SpinnerService,\n    private _toaster: ToastrService,\n    private _models: ModelsService,\n    private _snackBar: MatSnackBar,\n    private _eda: EdaService,\n  ) { }\n\n  ngOnInit(): void {\n    if (this.training.edaId.isMultipleTimeseries) {\n      this.getTimeseriesGroup();\n  }\n    this.startDate = new Date();\n    this.startDate = new Date(Date.now() - 864e5).toISOString().slice(0, 10);\n    this.endDate = new Date().toISOString().slice(0, 10);\n    this.uniqueForecastDiv = `${this.model.modelMetaData.algoName}Plot`;\n    this.uniqueEvaluateDiv = `${this.model.modelMetaData.algoName}Plot`;\n    this.losses = this.model.modelMetaData.losses;\n  }\n\n  getTimeseriesGroup() {\n    this._spinner.showSpinner();\n    let reqObj = {\n      modelId: this.model._id,\n    }\n    this._eda\n      .getTimeseriesGroup(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.showSpinner = true;\n            this.timeseriesGoupList = res[0].allowedGroupList;\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: any) => {\n          this._spinner.stopSpinner();\n          this.showSpinner = false;\n          this._toaster.error(err.error.message || 'Server Error', 'Model');\n        }\n      );\n  }\n  async calculateFrequency(): Promise<any> {\n    if (this.training.edaId.hasOwnProperty('resampling')) {\n      this.frequency = this.training.edaId.resampling.resamplingMethod;\n    } else {\n      this.frequency = this.originalFileWithEdaDetails.descriptiveStatistics.filter((item) => {\n        return item.colName === this.training.edaId.timeseriesInfo.datetimeIndex;\n      })[0];\n      this.frequency = this.frequency.frequency;\n    }\n  }\n  /**\n   * Evaluates the forcast and generates the graph\n   */\n  async evaluateForecast(): Promise<any> {\n    await this.calculateFrequency();\n    let reqObj = {\n      indexPath: this.training.edaId.indexPath,\n      trainPipeFilePath: this.model.trainPipeFilePath,\n      parentPipelineFilename: this.training.edaId.tasks[0].currentPipelineFilename,\n      filename: this.training.metaInfo.fileName,\n      modelPath: this.model.modelMetaData.modelPath,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      depVariable: this.training.depVariable,\n      timeseriesIds: this.training.edaId.isMultipleTimeseries\n        ? this.training.edaId.timeseriesIds\n        : null,\n      selectedTimeseriesGroup: this.selectedTimeseriesGroup.value,\n      isMultipleTimeseries: this.training.edaId.isMultipleTimeseries,\n      nSteps: this.training.nSteps,\n      frequency: this.frequency !== '' ? this.frequency : 'none',\n    };\n    this._spinner.showSpinner();\n    this._models\n      .evaluateGraph(this.training._id, this.model._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.showSpinner = true;\n            let graphDiv: any = document.getElementById(this.uniqueEvaluateDiv);\n            while (graphDiv.data && graphDiv.data.length > 0) {\n              Plotly.deleteTraces(graphDiv, [0]);\n            }\n            res.graphContent.layout.xaxis.linecolor = 'black';\n            res.graphContent.layout.yaxis.linecolor = 'black';\n            Plotly.plot(graphDiv, res.graphContent.data, res.graphContent.layout);\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: any) => {\n          this._spinner.stopSpinner();\n          this.showSpinner = false;\n          this._toaster.error(err.error.message || 'Server Error', 'Model');\n        }\n      );\n  }\n\n  /**\n   * Fetches the forecast graph\n   */\n  async getForecast(): Promise<any> {\n    this._spinner.showSpinner();\n    await this.calculateFrequency();\n    let reqObj = {\n      indexPath: this.training.edaId.indexPath,\n      trainPipeFilePath: this.model.trainPipeFilePath,\n      parentPipelineFilename: this.training.edaId.tasks[0].currentPipelineFilename,\n      filename: this.training.metaInfo.fileName,\n      preprocessedFilepath: this.training.preprocessedFilepath,\n      algorithm: this.model.modelMetaData.algoName,\n      startDate: moment(this.startDate).format('L'),\n      endDate: moment(this.endDate).format('L'),\n      modelPath: this.model.modelMetaData.modelPath,\n      forecastModelPath: this.model.modelMetaData.forecastModelPath,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      depVariable: this.training.depVariable,\n      timeseriesIds: this.training.edaId.isMultipleTimeseries\n        ? this.training.edaId.timeseriesIds\n        : null,\n      selectedTimeseriesGroup: this.selectedTimeseriesGroupForecast.value,\n      isMultipleTimeseries: this.training.edaId.isMultipleTimeseries,\n      nSteps: this.training.nSteps,\n      frequency: this.frequency !== '' ? this.frequency : 'none',\n    };\n    // API call\n    this._models\n      .getForecastGraph(this.training._id, this.model._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.showSpinner = true;\n            let graphDiv: any = document.getElementById(this.uniqueForecastDiv);\n            while (graphDiv.data && graphDiv.data.length > 0) {\n              Plotly.deleteTraces(graphDiv, [0]);\n            }\n            if (res.graphContent.layout) {\n              this.showTextError = false;\n              res.graphContent.layout.template.layout.title.xanchor = 'center';\n              res.graphContent.layout.template.layout.title.y = 0.9;\n              res.graphContent.layout.template.layout.title.x = 0.5;\n              res.graphContent.layout.template.layout.title.yanchor = 'top';\n              res.graphContent.layout.template.layout.xaxis.gridcolor = 'transparent';\n              res.graphContent.layout.template.layout.yaxis.gridcolor = 'transparent';\n              res.graphContent.layout.template.layout.yaxis.zerolinecolor = 'transparent';\n              res.graphContent.layout.xaxis.linecolor = 'black';\n              res.graphContent.layout.yaxis.linecolor = 'black';\n              res.graphContent.layout.xaxis.showgrid = false;\n              Plotly.plot(graphDiv, res.graphContent.data, res.graphContent.layout);\n              this.prepareGraphData(res.graphContent.data);\n              this._spinner.stopSpinner();\n            } else {\n              this.showTextError = true;\n              this._spinner.stopSpinner();\n              this.text = res.graphContent;\n            }\n          }\n        },\n        (e: any) => {\n          this._spinner.stopSpinner();\n          this.showSpinner = false;\n          this._toaster.error(e.error.message || 'Server Error', 'Model');\n        }\n      );\n  }\n\n  /**\n   * function to prepare the graph data in the csv format and allow user to download it.\n   * @param graphData - graph data\n   */\n  prepareGraphData(graphData: any) {\n    var transposedData: Array<Object> = [];\n    this.csvData.length = 0;\n    this.colNameOtherThanX = [];\n    let colNames = []\n    // doing transpose of the graph data.\n    graphData.forEach(function (d) {\n      for (var key in d) {\n        if (transposedData[key] === undefined) {\n          transposedData[key] = [];\n        }\n        (key == 'x' || key == 'y') && transposedData[key].push(d[key]);\n        (key === 'name') && colNames.push(d[key]);\n      }\n    });\n    this.colNameOtherThanX = colNames;\n    // deleting all other keys of transposedData.\n    for (var key in transposedData) {\n      if (key != 'x' && key != 'y') {\n        delete transposedData[key];\n      }\n    }\n    // seperating the x and y axis data.\n    let xdataForCsv = [];\n    let ydataForCsv = [];\n    for (var key in transposedData) {\n      (key == 'x') && xdataForCsv.push(transposedData[key]);\n      (key == 'y') && ydataForCsv.push(transposedData[key]);\n    }\n    xdataForCsv = xdataForCsv.toString().split(',').sort();\n    xdataForCsv = [...new Set(xdataForCsv)];\n    // preparing the data in csv format.\n    if (!this.training.edaId.isMultipleTimeseries) {\n      // logic to convert graph data to csv if not multi timeseries and is prophet algo.\n      if (this.model.modelMetaData.algoName === 'Prophet') {\n        for (let i = 0; i < xdataForCsv.length; i++) {\n          this.csvData[i] = {};\n          this.csvData[i]['x'] = xdataForCsv[i];\n          for (let k = 0; k < this.colNameOtherThanX.length; k++) {\n            if (i < ydataForCsv[0][0].length) {\n              if (k === 0) {\n                this.csvData[i][this.colNameOtherThanX[0]] = ydataForCsv[0][0][i];\n              }\n            } else if (i >= ydataForCsv[0][0].length) {\n              if (k !== 0) {\n                this.csvData[i][this.colNameOtherThanX[k]] = ydataForCsv[0][k][(i - Number(ydataForCsv[0][0].length))];\n              } else {\n                this.csvData[i][this.colNameOtherThanX[k]] = '';\n              }\n            }\n          }\n        }\n      } else {\n        // logic to convert graphdata to csv if not multi timeseries and not prophet algo.\n        for (let i = 0; i < xdataForCsv.length; i++) {\n          if (i <= ydataForCsv[0][0].length) {\n            this.csvData.push({ x: xdataForCsv[i], y: ydataForCsv[0][0][i], forecast: ydataForCsv[0][1][i] });\n          }\n        }\n      }\n    } else {\n      // logic to convert graphdata to csv if multi timeseries.\n      for (let i = 0; i < xdataForCsv.length; i++) {\n        if (i < ydataForCsv[0][0].length) {\n          this.csvData.push({ x: xdataForCsv[i], y: ydataForCsv[0][0][i], forecast: '' });\n        } else {\n          this.csvData.push({ x: xdataForCsv[i], y: '', forecast: ydataForCsv[0][1][(i - Number(ydataForCsv[0][0].length))] });\n        }\n      }\n    }\n  }\n\n  // function to download the prepared graph data in the csv format.\n  downloadForecast() {\n    var options = {\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalseparator: '.',\n      showLabels: true,\n      useBom: true,\n      noDownload: false, // if true, will not allow the direct download of the csv file.\n      headers: ['x', ...this.colNameOtherThanX]\n    };\n    this.csvData.length && new ngxCsv(this.csvData, 'forecastData', options);\n  }\n\n  /**\n   * Called on dates change\n   * @param sDate\n   * @param eDate\n   * @returns\n   */\n  onChangeDate(sDate: any, eDate: any): number {\n    let startDate = moment(sDate);\n    let endDate = moment(eDate);\n    let isDateCorrect = moment(endDate).isAfter(startDate, 'day');\n    if (isDateCorrect === false) {\n      this.isError = true;\n      this._snackBar\n        .open('End date should be greater than start date', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        })\n        .afterDismissed()\n        .subscribe((data) => {\n          let date = new Date(sDate);\n          // add a day\n          date.setDate(date.getDate() + 1);\n          this.endDate = date.toISOString().slice(0, 10);\n          this.isError = false;\n        });\n    } else {\n      this.isError = false;\n    }\n    return 0;\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n   ","<mat-tab-group class=\"pb-3 horizontal\" mat-align-tabs=\"center\" dynamicHeight\n  *ngIf=\"!model.modelMetaData.hasOwnProperty('errorMsg') || model.modelMetaData?.errorMsg === null\">\n  <!-- ANALYSIS -->\n  <mat-tab *ngIf=\"model.modelMetaData.analysisInfo.length\">\n    <ng-template mat-tab-label>\n      <mat-label [matTooltip]=\"_utils.getTootip('clusterAnalysis')\">Analysis</mat-label>\n    </ng-template>\n    <mat-tab-group class=\"vertical mt-2\" (selectedTabChange)=\"showGraphsSection($event)\"\n      *ngIf=\"clusterErrorType !== 'string'\">\n      <mat-tab label=\"Summary\">\n        <ng-template mat-tab-label>\n          <mat-label [matTooltip]=\"_utils.getTootip('')\">Summary</mat-label>\n        </ng-template>\n        <div class=\"row pt-3 ml-2 pr-4\">\n          <div class=\"col-md-4 px-2 mb-2 d-flex\" *ngFor=\"let item of obs | async; let i = index\">\n            <div class=\"card-body p-2 w-100 bgc\" [ngStyle]=\"{ 'background-color': cardColor[i % 3] }\">\n              <div class=\"row\">\n                <div class=\"col-md-4 card-body p-2\">\n                  <div class=\"easypie-chart text-center\" easypiechart [options]=\"pieOptions1\"\n                    [percent]=\"item.samplePercentage\" [matTooltip]=\"_utils.getTootip('samplePercentage')\">\n                    <span style=\"font-size: 0.9rem\">{{ item.samplePercentage }}%</span>\n                  </div>\n                </div>\n                <div class=\"col-md-8 p-2 card-body\">\n                  <mat-form-field appearance=\"outline\" class=\"clusterInput rulesfont mt-1\">\n                    <mat-label for=\"clusterName\">Cluster name</mat-label>\n                    <input matInput type=\"text\" name=\"clusterName\" (focus)=\"editMode = true\"\n                      (keydown.enter)=\"$event.target.blur()\" [value]=\"item.clusterName\"\n                      (change)=\"onFocusOut(clusterName.value, i)\" #clusterName [id]=\"item.clusterId\"\n                      (keydown.enter)=\"$event.target.blur()\" (focusout)=\"editMode = false\" />\n                  </mat-form-field>\n                  <div *ngIf=\"clusterName.errors?.pattern\">Invalid Name</div>\n                  <!-- <mat-hint class=\"text-danger\" *ngIf=\"item.isDuplicate\"> Cluster name already exists!</mat-hint> -->\n                </div>\n              </div>\n              <!-- rules -->\n              <div class=\"col-md-12 float-left rulesfont mb-3\" *ngFor=\"let rule of item.rules\"\n                [matTooltip]=\"_utils.getTootip('clusterRules')\">\n                <li class=\"bullet-font\">\n                  {{ rule }}\n                </li>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div *ngIf=\"model.showUpdateButton == true\">\n              <button mat-raised-button class=\"btn-primary ml-5 mt-3\" type=\"submit\" (click)=\"updateClusterData()\">\n                <mat-icon>insights</mat-icon> Save Cluster\n              </button>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <mat-paginator class=\"col-md-12\" [pageSizeOptions]=\"[6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\">\n            </mat-paginator>\n          </div>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Heat Map\" [disabled]=\"showUpdateButton === true\">\n        <ng-template mat-tab-label>\n          <mat-label [matTooltip]=\"_utils.getTootip('')\">Heat Map</mat-label>\n        </ng-template>\n        <div class=\"row p-3\">\n          <div class=\"col-md-12\">\n            <div class=\"d-flex justify-content-center\" [id]=\"heatMapDiv\"></div>\n          </div>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Decision Tree\" [disabled]=\"showUpdateButton === true\" *ngIf=\"model.modelMetaData.treeModelOutput\">\n        <ng-template mat-tab-label>\n          <mat-label [matTooltip]=\"_utils.getTootip('')\">Decision Tree</mat-label>\n        </ng-template>\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <button style=\"float: right; margin-right: 15px\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n              (click)=\"downloadDecisionTree()\">\n              Download\n            </button>\n\n            <div class=\"d-flex justify-content-center overflowDiv mt-5\">\n              <img [src]=\"decisionTreeImage\" alt=\"Decision Tree\" class=\"imgObj\" />\n            </div>\n          </div>\n          <!-- <div class=\"d-flex justify-content-center\" [id]=\"heatMapDiv\"></div> -->\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Feature Importance\" [disabled]=\"showUpdateButton === true\"\n        *ngIf=\"model.modelMetaData?.featureImportance.length\">\n        <ng-template mat-tab-label>\n          <mat-label [matTooltip]=\"_utils.getTootip('')\">Feature Importance </mat-label>\n        </ng-template>\n        <div class=\"text-right offset-8 ml-5\">\n          <mat-button-toggle-group class=\"\" [(ngModel)]=\"viewType\" (change)=\"toggleView = !toggleView\">\n            <mat-button-toggle value=\"graph\">\n              <mat-icon class=\"mr-2\">show_chart</mat-icon>Graph\n            </mat-button-toggle>\n            <mat-button-toggle value=\"table\">\n              <mat-icon class=\"mr-2\">table_chart</mat-icon>Table\n            </mat-button-toggle>\n          </mat-button-toggle-group>\n        </div>\n        <div [hidden]=\"!toggleView\" class=\"ml-5 offset-1\">\n          <div class=\"d-flex flex-row justify-content-center\" [id]=\"featureImp\"></div>\n          <br />\n        </div>\n        <div [hidden]=\"toggleView\" class=\"ml-5\">\n          <table class=\"table table-bordered mx-auto w-100 mt-4\">\n            <thead class=\"thead-dark bg-primary\">\n              <tr>\n                <td>Feature</td>\n                <td>Importance</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let feature of featuresArray\">\n                <td>{{ feature.colName }}</td>\n                <td>{{ feature.importance }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <!-- NOTE -->\n        <mat-hint *ngIf=\"toggleView\" class=\"col-md-12\">Note: Top 15 features are displayed. To view all features check\n          table view.\n        </mat-hint>\n      </mat-tab>\n    </mat-tab-group>\n    <div *ngIf=\"clusterErrorType == 'string'\" class=\"p-3 text-center text-danger\">\n      <b>{{ model.modelMetaData.analysisInfo }}</b>\n    </div>\n  </mat-tab>\n  <!-- visualization tab -->\n  <mat-tab *ngIf=\"featureList.length\">\n    <!-- TAB LABEL -->\n    <ng-template mat-tab-label>\n      <mat-label [matTooltip]=\"_utils.getTootip('clusterVisualization')\">Feature Distribution</mat-label>\n    </ng-template>\n    <div class=\"row mx-auto my-4\">\n      <div class=\"col-md-4\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"eda file\">Select a feature</mat-label>\n          <mat-select [(ngModel)]=\"selectedFeature\" multiple\n            (selectionChange)=\"featureSelectionChanged(selectedFeature)\">\n            <mat-option *ngFor=\"let dataItem of clusteringFeatures\" [value]=\"dataItem\">\n              {{ dataItem.colName }}\n            </mat-option>\n          </mat-select>\n          <mat-hint>Maximum 2 features are required.</mat-hint>\n        </mat-form-field>\n      </div>\n      <div *ngIf=\"selectedFeature[0]?.dataType === 'Text'\" class=\"col-md-4\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"eda file\">Select cluster</mat-label>\n          <mat-select [(ngModel)]=\"selectedCluster\" required>\n            <mat-option *ngFor=\"let item of model.modelMetaData.analysisInfo\" [value]=\"item.clusterName\">\n              {{ item.clusterName }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class=\"col-md-2 mt-3\">\n        <button *ngIf=\"selectedFeature.length == 1 || selectedFeature.length == 2\" mat-stroked-button\n          (click)=\"visualiseCluster()\" [disabled]=\"selectedFeature[0]?.dataType === 'Text' && !selectedCluster\">\n          Visualize Cluster\n        </button>\n      </div>\n      <div class=\"col-md-2 mt-3\" *ngIf=\"selectedFeature[0]?.dataType === 'Text'\">\n        <button mat-flat-button class=\"btn-primary\" (click)=\"viewClusterFaq(clusterTemplate)\">\n          FAQ's\n        </button>\n      </div>\n      <!-- PLOT -->\n      <div class=\"col-md-12\">\n        <div class=\"d-flex justify-content-center\" [id]=\"uniqueGraphDiv\"></div>\n      </div>\n    </div>\n\n  </mat-tab>\n  <!-- METRICS TAB -->\n  <mat-tab *ngIf=\"model['modelMetaData']['clusteringMetricesScore']\">\n    <!-- TAB LABEL -->\n    <ng-template mat-tab-label>\n      <mat-label [matTooltip]=\"_utils.getTootip('metrics')\">Metrics</mat-label>\n    </ng-template>\n    <div class=\"row my-5 text-center\">\n      <div class=\"col-md-4 border-right\" [matTooltip]=\"_utils.getTootip('silhouetteCoefficient')\">\n        <div class=\"h1 m0 text-bold\">\n          {{\n          checkIsNumber(model.modelMetaData?.clusteringMetricesScore?.silhouetteScore)\n          ? (model.modelMetaData?.clusteringMetricesScore?.silhouetteScore | number: '1.2-2')\n          : model.modelMetaData?.clusteringMetricesScore?.silhouetteScore\n          }}\n        </div>\n        <div class=\"text-uppercase\">Silhouette Coefficient</div>\n      </div>\n      <div class=\"col-md-4 border-right\" [matTooltip]=\"_utils.getTootip('daviesBouldinIndex')\">\n        <div class=\"h1 m0 text-bold\">\n          {{\n          checkIsNumber(model.modelMetaData?.clusteringMetricesScore?.daviesBouldinScore)\n          ? (model.modelMetaData?.clusteringMetricesScore?.daviesBouldinScore | number: '1.2-2')\n          : model.modelMetaData?.clusteringMetricesScore?.daviesBouldinScore\n          }}\n        </div>\n        <div class=\"text-uppercase\">Davies-Bouldin Index</div>\n      </div>\n      <div class=\"col-md-4\" [matTooltip]=\"_utils.getTootip('calinskiHarabaszIndex')\">\n        <div class=\"h1 m0 text-bold\">\n          {{\n          checkIsNumber(model.modelMetaData?.clusteringMetricesScore?.calinskiHarabaszScore)\n          ? (model.modelMetaData?.clusteringMetricesScore?.calinskiHarabaszScore\n          | number: '1.2-2')\n          : model.modelMetaData?.clusteringMetricesScore?.calinskiHarabaszScore\n          }}\n        </div>\n        <div class=\"text-uppercase\">Calinski-Harabasz Index</div>\n      </div>\n    </div>\n  </mat-tab>\n</mat-tab-group>\n\n<div *ngIf=\"model.modelMetaData?.errorMsg !== null\" class=\"p-3 text-center text-danger\">\n  <b>{{ model.modelMetaData?.errorMsg }}</b>\n</div>\n\n\n<ng-template #clusterTemplate>\n  <h2 mat-dialog-title>FAQs</h2>\n  <mat-dialog-content class=\"mat-typography preview-data-section mb-3\">\n    <div class=\"col-md-12\">\n      <mat-accordion>\n        <mat-expansion-panel class=\"my-3\" [expanded]=\"1\">\n          <mat-expansion-panel-header>\n            <!-- <mat-panel-title> FAQ's </mat-panel-title> -->\n            <mat-panel-description> </mat-panel-description>\n          </mat-expansion-panel-header>\n          <ul>\n            <li><b>What is a Scattertext plot?</b></li>\n            <p>\n              The Scattertext plot is a scatter plot for text features that are represented as a set of unigrams and\n              bigrams from the\n              samples in the data.It plots the frequencies of the terms in the two classes.\n            </p>\n            <li><b>What do the x-axis and y-axis represent?</b></li>\n            <p>The x-axis represents the frequency of a term in the negative class or the rest of the clusters.The\n              y-axis represents the frequency of a term in the positive class or the specified cluster.</p>\n            <li><b>What do the points on the plot indicate?</b></li>\n            <p>\n              Each point in the plot indicates terms present in the samples.The points are positioned according to their\n              frequencies in each of the classes.The points are scored using a scaled f-score which can be found on\n              hover along with the term ratio in the two classes.Subsequently, clicking on the point displays some of\n              the documents that mention the term in both classes.\n            </p>\n            <li><b>What do the colours on the points indicate?</b></li>\n            <p>\n              The intensity of the blue color on a point indicates the association of the term with the positive\n              class.The intensity of the red color on a point indicates the association of the term with the negative\n              class.The yellow color on a point indicates an equal association of the term with both the classes.The\n              term association is deduced based on the computed scaled f-scores.  \n            </p>\n            <li><b>How to interpret a Scattertext plot? </b></li>\n            <p>\n              The closer a term is to the top of the plot indicates a higher frequency of the term in the positive\n              class.The closer a term is to the right of the plot indicates a higher frequency of the term in the\n              negative class.The term in the middle has an average frequency for both the classes.Terms frequently\n              present in both the classes are present in the top-right corner and the terms infrequently present in\n              both the classes are present in the bottom-left corner.The right-hand side of the plot summarizes the top\n              terms characteristic of each of the classes.  \n            </p>\n          </ul>\n        </mat-expansion-panel>\n      </mat-accordion>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n  </mat-dialog-actions>\n</ng-template>","import { LocalStorageService } from './../../../shared/local-storage.service';\nimport {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ColorsService } from 'src/app/shared/colors/colors.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { ModelsService } from '../models.service';\nimport { environment } from 'src/environments/environment';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { EdaReportComponent } from 'src/app/shared/components/eda-report/eda-report.component';\nconst Plotly = require('plotly.js-dist');\nexport interface Card {\n  title: string;\n  subtitle: string;\n  text: string;\n}\n@Component({\n  selector: 'app-cluster-expansion',\n  templateUrl: './cluster-expansion.component.html',\n  styleUrls: ['./cluster-expansion.component.scss'],\n})\nexport class ClusterExpansionComponent implements OnInit {\n  @Input() training: any;\n  @Input() model: any;\n  @Input() originalFileWithEdaDetails: any;\n  @Input() trainings: any;\n  @Output() updateTrainingModels = new EventEmitter<any>();\n  project: any;\n  @ViewChild(MatPaginator) set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  dialogRef: MatDialogRef<any>;\n  obs: Observable<any>;\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  pieOptions1: any = {\n    animate: {\n      duration: 1000,\n      enabled: true,\n    },\n    barColor: this._colors.byName('primary'),\n    trackColor: '#f2f2f2',\n    scaleColor: false,\n    lineWidth: 5,\n    size: 65,\n    lineCap: 'round',\n  };\n  public inputCluster;\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n  featuresArray: Array<any> = [];\n  /** Variables with default values */\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  showSpinner: boolean = false;\n  viewScatterPlot: boolean = false;\n  editMode = false;\n  snackBarRef: MatSnackBarRef<any>;\n  selectedFeature: Array<any> = [];\n  clusteringFeatures: any = [];\n  uniqueGraphDiv: string;\n  heatMapDiv: string;\n  featureImp: string;\n  decisionTreePlot: string;\n  showUpdateButton: boolean = false;\n  toggleView: boolean = true;\n  viewType: string = 'graph';\n  decisionTreeImage: SafeResourceUrl;\n  cardColor = ['#f1f8fe', '#fdf4e3', '#e7e3fd'];\n  showError;\n  hideHeatMap: boolean = true;\n  hideSummary: boolean = false;\n  settingActive: number = 1;\n  featureList: any = [];\n  clusterErrorType: any;\n  selectedCluster: any = null;\n\n  constructor(\n    public _utils: UtilsService,\n    private _spinner: SpinnerService,\n    private _toaster: ToastrService,\n    private _snackBar: MatSnackBar,\n    private _models: ModelsService,\n    private _colors: ColorsService,\n    private _sanitizer: DomSanitizer,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _dialog: MatDialog,\n    private _localStorage: LocalStorageService\n  ) { }\n\n  ngOnInit(): void {\n    this.project = this._localStorage.getItem('project');\n    this.hideSummary = false;\n    this.hideHeatMap = true;\n    this.model.showUpdateButton = false;\n    this.dataSource.data = this.model.modelMetaData.analysisInfo;\n    this.dataSource.paginator = this.paginator;\n    this._changeDetectorRef.detectChanges();\n    this.obs = this.dataSource.connect();\n    this.model.modelMetaData.clusteringGraphType = 'scatter';\n    this.featureImp = `${this.model.modelMetaData.algoName}`;\n    this.uniqueGraphDiv = `${this.model.modelMetaData.algoName}Plot`;\n    this.heatMapDiv = `${this.model.modelMetaData.algoName}PlotMap`;\n    this.clusteringFeatures = [];\n    this.clusterErrorType = typeof this.model.modelMetaData.analysisInfo;\n    // If decomposition=='pca' or factoranalysis, first priority\n    //  if (this.training.clusteringInfo.decomposition != 'none') {\n    //     // generate custom values for pca\n    //     for (let i = 0; i < this.training.clusteringInfo.components; i++) {\n    //       this.clusteringFeatures.push('component_' + i);\n    //     }\n    //   } else {\n    if (this.training.indepVariable.length) {\n      // Filter out numeric indepVariables\n      let feature = this.training.edaId.edaSummary.filter((data: any) => {\n        if (\n          data.dataType === 'Integer' ||\n          data.dataType === 'Categorical' ||\n          data.dataType === 'Decimal' ||\n          data.dataType === 'Text'\n        ) {\n          return data;\n        }\n      });\n      feature.map((data: any) => {\n        let found = this.training.indepVariable.find((indepVar: any) => {\n          return indepVar.colName === data.colName;\n        });\n        if (found && found !== 'undefined') {\n          // tslint:disable-next-line: no-string-literal\n          // return data['colName'];\n          this.clusteringFeatures.push(data);\n        }\n      });\n      this.featureList = this.clusteringFeatures;\n    }\n    // }\n  }\n\n  showGraphsSection(event: any): void {\n    if (event.tab.textLabel === 'Heat Map') {\n      this.plotHeatMap();\n    } else if (event.tab.textLabel === 'Decision Tree') {\n      this.plotDecisionTreePlot();\n    } else if (event.tab.textLabel === 'Feature Importance') {\n      this.viewType = 'graph';\n      this.plotFeatureImp();\n    }\n  }\n\n  featureSelectionChanged(dataItem) {\n    Plotly.purge(document.getElementById(this.uniqueGraphDiv));\n    if (dataItem.length && dataItem[0].dataType === 'Categorical') {\n      this.clusteringFeatures = dataItem;\n      this.selectedCluster = null;\n    } else if (dataItem.length && dataItem[0].dataType === 'Text') {\n      this.clusteringFeatures = dataItem;\n    } else if (\n      dataItem.length &&\n      dataItem[0].dataType !== 'Categorical' &&\n      dataItem[0].dataType !== 'Text'\n    ) {\n      this.clusteringFeatures = this.featureList.filter((item) => {\n        return item.dataType !== 'Categorical' && item.dataType !== 'Text';\n      });\n      this.selectedCluster = null;\n    } else {\n      this.clusteringFeatures = this.featureList;\n      this.selectedCluster = null;\n    }\n  }\n\n  /**\n   * plot feature imp plot\n   */\n  plotFeatureImp(): void {\n    let graphDiv: any = document.getElementById(this.featureImp);\n    let X: Array<number> = [];\n    let Y: Array<string> = [];\n    let graphData: Array<any> = [];\n    this.featuresArray = this.sortArryOFObjects(\n      this.model.modelMetaData.featureImportance,\n      'importance'\n    );\n    this.featuresArray.length > 15 ? (this.featuresArray = this.featuresArray.slice(0, 15)) : null;\n    this.featuresArray.forEach((item: any) => {\n      X.push(item.importance);\n      Y.push(item.colName);\n    });\n    // Deletes the graph data if already present\n    while (graphDiv?.data?.length > 0) {\n      Plotly.deleteTraces(graphDiv, [0]);\n    }\n    // Final graph object\n    graphData = [\n      {\n        type: 'bar',\n        x: X,\n        y: Y,\n        orientation: 'h',\n      },\n    ];\n    var layout = {\n      autosize: true,\n      yaxis: {\n        automargin: true,\n      },\n    };\n    Plotly.plot(graphDiv, graphData, layout);\n  }\n\n  /**\n   * Fetches the data to plot the graph\n   * @returns\n   */\n  visualiseCluster() {\n    if (this.selectedFeature.length == 0) {\n      this.showSnackBar('Please select at least one features', 'OK');\n      return;\n    } else if (this.selectedFeature.length > 2) {\n      this.showSnackBar('Please select only two features', 'OK');\n      return;\n    }\n    let analysisObj = [];\n    if (this.clusterErrorType !== 'string') {\n      this.model.modelMetaData.analysisInfo.map((element) => {\n        let a = {\n          clusterId: element.clusterId,\n          clusterName: element.clusterName,\n        };\n        analysisObj.push(a);\n      });\n    }\n    let tempFeature = [];\n    this.selectedFeature.map((item) => {\n      tempFeature.push(item.colName);\n    });\n    this._spinner.showSpinner();\n    let reqObj: any = {\n      algoName: this.model.modelMetaData.algoName,\n      selectedFeatures: tempFeature ? tempFeature : null,\n      indexPath: this.training.edaId.indexPath,\n      transformedDatasetPath: this.model.transformedDatasetPath,\n      modelPath: this.model.modelMetaData.modelPath,\n      trainPipeFileName: this.model.trainPipeFilePath,\n      rootFileName: this.originalFileWithEdaDetails.filename,\n    };\n    if (this.selectedFeature.length === 1) {\n      reqObj.graphType = 'featureDistribution';\n      reqObj.analysisInfo = analysisObj.length ? analysisObj : 'none';\n      reqObj.fileSchema = this.originalFileWithEdaDetails.fileSchema;\n    } else {\n      reqObj.graphType = 'scatter';\n    }\n    if (this.selectedCluster) {\n      reqObj.selectedCluster = this.selectedCluster;\n      reqObj.graphType = 'scatterText';\n    }\n    // API call\n    this._models\n      .visualiseGraph(this.training._id, this.model._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (typeof res.graphContent !== 'string') {\n            this.showSpinner = true;\n            this.viewScatterPlot = false;\n            let graphDiv: any = document.getElementById(this.uniqueGraphDiv);\n            res.graphContent.layout.template.layout.title.xanchor = 'center';\n            res.graphContent.layout.template.layout.title.y = 0.9;\n            res.graphContent.layout.template.layout.title.x = 0.5;\n            res.graphContent.layout.template.layout.title.yanchor = 'top';\n            res.graphContent.layout.template.layout.xaxis.gridcolor = 'transparent';\n            res.graphContent.layout.template.layout.yaxis.gridcolor = 'transparent';\n            res.graphContent.layout.template.layout.yaxis.zerolinecolor = 'transparent';\n            res.graphContent.layout.xaxis.linecolor = 'black';\n            res.graphContent.layout.yaxis.linecolor = 'black';\n            Plotly.newPlot(graphDiv, res.graphContent.data, res.graphContent.layout);\n            this._spinner.stopSpinner();\n          } else if (res.graphContent.includes('.html')) {\n            // this._spinner.showSpinner();\n            this.openEdaReport({ projectId: this.project._id, fileName: res.graphContent });\n          } else {\n            this._spinner.stopSpinner();\n            this._toaster.error(res.graphContent, 'Model');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.message, 'Model');\n        }\n      );\n  }\n\n  /**\n   * Update cluster name in model collection\n   */\n  updateClusterData() {\n    this._spinner.showSpinner();\n    let analysisObj = [];\n    this.model.modelMetaData.analysisInfo.map((element) => {\n      let a = {\n        clusterId: element.clusterId,\n        clusterName: element.clusterName,\n      };\n      analysisObj.push(a);\n    });\n    let reqObj = {\n      analysisMap: analysisObj,\n      modelMetaData: this.model.modelMetaData,\n      modelId: this.model._id,\n    };\n    this._models\n      .updateModel(reqObj, this.model._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this.trainings[0].models = this.trainings[0].models.map((data: any) => {\n            if (data._id === res._id) {\n              data.modelMetaData.analysisInfo = res.modelMetaData.analysisInfo;\n              data.modelMetaData.modelPath = res.modelMetaData.modelPath;\n              data.showUpdateButton = false;\n            }\n            return data;\n          });\n          this.updateTrainingModels.emit(this.trainings[0].models);\n          this.showUpdateButton = false;\n          this._spinner.stopSpinner();\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.message, 'Model');\n        }\n      );\n  }\n\n  showSummary() {\n    this.hideSummary = false;\n    this.hideHeatMap = true;\n  }\n  /**\n   *  function to plot heat map for the clustering\n   */\n  plotHeatMap(): void {\n    let graphDiv: any = document.getElementById(this.heatMapDiv);\n    this._spinner.showSpinner();\n    this.hideSummary = true;\n    this.hideHeatMap = false;\n    let analysisObj = [];\n    this.model.modelMetaData.analysisInfo.map((element) => {\n      let a = {\n        clusterId: element.clusterId,\n        clusterName: element.clusterName,\n      };\n      analysisObj.push(a);\n    });\n    let reqObj = {\n      analysisInfo: analysisObj,\n      clusterStats: this.model.modelMetaData.clusterStats,\n    };\n    this._models\n      .clusterHeatMap(this.training._id, this.model._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          Plotly.newPlot(graphDiv, res.graphContent.data, res.graphContent.layout);\n          this._spinner.stopSpinner();\n        },\n        (err: Error) => {\n          this._toaster.error(err?.message || 'Cannot generate heat map', 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Decision tree plot\n   */\n  plotDecisionTreePlot(): void {\n    this._spinner.showSpinner();\n    let analysisObj = [];\n    this.model.modelMetaData.analysisInfo.map((element) => {\n      let a = {\n        clusterId: element.clusterId,\n        clusterName: element.clusterName,\n      };\n      analysisObj.push(a);\n    });\n    let reqObj = {\n      analysisInfo: analysisObj,\n      treeModelOutput: this.model.modelMetaData.treeModelOutput,\n    };\n    this._models\n      .clusterDecisionTree(this.training._id, this.model._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.showSpinner = true;\n            const base64 = `data:image/jpg;base64,${res.graphContent}`;\n            this.decisionTreeImage = this._sanitizer.bypassSecurityTrustResourceUrl(base64);\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(err?.message || 'Cannot generate decision tree graph', 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * download decision tree\n   */\n  downloadDecisionTree(): void {\n    this._spinner.showSpinner();\n    let analysisObj = [];\n    this.model.modelMetaData.analysisInfo.map((element) => {\n      let a = {\n        clusterId: element.clusterId,\n        clusterName: element.clusterName,\n      };\n      analysisObj.push(a);\n    });\n    let reqObj = {\n      analysisInfo: analysisObj,\n      operation: 'download',\n      treeModelOutput: this.model.modelMetaData.treeModelOutput,\n    };\n    // API call\n    this._models\n      .clusterDecisionTree(this.training._id, this.model._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          this._spinner.stopSpinner();\n          if (res.graphContent) {\n            window.open(\n              `${environment.serverBaseUrl}/api/projects/${this.model.projectId}/decisionTree/download/${res.graphContent}`,\n              '_blank'\n            );\n          } else {\n            this._toaster.error(res.graphContent || 'Cannot download decision tree', 'Models');\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this._toaster.error(err.error?.message || 'Cannot download decision tree', 'Models');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * function to toggle between visualization\n   */\n  togglePlot(): void {\n    if (this.model.modelMetaData.clusteringGraphType === 'featureImp') {\n      this.viewType = 'graph';\n      this.plotFeatureImp();\n    } else if (this.model.modelMetaData.clusteringGraphType === 'scatter') {\n      this.viewScatterPlot = true;\n    } else if (this.model.modelMetaData.clusteringGraphType === 'decisionTree') {\n      this.plotDecisionTreePlot();\n    }\n  }\n\n  /**\n   * function for hide/show button\n   */\n  onFocusOut(editedItem, index) {\n    if (editedItem[0] === ' ') {\n      this.showSnackBar('Cluster name cannot contain space', 'OK');\n      return;\n    }\n    if (editedItem === '') {\n      this.showSnackBar('Cluster name cannot be blank', 'OK');\n      return;\n    }\n    if (editedItem.length > 20) {\n      this.showSnackBar('Cluster name max length is 20 characters', 'OK');\n      return;\n    }\n    let form = /^[^\\s][A-Za-z0-9_\\- ]+$/;\n    if (form.test(editedItem) === false) {\n      this.showSnackBar('Invalid cluster name.Only _ and - are supported', 'OK');\n      return;\n    }\n    if (typeof +editedItem === 'number' && !isNaN(+editedItem)) {\n      this.showSnackBar('Cluster name can not have only numeric value', 'OK');\n      return;\n    }\n    let clusterName = this.model.modelMetaData.analysisInfo.filter((item) => {\n      return item.clusterName === editedItem;\n    });\n    if (clusterName.length > 0) {\n      this.model.showUpdateButton = false;\n      this.showSnackBar('Cluster name cannot be duplicate', 'OK');\n    } else {\n      this.model.modelMetaData.analysisInfo[index].clusterName = editedItem;\n      this.model.showUpdateButton = true;\n    }\n  }\n\n  viewClusterFaq(clusterTemplate: TemplateRef<any>, Data?: any) {\n    this._spinner.showSpinner();\n    this.dialogRef = this._dialog.open(clusterTemplate, {\n      // height: 'auto',\n      width: '80%',\n    });\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this.dialogRef.close(data);\n  }\n  /**\n   * If the report type is EDA, then preview the EDA report in modal\n   * @param reportData\n   */\n  openEdaReport(edaReportData: any): void {\n    /** Opens the eda report component modal to render report */\n    this._dialog\n      .open(EdaReportComponent, {\n        data: {\n          moduleName: 'cluster',\n          edaReportData: edaReportData,\n        },\n        maxHeight: '95vh',\n        minWidth: '95vw',\n      })\n      .afterOpened()\n      .subscribe((any) => {\n        this._spinner.stopSpinner();\n      });\n  }\n\n  /**\n   * Checks the value is number or string and returns booleans\n   * @param val\n   * @returns\n   */\n  checkIsNumber = (val: any) => (typeof val === 'string' ? false : true);\n\n  /**\n   * Renders the snackbar\n   */\n  showSnackBar(message: string, button: string): void {\n    this.snackBarRef = this._snackBar.open(message, button, {\n      horizontalPosition: 'right',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  /**\n   * Function to sort an array of objects as per the key\n   * @param {*} items input data - array\n   * @param {*} key key for comparison\n   */\n  sortArryOFObjects(items: any, key: any): any {\n    items.sort((a: any, b: any) => {\n      return b[key] - a[key];\n    });\n    return items;\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n    if (this.dataSource) {\n      this.dataSource.disconnect();\n    }\n  }\n}\n","<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <i class=\"fas fa-cubes folder-icon\"></i>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title ml-0\">Models Leaderboard</h3>\n      </mat-card-title>\n      <!-- Buttons -->\n      <span *ngIf=\"trainingList.length\" class=\"ml-auto\">\n        <button mat-button class=\"text-primary\" [matTooltip]=\"_utils.getTootip('uploadScoringData')\"\n          *ngIf=\"project.type === 'predictive_modeling' && modelSupported?.length\"\n          (click)=\"openScoringDataTemplate(scoringDataTemplate)\">\n          Upload Scoring Data\n        </button>\n        <button mat-button class=\"text-primary\" [matTooltip]=\"_utils.getTootip('quickPrediction')\"\n          *ngIf=\"project.type !== 'timeseries' && modelSupported?.length\" (click)=\"openQuickPredictionDialog()\">\n          Quick Prediction\n        </button>\n        <button mat-button class=\"text-primary\" [matTooltip]=\"_utils.getTootip('compareModels')\"\n          *ngIf=\"project.type === 'predictive_modeling' && trainings[0]?.models?.length > 1\"\n          (click)=\"openGraphDialog('compareModel')\" [routerLink]=\"\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedModelOptions.includes('compareModels')\n          \">\n          <span matBadge [matBadgeIcon]=\"allowedModelOptions.includes('compareModels') ? '' : 'ENT'\"\n            matBadgeOverlap=\"false\" [ngClass]=\"\n              appType === 'enterprise' ||\n              (appType === 'saas' &&\n                (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n              allowedModelOptions.includes('compareModels')\n                ? ''\n                : 'text-muted disable-Btn'\n            \">Compare Models</span>\n        </button>\n        <!-- <a\n          [matTooltip]=\"_utils.getTootip('timeVsAccuracy')\"\n          *ngIf=\"project.type === 'predictive_modeling'\"\n          [routerLink]=\"\"\n          (click)=\"openGraphDialog('timeAccuracy')\"\n        >\n          Time vs Accuracy <span class=\"mx-2 text-muted\">|</span>\n        </a> -->\n        <button mat-button class=\"text-primary\" [matTooltip]=\"_utils.getTootip('featureScore')\"\n          [hidden]=\"trainings[0]?.predictiveModelingInfo.featureSelectionMethod === 'none'\"\n          *ngIf=\"project.type === 'predictive_modeling'\" (click)=\"openGraphDialog('featureScore')\" [routerLink]=\"\">\n          Feature Score\n        </button>\n        <button mat-button class=\"text-primary\" [matTooltip]=\"_utils.getTootip('pipeline')\" [routerLink]=\"\"\n          (click)=\"openPipelineDialog()\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            user?.planType === 'basic' &&\n            !allowedModelOptions.includes('pipeline')\n          \">\n          <span matBadge [matBadgeIcon]=\"allowedModelOptions.includes('pipeline') ? '' : 'PRO'\" matBadgeOverlap=\"false\"\n            [ngClass]=\"\n              appType === 'enterprise' ||\n              (appType === 'saas' &&\n                (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n              allowedModelOptions.includes('pipeline')\n                ? ''\n                : 'text-muted disable-Btn'\n            \">Pipeline</span>\n        </button>\n      </span>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!trainingList.length\" class=\"text-center mt-5 font-weight-normal\">\n    You haven't trained any models yet,\n    <a class=\"text-decoration-none\" href=\"#\" [routerLink]=\"['/project/training']\">train it now.</a>\n  </h4>\n\n  <!-- CPU LOAD -->\n  <!-- <div *ngIf=\"trainingList.length\" class=\"col-md-3\">\n    <h5 class=\"showCPU-Load text-center\" (click)=\"showCPULoad = !showCPULoad\">\n      <mat-icon class=\"chevron-icon\" *ngIf=\"!showCPULoad\">expand_more</mat-icon>\n      <mat-icon class=\"chevron-icon\" *ngIf=\"showCPULoad\">expand_less</mat-icon>\n      {{ showCPULoad ? 'Hide CPU Load' : 'Show CPU Load' }}\n    </h5>\n  </div>\n  <div *ngIf=\"showCPULoad && trainingList.length\" class=\"d-flex justify-content-center text-center\">\n    <div\n      class=\"cpuLoadeasypie-chart mt-2\"\n      easypiechart\n      *ngFor=\"let cpu of cpuLoad; index as i\"\n      [options]=\"pieOptions1\"\n      percent=\"{{ cpu.CPU | number: '1.2-2' }}\"\n    >\n      <span>{{ cpu.CPU | number: '1.2-2' }}%</span>\n    </div>\n    <hr />\n  </div> -->\n\n  <!-- MODEL INFO SELECT and FILTER -->\n  <div class=\"row mt-5\" *ngIf=\"trainings[0] && filtersArray && currentModelMeta\">\n    <!-- LABEL (dataset name) -->\n    <div class=\"dataset-name col-md-6 d-flex align-items-center\">\n      <i class=\"{{\n          showTrainingSpinner ? 'fas fa-cog fa-spin fa-2x mr-3' : 'fas fa-check-circle fa-2x mr-3'\n        }}\"></i>\n      <div>\n        <h5>{{ trainings[0]?.models?.length }}/{{ totalAlgos }} Models generated</h5>\n        <h5 class=\"mb-0 flex-column text-break\">\n          {{\n          currentModelMeta.name\n          ? (currentModelMeta.fileName | dropFileExtension: 'file')\n          : (currentModelMeta.fileName | dropFileExtension: 'file')\n          }}\n        </h5>\n      </div>\n    </div>\n    <div class=\"d-flex align-items-center justify-content-end col-md-6\">\n      <!-- SELECT (trainings) -->\n      <div class=\"mx-2\">\n        <mat-form-field id=\"removeBtmPadding\" appearance=\"outline\">\n          <mat-label>Select a training</mat-label>\n          <mat-select [formControl]=\"selectedTrainingControl\" (selectionChange)=\"trainingChanged($event.value)\"\n            required>\n            <mat-option *ngFor=\"let dataItem of trainingList; index as i\" [value]=\"dataItem._id\">Training {{ i + 1 }} -\n              {{ dataItem.createdAt | date: 'dd/MM/yy h:mm a' }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              selectedTrainingControl.hasError('required') &&\n              (selectedTrainingControl.dirty || selectedTrainingControl.touched)\n            \">\n            Please select any one training.\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <!-- BUTTON (delete training) -->\n      <button matTooltip=\"Delete selected training\" mat-icon-button (click)=\"deleteTraining()\" class=\"delete-training\">\n        <i class=\"far fa-trash-alt\"></i>\n      </button>\n      <!-- SELECT (filter) -->\n      <div class=\"ml-2\" *ngIf=\"project.type === 'predictive_modeling' && filter\">\n        <mat-form-field id=\"removeBtmPadding\" appearance=\"outline\">\n          <mat-label>Select a filter</mat-label>\n          <mat-select [(ngModel)]=\"filter[0]\" (selectionChange)=\"filterChanged($event.value)\">\n            <mat-option *ngFor=\"let type of filtersArray\" [value]=\"type.id\">\n              {{ type.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <!-- ICON (sort) -->\n      <div class=\"ml-1\" *ngIf=\"project.type === 'predictive_modeling' && filter\">\n        <button *ngIf=\"filterSortOrder === 'asc'\" (click)=\"filterSortOrderChanged('desc')\" mat-icon-button\n          class=\"sort-icon\">\n          <i class=\"fas fa-sort-amount-up\"></i>\n        </button>\n        <button *ngIf=\"filterSortOrder === 'desc'\" (click)=\"filterSortOrderChanged('asc')\" mat-icon-button\n          class=\"sort-icon\">\n          <i class=\"fas fa-sort-amount-down\"></i>\n        </button>\n      </div>\n    </div>\n    <!-- TARGET -->\n    <div class=\"ml-3 mt-4\" *ngIf=\"project.type !== 'clustering'\">\n      <mat-chip-list>\n        <mat-chip>\n          <mat-icon class=\"mr-2\">noise_aware</mat-icon>{{ target }}\n        </mat-chip>\n      </mat-chip-list>\n    </div>\n  </div>\n\n  <!-- ACCORDION (models list) -->\n  <div *ngIf=\"trainings.length\" class=\"row mt-2\">\n    <div *ngFor=\"let training of trainings; trackBy: trackByFn\" class=\"col-md-12\">\n      <mat-accordion *ngFor=\"let model of training?.models; index as i\" class=\"custom-accordion\" multi>\n        <!-- BADGE (recommended) -->\n        <i *ngIf=\"\n            i === 0 &&\n            filter[0] === 'overallScore' &&\n            filterSortOrder === 'desc' &&\n            project.type === 'predictive_modeling'\n          \" class=\"recommended-tick fas fa-check-circle fa-2x mr-2\"></i>\n        <!-- [style.background-color]=\"\n          i === 0 &&\n          filter[0] === 'overallScore' &&\n          filterSortOrder === 'desc' &&\n          project.type === 'predictive_modeling'\n            ? 'linen'\n            : ''\n        \" -->\n        <!-- {{model.graphSupported?.status === false || model.graphSupported?.isDeleted === true}} -->\n        <mat-expansion-panel class=\"my-3\" [hideToggle]=\"true\" [disabled]=\"model.graphSupported?.status === false || model.graphSupported?.isDeleted === true\">\n          <mat-expansion-panel-header [collapsedHeight]=\"'105px'\" [expandedHeight]=\"'105px'\">\n            <!-- MODEL TITLE -->\n            <mat-panel-title>\n              <!-- PIE -->\n              <div *ngIf=\"project.type === 'predictive_modeling'\" class=\"easypie-chart mt-2\" easypiechart\n                [options]=\"pieOptions1\" [percent]=\"model.modelMetaData.holdout.overallScore * 100 | number: '1.2-2'\"\n                [matTooltip]=\"_utils.getTootip('overallScore')\">\n                <span>{{ model.modelMetaData.holdout.overallScore * 100 | number: '1.2-2' }}%</span>\n              </div>\n              <!-- ALGO NAME -->\n              <h4 class=\"mx-3 mb-0 font-weight-normal\">{{ i + 1 }}</h4>\n              <h4 [style.color]=\"\n                  i === 0 &&\n                  filter[0] === 'overallScore' &&\n                  filterSortOrder === 'desc' &&\n                  project.type === 'predictive_modeling'\n                    ? '#08509d'\n                    : ''\n                \" class=\"mb-0 font-weight-normal\">\n                {{ training.name }} - {{ model.modelMetaData.algoName }}\n                <!-- LABEL (training time) -->\n                <span class=\"m-0 ml-1 h5\" *ngIf=\"model.modelMetaData.timeElapsed\"\n                  [matTooltip]=\"_utils.getTootip('trainingTime')\">\n                  ({{ model.modelMetaData.timeElapsed | number: '1.2-2' }} sec)\n                </span>\n                <!-- ICON (info) -->\n                <i (click)=\"getAlgoDouUrl(model.modelMetaData.algoName); $event.stopPropagation()\"\n                  style=\"color: lightslategray\" class=\"fas fa-info-circle ml-2\"\n                  matTooltip=\"Click to view algoirthm info\"></i>\n              </h4>\n            </mat-panel-title>\n            <!-- ACTION BUTTONS -->\n            <mat-panel-description>\n              <button [matTooltip]=\"_utils.getTootip('rejectedGroups')\" *ngIf=\"project.type === 'timeseries' && training.edaId.isMultipleTimeseries && rejectedGroupList?.length\" \n              (click)=\"openRejectedroup(rejectedGroupTemplate, training, model);\n                                $event.stopPropagation()\n                              \" [disabled]=\"model.graphSupported?.status === false || model.graphSupported?.isDeleted === true\" mat-icon-button>\n                <mat-icon>receipt</mat-icon>\n              </button> \n              <!-- BUTTON (report analysis) -->\n              <button [matTooltip]=\"_utils.getTootip('analysisReport')\" *ngIf=\"project.type !== 'predictive_modeling'\"\n                (click)=\"\n                  openGraphDialog('analysis', training, model, 'development');\n                  $event.stopPropagation()\n                \" [disabled]=\"model.graphSupported?.status === false || model.graphSupported?.isDeleted === true\" mat-icon-button>\n                <mat-icon>insert_chart_outlined</mat-icon>\n              </button>\n              <!-- BUTTON (retrain) -->\n              <button *ngIf=\"!project.useGPU && project.type === 'predictive_modeling'\"\n                (click)=\"openFormDialog('retrain', training, model); $event.stopPropagation()\" mat-icon-button\n                [disabled]=\"\n                  (appType === 'saas' &&\n                  !user?.roles?.includes('super_admin') &&\n                  !user?.roles?.includes('admin') &&\n                  !allowedModelOptions.includes('retrain')) ||\n                  (model.graphSupported?.status === false || model.graphSupported?.isDeleted === true)\n                \">\n                <mat-icon matBadge [matBadgeIcon]=\"allowedModelOptions.includes('retrain') ? '' : 'ENT'\"\n                  [matTooltip]=\"_utils.getTootip('retrain')\" [ngClass]=\"\n                    appType === 'enterprise' ||\n                    (appType === 'saas' &&\n                      (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                    allowedModelOptions.includes('retrain')\n                      ? ''\n                      : 'disable-Btn'\n                  \">\n                  loop</mat-icon>\n              </button>\n              <!-- BUTTON (model tuning) -->\n              <button *ngIf=\"project.type !== 'clustering' && (model.modelMetaData.algoName !=='Random Forest' && model.modelMetaData.algoName !== 'Linear Regression Ts')\"\n                (click)=\"openFormDialog('tuning', training, model); $event.stopPropagation()\" mat-icon-button\n                matTooltip=\"Hyper Parameter Tuning (HPT)\" [disabled]=\"(model.graphSupported?.status === false || model.graphSupported?.isDeleted === true) || model.graphSupported?.hpt === false\">\n                <mat-icon>replay</mat-icon>\n              </button>\n              <div *ngIf=\"!project.useGPU\">\n                <!-- BUTTON (download toolkit) -->\n                <button (click)=\"downloadModel('multi-model', training, model); $event.stopPropagation()\"\n                  mat-icon-button [disabled]=\"\n                    (appType === 'saas' &&\n                    !user?.roles?.includes('super_admin') &&\n                    !user?.roles?.includes('admin') &&\n                    !allowedModelOptions.includes('downloadModel')) ||\n                    (model.graphSupported?.status === false || model.graphSupported?.isDeleted === true)\n                  \">\n                  <mat-icon matTooltip=\"Download model for multi-model container\" matBadge\n                    [matBadgeIcon]=\"allowedModelOptions.includes('downloadModel') ? '' : 'ENT'\" [ngClass]=\"\n                      appType === 'enterprise' ||\n                      (appType === 'saas' &&\n                        (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                      allowedModelOptions.includes('downloadModel')\n                        ? ''\n                        : 'disable-Btn'\n                    \">sim_card_download</mat-icon>\n                </button>\n                <!-- BUTTON (deploy model) -->\n                <button mat-icon-button (click)=\"\n                    deployModel(deployModelTemplate, 'multi-model', training, model);\n                    $event.stopPropagation()\n                  \" [disabled]=\"\n                    (appType === 'saas' &&\n                    !user?.roles?.includes('super_admin') &&\n                    !user?.roles?.includes('admin') &&\n                    !allowedModelOptions.includes('deployModel')) ||\n                    (model.graphSupported?.status === false|| model.graphSupported?.isDeleted === true)\n                  \">\n                  <mat-icon matTooltip=\"Deploy model\" matBadge\n                    [matBadgeIcon]=\"allowedModelOptions.includes('deployModel') ? '' : 'ENT'\" [ngClass]=\"\n                      appType === 'enterprise' ||\n                      (appType === 'saas' &&\n                        (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                      allowedModelOptions.includes('deployModel')\n                        ? ''\n                        : 'disable-Btn'\n                    \">\n                    cloud_upload</mat-icon>\n                </button>\n                <!-- BUTTON (delete) -->\n                <button matTooltip=\"Delete model\" (click)=\"deleteModel(model, training); $event.stopPropagation()\"\n                  mat-icon-button [disabled]=\"model.graphSupported?.status === false || model.graphSupported?.isDeleted === true\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </div>\n              <!-- MORE OPT MENU -->\n              <button *ngIf=\"\n                  project.type === 'predictive_modeling' &&\n                  (model.graphSupported?.advancedOpt.featureCoeff == true ||\n                    model.graphSupported?.advancedOpt.featureImp == true ||\n                    model.graphSupported?.advancedOpt.decisionTreeGraph == true ||\n                    model.graphSupported?.advancedOpt.advancedAlgo == true)\n                \" mat-icon-button [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\"\n                [disabled]=\"model.graphSupported?.status === false || model.graphSupported?.isDeleted === true\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #menu=\"matMenu\">\n                <!-- FEATURE COEFF -->\n                <button [matTooltip]=\"_utils.getTootip('featureCoefficient')\"\n                  *ngIf=\"model.graphSupported?.advancedOpt?.featureCoeff\"\n                  (click)=\"openGraphDialog('featureCoeff', training, model)\" mat-menu-item>\n                  <mat-icon>leaderboard</mat-icon>\n                  <span>Feature coefficient graph</span>\n                </button>\n                <!-- FEATURE IMP -->\n                <button [matTooltip]=\"_utils.getTootip('featureImportance')\"\n                  *ngIf=\"model.graphSupported?.advancedOpt?.featureImp\"\n                  (click)=\"openGraphDialog('featureImp', training, model)\" mat-menu-item>\n                  <mat-icon>leaderboard</mat-icon>\n                  <span>Feature importance</span>\n                </button>\n                <!-- DECISION TREE -->\n                <button [matTooltip]=\"_utils.getTootip('decisionTree')\"\n                  *ngIf=\"model.graphSupported?.advancedOpt?.decisionTreeGraph == true\"\n                  (click)=\"openGraphDialog('decisionTree', training, model)\" mat-menu-item [disabled]=\"\n                    appType === 'saas' &&\n                    !user?.roles?.includes('super_admin') &&\n                    !user?.roles?.includes('admin') &&\n                    user?.planType === 'basic' &&\n                    !allowedModelOptions.includes('decisionTree')\n                  \">\n                  <span matBadge [matBadgeIcon]=\"allowedModelOptions.includes('decisionTree') ? '' : 'PRO'\"\n                    matBadgeOverlap=\"false\">\n                    <mat-icon [ngClass]=\"\n                        appType === 'enterprise' ||\n                        (appType === 'saas' &&\n                          (user?.roles?.includes('super_admin') ||\n                            user?.roles?.includes('admin'))) ||\n                        allowedModelOptions.includes('decisionTree')\n                          ? ''\n                          : 'text-muted'\n                      \">\n                      account_tree</mat-icon>Decision tree graph\n                  </span>\n                </button>\n                <!-- ADV ALGO -->\n                <button matTooltip=\"Advanced Algorithms\" *ngIf=\"\n                    !project.useGPU &&\n                    !training.isMultilabel &&\n                    model.graphSupported?.advancedOpt?.advancedAlgo == true\n                  \"\n                  [hidden]=\"model.isAlgoSupported == false || (this.disableBagging == true && this.disableBoosting == true)\"\n                  (click)=\"isAdvAlogSupported(training, model)\" mat-menu-item [disabled]=\"\n                    appType === 'saas' &&\n                    !user?.roles?.includes('super_admin') &&\n                    !user?.roles?.includes('admin') &&\n                    user?.planType === 'basic' &&\n                    !allowedModelOptions.includes('advanceAlgorithm')\n                  \">\n                  <span matBadge [matBadgeIcon]=\"allowedModelOptions.includes('advanceAlgorithm') ? '' : 'PRO'\"\n                    matBadgeOverlap=\"false\">\n                    <mat-icon [ngClass]=\"\n                        appType === 'enterprise' ||\n                        (appType === 'saas' &&\n                          (user?.roles?.includes('super_admin') ||\n                            user?.roles?.includes('admin'))) ||\n                        allowedModelOptions.includes('advanceAlgorithm')\n                          ? ''\n                          : 'text-muted disable-Btn'\n                      \">\n                      assignment</mat-icon>Advance algorithm\n                  </span>\n                </button>\n              </mat-menu>\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n          <!-- EXPANSION BODY -->\n          <!-- PREDICTIVE MODELING -->\n          <div *ngIf=\"project.type === 'predictive_modeling'\">\n            <app-predictive-expansion [training]=\"training\" [model]=\"model\"\n              [originalFileWithEdaDetails]=\"originalFileWithEdaDetails\" [trainings]=\"trainings\"\n              (updateTrainingModels)=\"updateTrainingModels($event)\">\n            </app-predictive-expansion>\n          </div>\n          <!-- TIMESERIES -->\n          <div *ngIf=\"project.type === 'timeseries'\">\n            <app-timeseries-expansion [training]=\"training\" [model]=\"model\"\n              [originalFileWithEdaDetails]=\"originalFileWithEdaDetails\"\n              (updateTrainingModels)=\"updateTrainingModels($event)\"></app-timeseries-expansion>\n          </div>\n          <!-- CLUSTERING -->\n          <div *ngIf=\"project.type === 'clustering'\">\n            <app-cluster-expansion [training]=\"training\" [model]=\"model\" [trainings]=\"trainings\"\n              [originalFileWithEdaDetails]=\"originalFileWithEdaDetails\"\n              (updateTrainingModels)=\"updateTrainingModels($event)\">\n            </app-cluster-expansion>\n          </div>\n        </mat-expansion-panel>\n      </mat-accordion>\n    </div>\n  </div>\n</div>\n\n<!-- Download Model -->\n<ng-template #downloadToolkit>\n  <h2 mat-dialog-title>Download Model</h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <mat-checkbox class=\"example-margin\" [formControl]=\"psType\">\n      For PsLite (optional)</mat-checkbox>\n  </mat-dialog-content>\n\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Close</button>\n    <button mat-flat-button mat-dialog-close class=\"btn-primary\" (click)=\"downloadModelFile()\">\n      Download\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!-- Deploy Model -->\n<ng-template #deployModelTemplate>\n  <h2 mat-dialog-title>Deploy Model</h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Host List</mat-label>\n      <mat-select [(ngModel)]=\"selectedHost\" #deployModel=\"ngModel\" required>\n        <mat-option *ngFor=\"let host of hostlist\" [value]=\"host\">{{ host.hostName }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div *ngIf=\"selectedHost\" class=\"table-responsive mt-50\">\n      <table class=\"table table-bordered hover\">\n        <colgroup>\n          <col width=\"30%\" />\n          <col width=\"40%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>Host Name</th>\n            <th>Host Url</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{{ selectedHost.hostName }}</td>\n            <td>{{ selectedHost.url }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <!-- <mat-checkbox class=\"example-margin\" [formControl]=\"deployPsType\">\n      For PsLite (optional)</mat-checkbox> -->\n  </mat-dialog-content>\n\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Close</button>\n    <button mat-flat-button mat-dialog-close [disabled]=\"deployModel.invalid\" class=\"btn-primary\"\n      (click)=\"deployModelFile()\">\n      Deploy\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!-- scoring Data -->\n<ng-template #scoringDataTemplate>\n  <h2 mat-dialog-title>Upload Scoring Data</h2>\n  <mat-dialog-content class=\"mat-typography preview-data-section mb-3\">\n    <mat-form-field appearance=\"outline\" class=\"mt-5\">\n      <mat-label>Select encoding</mat-label>\n      <mat-select [(ngModel)]=\"fileEncoding\" required>\n        <mat-option value=\"utf_8\">utf_8</mat-option>\n        <mat-option value=\"latin_1\">latin_1</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div class=\"mt-2\">\n      <input class=\"mb-2\" type=\"file\" name=\"file\" accept=\".csv\"\n        (change)=\"handleFileInput($event.target.files, fileEncoding)\" /><br />\n      <mat-hint class=\"mt-2\">Only .csv file is allowed.</mat-hint>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n    <button mat-flat-button mat-dialog-close class=\"btn-primary\" (click)=\"uploadScoringData()\">\n      Upload\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<ng-template #rejectedGroupTemplate>\n  <h2 mat-dialog-title>Rejected Timeseries Group List</h2>\n  <mat-dialog-content class=\"mat-typography\">\n    <div>\n      <ol class=\"list-group list-group-numbered\">\n          <li *ngFor=\"let item of rejectedGroupList\" class=\"bullet-font list-group-item\">\n            <p class=\"bullet-font m-0 capitalize\">\n            {{item}}\n            </p>\n          </li>\n      </ol>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Close</button>\n  </mat-dialog-actions>\n</ng-template>","import { HttpErrorResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { UtilsService } from './../../shared/utils.service';\nimport { GraphsDialogHandlerComponent } from './graphs-dialog-handler/graphs-dialog-handler.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { SocketIoService } from './../../core/socket-io.service';\nimport { FormsDialogHandlerComponent } from './forms-dialog-handler/forms-dialog-handler.component';\nimport { TrainingService } from './../training/training.service';\nimport { DataService } from './../data/data.service';\nimport { Component, OnInit, TemplateRef } from '@angular/core';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { ModelsService } from './models.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { ColorsService } from '../../shared/colors/colors.service';\nimport { Validators, FormControl } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { QuickPredictionComponent } from './quick-prediction/quick-prediction.component';\nimport { PipelineComponent } from './pipeline/pipeline.component';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { ThemePalette } from '@angular/material/core';\nimport { includes } from 'lodash';\nimport { EdaService } from '../eda/eda.service';\nconst Plotly = require('plotly.js-dist');\ndeclare var $: any;\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-models',\n  templateUrl: './models.component.html',\n  styleUrls: ['./models.component.scss'],\n})\nexport class ModelsComponent implements OnInit {\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n  ALGORITHMS_ARRAY: Array<any>;\n  /** Form instance */\n  selectedTrainingControl = new FormControl('', Validators.required);\n\n  /** Radial progress pie setting */\n  pieOptions1: any = {\n    animate: {\n      duration: 1000,\n      enabled: true,\n    },\n    barColor: this._colors.byName('success'),\n    trackColor: '#f2f2f2',\n    scaleColor: false,\n    lineWidth: 7,\n    size: 80,\n    lineCap: 'round',\n  };\n  fileToUpload: any;\n  allowedPSFileUploadSize: number;\n  dialogRef: MatDialogRef<any>;\n  fileEncoding: any;\n  /** sort and Rak models */\n  values: Array<any> = [];\n  trainings: Array<any> = [];\n  clusteringFeatures: Array<any> = [];\n  filter: Array<any> = ['overallScore'];\n  pipelineTasks: any;\n  filterSortOrder: string = 'desc';\n  data: Array<any> = [\n    {\n      key: 'Model comparison',\n      values: '',\n    },\n  ];\n\n  // Progress spinner settings\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  downloadToolkitDiameter = 50;\n  psType = new FormControl('', Validators.required);\n  downloadFile = new FormControl('', Validators.required);\n  psTypeDef: any;\n\n  //Download Model Config\n  downloadTraining: any;\n  downloadModelInfo: any;\n  downloadAlgoType: any;\n  downloadPlatform: any;\n  downloadProject: any;\n  downloadFileId: any;\n  downloadNotebookInputFileId: any;\n  downloadNotebooks: any;\n  downloadPsType: any;\n  target: any;\n  /**Deploy Model */\n  deployPsType = new FormControl('', Validators.required);\n  hostlist: Array<any> = [];\n  deployObj: any;\n  deployReqObj: any;\n  resDeployfile: any;\n  modelDeployed: any;\n\n  deployPsTypeflag: any;\n  deployFileId: any;\n  deployTraining: any;\n  deployModelInfo: any;\n  deployAlgoType: any;\n  deployPlatform: any;\n  deployProject: any;\n  deployNotebookInputFileId: any;\n  deployNotebooks: any;\n  selectedHost: any;\n\n  showCPULoad: boolean;\n\n  showTrainingSpinner: boolean = false;\n  erroCount: number = 0;\n  totalAlgos: number = 0;\n\n  project: any;\n  user: any;\n  trainingList: Array<any> = [];\n  previousTraining: any;\n  currentModelMeta: any;\n  algorithmsList: any;\n  ModelsList: any;\n  originalFileDetails: any;\n  originalFileWithEdaDetails: any;\n  notebookInputFileDetails: any;\n  filtersArray: Array<any> = [];\n  forcastHtmlData: Array<any> = [];\n  selectedFeatures: Array<any> = [];\n  sourceType: string;\n  predictionResult: boolean;\n  cpuLoad: any;\n  uploadScoringUrl: string;\n  isMulticlass: Boolean = false;\n  // restriction variables\n  appType: string = environment.appType;\n  allowedModelOptions: Array<any> = null;\n  isAdvanceAlgoSupport: boolean = true;\n  modelSupported: any;\n  disableBagging: Boolean = false;\n  disableBoosting: Boolean = false;\n  rejectedGroupList: any;\n  constructor(\n    private _localStorage: LocalStorageService,\n    private _models: ModelsService,\n    private _spinner: SpinnerService,\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _colors: ColorsService,\n    private _training: TrainingService,\n    private _window: Window,\n    private _dialog: MatDialog,\n    private _socket: SocketIoService,\n    private _router: Router,\n    private _snackBar: MatSnackBar,\n    public _utils: UtilsService,\n    private _snackbar: MatSnackBar,\n    private _eda: EdaService,\n  ) {}\n\n  async ngOnInit(): Promise<any> {\n    this._spinner.showSpinner();\n    this.initTrainingSocket();\n    this.initDataDriftSocket();\n    this.initCpuLoadSocket();\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.allowedPSFileUploadSize = this.user?.psFeatures?.allowedPSFileUploadSize || 50;\n    this.ALGORITHMS_ARRAY = await this._utils.getAlgorithms();\n    this.ALGORITHMS_ARRAY.filter((item) => {\n      if (\n        (item.name == 'Bagging Classifier' || item.name == 'Bagging Regressor') &&\n        item.status === false\n      ) {\n        this.disableBagging = true;\n      }\n      if (\n        (item.name == 'Boosting Classifier' || item.name == 'Boosting Regressor') &&\n        item.status === false\n      ) {\n        this.disableBoosting = true;\n      }\n      return item;\n    });\n    await this.getTrainingsList();\n    this.fileEncoding = 'utf_8';\n    this.allowedModelOptions = this.user?.psFeatures?.allowedFeaturesList || [];\n  }\n\n  /**\n   * Fetches all the trainings list\n   * @param projectId\n   */\n  async getTrainingsList(): Promise<any> {\n    this._models\n      .getTrainingList(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        async (res) => {\n          if (res.length) {\n            this.trainingList = res;\n            this.previousTraining = res[0];\n            this.selectedTrainingControl.setValue(res[0]._id);\n            this.setFilterList(res[0].algoType);\n            this.selectedTrainingControl.value\n              ? await this.showSelectedTrainingModels(res[0])\n              : null;\n            this.currentModelMeta = {\n              name: 'Training 1',\n              trainingId: res[0]._id,\n              createdAt: res[0].createdAt,\n              originalFileId: res[0].originalFileId,\n              fileName: res[0].metaInfo.fileName ? res[0].metaInfo.fileName : '',\n            };\n\n            // this.activate();`\n            if (res[0].models[0].modelMetaData) {\n              this.sortAndRankModels(res[0]);\n              res[0].problemType === 'clustering' ? this.genClusteringFeatures(res[0]) : null;\n              this.trainings = [res[0]];\n              if (\n                this.trainings[0].classNames &&\n                this.trainings[0].classNames.length > 2 &&\n                this.trainings[0].isMultilabel == false\n              ) {\n                this.isMulticlass = true;\n              }\n              this.target = this.trainings[0].depVariable;\n              this.supportedGraphList();\n              // ! Need to understand the below code flow - for why and what it is used\n              // fetchProjectDetails().$promise.then(\n              //   function (resp) {\n              //     ProjectCore.setProject(resp[0]);\n              //     initModels(resp[0].type, this.trainings.models);\n              //     this.modelErrorCount = resp[0].projectStatusDetails.length;\n              //     if (\n              //       this.modelErrorCount + this.trainings[0].modelMetaData.length ==\n              //       this.trainings[0].algorithms.length\n              //     ) {\n              //       this.showTrainingSpinner = false;\n              //     }\n              //   },\n              //   function (err) {\n              //     this.showLoading = false;\n              //     toaster.pop(\n              //       'error',\n              //       $scope.app.name,\n              //       'Oops! something went wrong while fetching project details.',\n              //       2000\n              //     );\n              //   }\n              // );\n            }\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.error?.message || 'Cannot fetch trainings list', 'Models');\n        }\n      );\n  }\n\n  /**\n   * Fetches the seleted training models\n   */\n  async showSelectedTrainingModels(selectedTraining: any): Promise<any> {\n    // API call\n    selectedTraining.models = await this.getModelsList(this.selectedTrainingControl.value).catch(\n      (e: Error) => {\n        this._toaster.error(`Error - ${e.message}`, 'Models');\n        this._spinner.stopSpinner();\n      }\n    );\n    this.trainings = [selectedTraining];\n    // API call\n    this.originalFileDetails = await this.getOriginalFileDetails(\n      this.trainings[0].originalFileId,\n      this.trainings[0].projectId\n    ).catch((e: Error) => {\n      this._toaster.error(`Error - ${e.message}`, 'Models');\n      this._spinner.stopSpinner();\n    });\n    // API call\n    if (this.originalFileDetails.notebookInputFileId) {\n      this.notebookInputFileDetails = await this.getNotebookInputFileDetails(\n        this.originalFileDetails.projectId,\n        this.originalFileDetails.notebookInputFileId\n      ).catch((e: Error) => {\n        this._toaster.error(`Error - ${e.message}`, 'Models');\n        this._spinner.stopSpinner();\n      });\n    }\n    // API call\n    let fileWithEda: any = await this.getChildDataSets(\n      this.trainings[0].projectId,\n      this.trainings[0].originalFileId\n    ).catch((e: Error) => {\n      this._toaster.error(`Error - ${e.message}`, 'Models');\n      this._spinner.stopSpinner();\n    });\n    this.originalFileWithEdaDetails = fileWithEda[0];\n    this.totalAlgos =\n      this.trainings[0].algorithms.length <= this.trainings[0].models.length\n        ? this.trainings[0].models.length\n        : this.trainings[0].algorithms.length;\n    this.totalAlgos < this.trainings[0].algorithms.length\n      ? (this.showTrainingSpinner = true)\n      : (this.showTrainingSpinner = false);\n    if (this.trainings[0].edaId.isMultipleTimeseries) {\n      this.rejectedGroupList = await this.getTimeseriesList(this.trainings[0], this.trainings[0].models[0]);\n      this.rejectedGroupList = this.rejectedGroupList[0].rejectedGroupList;\n    }\n    this.sortAndRankModels(this.trainings[0]);\n    this.supportedGraphList();\n    // this.trainings[0].models.forEach(element => {\n    this.isAdvanceAlgoSupported();\n    // });\n    this.trainings[0].problemType === 'clustering'\n      ? this.genClusteringFeatures(this.trainings[0])\n      : null;\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Generate features for clustering\n   * @param {*} trainingData\n   */\n  genClusteringFeatures(trainingData: any): void {\n    this.clusteringFeatures = [];\n    // If decomposition == 'pca' or factoranalysis, first priority\n    if (trainingData.clusteringInfo.decomposition !== 'none') {\n      //generate custom values for pca\n      for (let i = 0; i < trainingData.clusteringInfo.components; i++) {\n        this.clusteringFeatures.push('component_' + i);\n      }\n    } else {\n      if (trainingData.clusteringInfo.numericFeatures.length && trainingData.indepVariable.length) {\n        //Filter out numeric indepVariables\n        this.clusteringFeatures = trainingData.clusteringInfo.numericFeatures.map((data: any) => {\n          let found: any = trainingData.indepVariable.find(\n            (indepVar: any) => indepVar.colName === data.colName\n          );\n          if (found) {\n            return data.colName;\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Fetches details of selected training if changed, from training history drop-down\n   * @param {*} trainingId\n   */\n  async trainingChanged(trainingId: string): Promise<any> {\n    this._spinner.showSpinner();\n    let trainingData: any;\n    this.forcastHtmlData = [];\n    this.selectedFeatures = [];\n    this.sourceType = 'file';\n    this.trainingList.some((item: any) => {\n      item._id === trainingId ? (trainingData = item) : false;\n    });\n    // ! Need to understand the usage of below code and refactored it\n    // if (!trainingData) {\n    //   return;\n    // }\n    // API call\n    this.originalFileDetails = this.getOriginalFileDetails(\n      trainingData.originalFileId,\n      trainingData.projectId\n    ).catch((e: Error) => {\n      this._toaster.error(`Error - ${e.message}`, 'Models');\n      this._spinner.stopSpinner();\n    });\n    // API call\n    if (this.originalFileDetails.notebookInputFileId) {\n      this.notebookInputFileDetails = await this.getNotebookInputFileDetails(\n        this.originalFileDetails.projectId,\n        this.originalFileDetails.notebookInputFileId\n      ).catch((e: Error) => {\n        this._toaster.error(`Error - ${e.message}`, 'Models');\n        this._spinner.stopSpinner();\n      });\n    }\n    // API call\n    let fileWithEda: any = await this.getChildDataSets(\n      trainingData.projectId,\n      trainingData.originalFileId\n    ).catch((e: Error) => {\n      this._toaster.error(`Error - ${e.message}`, 'Models');\n      this._spinner.stopSpinner();\n    });\n    this.originalFileWithEdaDetails = fileWithEda[0];\n    this.currentModelMeta = {\n      name: 'Training ',\n      trainingId: trainingData._id,\n      createdAt: trainingData.createdAt,\n      originalFileId: trainingData.originalFileId,\n      fileName: trainingData.metaInfo.fileName ? trainingData.metaInfo.fileName : '',\n    };\n    this.uploadScoringUrl = `${environment.serverBaseUrl}/api/training/${this.currentModelMeta.trainingId}/scoring/data`;\n    // API call\n    trainingData.models = await this.getModelsList(this.selectedTrainingControl.value).catch(\n      (e: Error) => {\n        this._toaster.error(`Error - ${e.message}`, 'Models');\n        this._spinner.stopSpinner();\n      }\n    );\n    this.trainings = [trainingData];\n    this.target = trainingData.depVariable;\n    if (this.trainings[0].edaId.isMultipleTimeseries) {\n      this.rejectedGroupList = await this.getTimeseriesList(this.trainings[0], this.trainings[0].models[0]);\n      this.rejectedGroupList =  this.rejectedGroupList[0].rejectedGroupList;\n      }\n    this.supportedGraphList();\n    // this.trainings[0].models.forEach(element => {\n    this.isAdvanceAlgoSupported();\n    //  });\n    this.setFilterList(trainingData.algoType);\n    this.sortAndRankModels(this.trainings[0]);\n    this.initModels(this.project.type, this.trainings[0].models);\n    this.totalAlgos =\n      this.trainings[0].algorithms.length <= this.trainings[0].models.length\n        ? this.trainings[0].models.length\n        : this.trainings[0].length;\n    this.predictionResult = false;\n    // ! Need to understand the usage of below code and refactored it\n    // Reset the file input component\n    // var fileElement = angular.element('#predictionFile');\n    // if (fileElement) {\n    //   angular.element(fileElement).val(null);\n    //   if (!$scope.$$phase) {\n    //     $scope.$apply();\n    //   }\n    // }\n    this._spinner.stopSpinner();\n  }\n\n  getTimeseriesList(training,modelInfo): Promise<any> {\n    let reqObj = {\n      modelId: modelInfo._id,\n    }\n    return this._eda\n      .getTimeseriesGroup(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * function to check supported graph for particular algo\n   */\n  supportedGraphList(): any {\n    this.trainings[0].models.forEach((element) => {\n      let string = element.modelMetaData.algoName.toLowerCase();\n      let algoName = [];\n      let subString1 = 'bagging';\n      let subString2 = 'boosting';\n      if (string.includes(subString1)) {\n        if (this.trainings[0].algoType == 'classification') {\n          algoName = ['Bagging Classifier'];\n        } else if (this.trainings[0].algoType === 'regression') {\n          algoName = ['Bagging Regressor'];\n        }\n        let graphSupported = this._utils.getAlgorithmSupported(algoName, this.trainings[0], string);\n        if (graphSupported !== null) {\n          element['graphSupported'] = graphSupported;\n        }\n      } else if (string.includes(subString2)) {\n        if (this.trainings[0].algoType == 'classification') {\n          algoName = ['Boosting Classifier'];\n        } else if (this.trainings[0].algoType === 'regression') {\n          algoName = ['Boosting Regressor'];\n        }\n        let graphSupported = this._utils.getAlgorithmSupported(algoName, this.trainings[0], string);\n        if (graphSupported !== null) {\n          element['graphSupported'] = graphSupported;\n        }\n      } else {\n        let modelName = element.modelMetaData.algoName;\n        modelName = modelName.split('-', 1);\n        let graphSupported = modelName.length\n          ? this._utils.getAlgorithmSupported(modelName, this.trainings[0], string)\n          : this._utils.getAlgorithmSupported(\n              element.modelMetaData.algoName,\n              this.trainings[0],\n              string\n            );\n        if (graphSupported !== null) {\n          element['graphSupported'] = graphSupported;\n        }\n      }\n    });\n    this.modelSupported = this.trainings[0].models.filter((item) => {\n      return item.graphSupported.status === true;\n    });\n   // console.log(this.trainings);\n  }\n\n  /**\n   * function to disable bagging and boosting for already bagged and boosted algo\n   */\n  isAdvanceAlgoSupported() {\n    this.trainings[0].models.forEach((model: any) => {\n      let string = model.modelMetaData.algoName.toLowerCase();\n      let subString1 = 'bagging';\n      let subString2 = 'boosting';\n\n      if (string.includes(subString1)) {\n        model['isAlgoSupported'] = false;\n      } else if (string.includes(subString2)) {\n        model['isAlgoSupported'] = false;\n      } else {\n        model['isAlgoSupported'] = true;\n      }\n    });\n  }\n  /**\n   * Sorts the models and rank them as per the score\n   * @param training\n   */\n  sortAndRankModels(training: any): void {\n    /**\n     * Sorting is required only for predictive_modeling problem type\n     */\n    if (this.project.type !== 'predictive_modeling') {\n      return null;\n    }\n    this.values.length = 0;\n    training.models.sort((a: any, b: any) => {\n      if (\n        this.filter[0] === 'Mean Absolute Error' ||\n        this.filter[0] === 'Root Mean Square Error' ||\n        this.filter[0] === 'Median Square Error' ||\n        this.filter[0] === 'Mean Square Error' ||\n        this.filter[0] === 'Mean Square Log Error'\n      ) {\n        let aa = a.modelMetaData.holdout.losses.filter((pilot: any) => {\n          return pilot.name === this.filter[0];\n        });\n        let bb = b.modelMetaData.holdout.losses.filter((pilot: any) => {\n          return pilot.name === this.filter[0];\n        });\n        if (this.filterSortOrder === 'desc') {\n          return bb[0].value * 1 - aa[0].value * 1;\n        } else {\n          return aa[0].value * 1 - bb[0].value * 1;\n        }\n      }\n      /**\n       * Sorting the models in desc/asc order based on the selected filter\n       */\n      if (this.filterSortOrder === 'desc') {\n        if (this.filter[0] === 'timeElapsed') {\n          return b.modelMetaData[this.filter[0]] * 1 - a.modelMetaData[this.filter[0]] * 1;\n        } else {\n          return (\n            b.modelMetaData.holdout[this.filter[0]] * 1 -\n            a.modelMetaData.holdout[this.filter[0]] * 1\n          );\n        }\n      } else {\n        if (this.filter[0] === 'timeElapsed') {\n          return a.modelMetaData[this.filter[0]] * 1 - b.modelMetaData[this.filter[0]] * 1;\n        } else {\n          return (\n            a.modelMetaData.holdout[this.filter[0]] * 1 -\n            b.modelMetaData.holdout[this.filter[0]] * 1\n          );\n        }\n      }\n    });\n\n    training.models.forEach((data: any) => {\n      if (data.modelMetaData.holdout) {\n        data.modelMetaData.overallScore = data.modelMetaData.holdout.overallScore;\n        this.values.push({\n          label: training.name + ' - ' + data.modelMetaData.algoName,\n          value: data.modelMetaData.overallScore * 1,\n        });\n      }\n    });\n    this.data[0].values = this.values;\n    this.initModels(this.project.type, training.models);\n  }\n\n  openScoringDataTemplate(scoringDataTemplate: TemplateRef<any>, Data?: any) {\n    this.dialogRef = this._dialog.open(scoringDataTemplate, {\n      // height: 'auto',\n      width: '50%',\n    });\n  }\n  /**\n   * Stores the file data to be uploaded into the variable\n   * @param inputFile files object\n   */\n  handleFileInput(inputFile: any, fileEncoding) {\n    const ext = inputFile[0].name.split('.').pop();\n    if (inputFile && ['csv'].includes(ext)) {\n      if (inputFile[0].size < this.allowedPSFileUploadSize * 1024 * 1024) {\n        this.fileToUpload = inputFile[0];\n      } else {\n        this._snackBar.open(\n          'File size should be less than ' + this.allowedPSFileUploadSize + 'Mb',\n          'OK',\n          {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n          }\n        );\n      }\n    } else {\n      this.fileToUpload = '';\n      this._snackbar.open(`.${ext} file type is not supported`, 'OK');\n    }\n  }\n  /**\n   * Uploads the scoring data\n   */\n  uploadScoringData(): void {\n    this._spinner.showSpinner();\n    if (this.fileToUpload) {\n      this._models\n        .uploadScoringData(this.fileToUpload, this.currentModelMeta.trainingId, this.fileEncoding)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this._toaster.success('Scoring data uploaded successfully', 'Models');\n            } else {\n              this._toaster.error('Cannot upload scoring data', 'Models');\n            }\n            this.fileToUpload = '';\n          },\n          (err: any) => {\n            this._toaster.error(`Server Error - ${err.error.message}`, 'Models');\n            this._spinner.stopSpinner();\n          }\n        );\n    } else {\n      this._snackbar.open('Please select a .csv file for prediction', 'OK', {\n        horizontalPosition: 'right',\n        verticalPosition: 'bottom',\n      });\n    }\n\n    this._spinner.stopSpinner();\n    // Upload scoring data\n    // uploaderScoring = this.uploaderScoring = new FileUploader({\n    //   url: '/api/training/' + this.currentModelMeta.trainingId + '/scoring/data',\n    //   removeAfterUpload: true,\n    // });\n    // uploaderScoring.filters.push({\n    //   name: 'fileTypeChecker',\n    //   fn: function (item /*{File|FileLikeObject}*/, options) {\n    //     var type = null;\n    //     if (item.type) {\n    //       type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';\n    //     } else {\n    //       var temp = item.name.split('.');\n    //       type = temp[temp.length - 1];\n    //     }\n    //     return (\n    //       '|csv|vnd.ms-excel|zip|x-zip-compressed|vnd.openxmlformats-officedocument.spreadsheetml.sheet|pkl|pk|pl|pickle|'.indexOf(\n    //         type\n    //       ) !== -1\n    //     );\n    //   },\n    // });\n    // uploaderScoring.onWhenAddingFileFailed = function (\n    //   item /*{File|FileLikeObject}*/,\n    //   filter,\n    //   options\n    // ) {\n    //   toaster.pop('error', $scope.app.name, 'Please upload a csv file.', 3000);\n    // };\n    // uploaderScoring.onAfterAddingFile = function (fileItem) {\n    //   if (this.uploaderScoring.queue[0]) {\n    //     this.uploaderScoring.queue[0].upload();\n    //     this.uploaderScoring.onCompleteItem = function (fileItem, response, status, headers) {\n    //       if (status == 200) {\n    //         toaster.pop('success', $scope.app.name, 'Scoring data uploaded successfully', 2000);\n    //       } else {\n    //         toaster.pop('error', $scope.app.name, response.message, 4000);\n    //         return 0;\n    //       }\n    //       this.uploader.queue.length = 0;\n    //       var fileElement = angular.element('#scoringMetricsFile');\n    //       angular.element(fileElement).val(null);\n    //     };\n    //   }\n    // };\n  }\n\n  /**\n   * Deletes the selected training by trggering API, with alert confirmation\n   */\n  deleteTraining(): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this training!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: false,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this._spinner.showSpinner();\n        let isLastTraining: boolean = this.trainingList.length === 1 ? true : false;\n        this._training\n          .deleteTraining(this.selectedTrainingControl.value, this.project._id, isLastTraining)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            async (res) => {\n              if (res) {\n                this.trainingList = this.trainingList.filter(\n                  (training: any) => training._id !== this.selectedTrainingControl.value\n                );\n                if (this.trainingList.length) {\n                  this.selectedTrainingControl.setValue(this.trainingList[0]._id);\n                  this.trainingList[0].models = await this.getModelsList(\n                    this.selectedTrainingControl.value\n                  ).catch((e: Error) => {\n                    this._toaster.error(`Error - ${e.message}`, 'Models');\n                    this._spinner.stopSpinner();\n                  });\n                  this.trainings = [this.trainingList[0]];\n                  this.sortAndRankModels(this.trainings[0]);\n                } else {\n                  this.selectedTrainingControl.setValue(null);\n                  this.trainings = [];\n                }\n                this._toaster.success('Training deleted sucessfully', 'Models');\n                this._spinner.stopSpinner();\n              } else {\n                this._toaster.error('Cannot fetch models list', 'Models');\n                this._spinner.stopSpinner();\n              }\n            },\n            (err) => {\n              this._spinner.stopSpinner();\n              this._toaster.error('Server Error', 'Models');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Function to delete a selected model from DB\n   * @param {*} modelInfo selected model details\n   * @param {*} training model's training details\n   */\n  deleteModel(modelInfo: any, training: any): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this model!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this._spinner.showSpinner();\n        this._models\n          .deleteModel(training._id, modelInfo._id)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res) => {\n              if (res) {\n                this.trainings[0].models = this.trainings[0].models.filter(\n                  (model: any) => model._id !== modelInfo._id\n                );\n                this.trainings[0].algorithms = this.trainings[0].algorithms.filter(\n                  (algorithm: any) => modelInfo.modelMetaData.algoName !== algorithm\n                );\n                this.totalAlgos -= 1;\n                this.sortAndRankModels(this.trainings[0]);\n                this._toaster.success('Model deleted sucessfully', 'Models');\n                this._spinner.stopSpinner();\n              } else {\n                this._toaster.error('Cannot delete a model', 'Models');\n                this._spinner.stopSpinner();\n              }\n            },\n            (err) => {\n              this._spinner.stopSpinner();\n              this._toaster.error('Server Error', 'Models');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Checks if decision tree is supported for the selected model\n   * @param {*} algoname selected algo name\n   * @param {*} isMultilabel true/false\n   */\n  isDecisionTreeSupported(algoname: string, isMultilabel: boolean): boolean {\n    let algoName: any = algoname.split('-');\n    let x: any =\n      [\n        'Decision Tree Regression',\n        'Random Forest Regression',\n        'Decision Tree Classification',\n        'Random Forest Classification',\n        'Extra Tree Classification',\n        'Ensemble Extra Trees Classification',\n        'XGBoost Classification',\n        'XGBoost Regression',\n        'LightGBM Classification',\n        'LightGBM Regression',\n      ].includes(algoName[0]) && !isMultilabel;\n\n    if (algoName.includes('Bagging') || algoName.includes('Boosting')) {\n      let advAlgoSupported: any = [\n        'Decision Tree Regression',\n        'Decision Tree Classification',\n        'Extra Tree Classification',\n      ].includes(algoName[0]);\n      x = advAlgoSupported ? true : false;\n    }\n    return x;\n  }\n\n  /**\n   * Checks if advance algorithms is supported for the selected model\n   * @param modelInfo\n   * @returns\n   */\n  isAdvAlogSupported(training: any, model: any): any {\n    let algo: Array<string> = model.modelMetaData.algoName.split('-');\n    let index: number = [\n      'Passive Aggressive Classification',\n      'MLP Classification',\n      'NearestCentroid Classification',\n      'Artificial Neural Network Classification',\n      'Artificial Neural Network Regression',\n    ].indexOf(algo[0]);\n    if (index !== -1) {\n      if (\n        model.modelMetaData.algoName.includes('Bagging') ||\n        model.modelMetaData.algoName.includes('Boosting')\n      ) {\n        this._snackBar.open('Advanced option is not avilable for this model', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n      } else {\n        this._snackBar.open('Advanced option is not avilable for this model', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n      }\n    } else if (this.disableBagging === true || this.disableBoosting === true) {\n      this.disableBagging === true\n        ? this._snackBar.open('Bagging Algorithm is disabled', 'OK', {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n          })\n        : '';\n      this.disableBoosting === true\n        ? this._snackBar.open('Boosting Algorithm is disabled', 'OK', {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n          })\n        : '';\n      this.openFormDialog('advAlgo', training, model);\n    } else {\n      this.openFormDialog('advAlgo', training, model);\n    }\n  }\n\n  /**\n   * Deploys the model\n   * @param deployModelTemplate\n   * @param platform\n   * @param training\n   * @param modelInfo\n   */\n  deployModel(\n    deployModelTemplate: TemplateRef<any>,\n    platform: string,\n    training?: any,\n    modelInfo?: any\n  ): void {\n    this._spinner.showSpinner();\n    this.selectedHost = '';\n    this._dialog.open(deployModelTemplate, {\n      minWidth: '50vw',\n    });\n    //Lists the hosts\n    this.listHost();\n\n    this.deployPsTypeflag = '';\n    // if (this.deployPsType.value) {\n    //   this.deployPsTypeflag = \"pslite\";\n    // }\n\n    if (modelInfo.modelMetaData.hasOwnProperty('reTrainFileId')) {\n      this.deployFileId = modelInfo['reTrainFileId'];\n    } else {\n      this.deployFileId = training['originalFileId'];\n    }\n\n    this.deployObj = {\n      training: training,\n      modelInfo: modelInfo,\n      selectedHost: this.selectedHost,\n      algoType: this.findAlgoType(modelInfo.modelMetaData.algoName),\n      platform: platform,\n      project: this.project,\n      fileId: this.deployFileId,\n      notebooks: this.originalFileDetails.notebooks ? this.originalFileDetails.notebooks : '',\n      notebookInputFileId: this.originalFileDetails.notebookInputFileId\n        ? this.originalFileDetails.notebookInputFileId\n        : '',\n      psType: this.deployPsTypeflag,\n    };\n\n    this.deployReqObj = {\n      Host: this.selectedHost,\n      projectId: this.project._id,\n      projectType: this.project.type,\n      modelId: modelInfo._id,\n    };\n    this._spinner.stopSpinner();\n  }\n\n  openRejectedroup(rejectedGroupTemplate: TemplateRef<any>,\n  training?: any,\n  modelInfo?: any\n  ): void {\n              this._dialog.open(rejectedGroupTemplate, {\n                maxWidth: '40vw',\n                minWidth: '40vw',\n              });\n  }\n  /**\n   * Deploys the model\n   */\n  async deployModelFile(): Promise<any> {\n    // API call\n    this.resDeployfile = await this.deployModelService(this.deployObj).catch((e: any) => {\n      this._toaster.error(e.error?.message || 'Model deployment failed', 'Models');\n      this._spinner.stopSpinner();\n    });\n    if (this.resDeployfile) {\n      this.modelDeployed = await this.deployModelPost(this.deployReqObj)\n        .then((res) => {\n          if (res) {\n            this._toaster.success(res.message || 'Model is deployed sucessfully', 'Models');\n          }\n        })\n        .catch((e: any) => {\n          this._toaster.error(e.error.message || 'Model deployment failed', 'Models');\n          this._spinner.stopSpinner();\n        });\n    }\n  }\n\n  deployModelPost(obj: any): Promise<any> {\n    return this._models.deployModelPost(obj).pipe(takeUntil(this.unsubscribe$)).toPromise();\n  }\n\n  deployModelService(obj: any): Promise<any> {\n    return this._models\n      .preDeployModel(obj, this.selectedHost)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Fetches the host list\n   */\n  listHost(): void {\n    this._models\n      .getHostList()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (list) => {\n          if (list) {\n            //let result = {};\n            list.forEach((value, key) => {\n              if (value.hasOwnProperty('hostName')) {\n                this.hostlist[key] = value;\n              }\n            });\n            //this.hostlist = result;\n          } else {\n            this._toaster.error('Cannot fetch hosts', 'Models');\n            this._spinner.stopSpinner();\n          }\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Models');\n        }\n      );\n  }\n\n  /**\n   * Function to find algo type - regression/classification\n   * @param {*} algoName - algo full name\n   */\n  findAlgoType(algoName: any): any {\n    var algoSplit = algoName.split('-')[0];\n    var algoType = this.ALGORITHMS_ARRAY.filter((algorithm: any) => algorithm.name === algoSplit)[0]\n      .type;\n    return algoType;\n  }\n\n  /**\n   * Handles the dynamic form dialog as per the type\n   * @param platform\n   */\n  downloadModel(platform: string, training?: any, modelInfo?: any) {\n    this._spinner.showSpinner();\n    this.downloadPsType = '';\n    // if (this.psType.value) {\n    //   this.downloadPsType = \"pslite\";\n    // }\n\n    if (modelInfo.modelMetaData.hasOwnProperty('reTrainFileId')) {\n      this.downloadFileId = modelInfo['reTrainFileId'];\n    } else {\n      this.downloadFileId = training['originalFileId'];\n    }\n\n    this.downloadAlgoType = this.findAlgoType(modelInfo.modelMetaData.algoName);\n    this.downloadNotebooks = this.originalFileDetails.notebooks\n      ? this.originalFileDetails.notebooks\n      : '';\n    this.downloadNotebookInputFileId = this.originalFileDetails.notebookInputFileId\n      ? this.originalFileDetails.notebookInputFileId\n      : '';\n    this.downloadTraining = training;\n    this.downloadModelInfo = modelInfo;\n\n    this.downloadPlatform = platform;\n    this.downloadProject = this.project;\n    this.downloadModelFile();\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Downloads the model\n   */\n  downloadModelFile() {\n    window.open(\n      environment.serverBaseUrl +\n        '/api/training/' +\n        this.downloadTraining._id +\n        '/models/' +\n        this.downloadModelInfo._id +\n        '/download?ag=' +\n        this.downloadModelInfo.modelMetaData.algoName +\n        '&algoType=' +\n        this.downloadAlgoType +\n        '&pf=' +\n        this.downloadPlatform +\n        '&projectType=' +\n        this.downloadProject.type +\n        '&projectName=' +\n        this.downloadProject.name +\n        '&reTrainFileId=' +\n        this.downloadFileId +\n        '&notebookInputFileId=' +\n        this.downloadNotebookInputFileId +\n        '&notebooks=' +\n        this.downloadNotebooks +\n        '&psType=' +\n        this.downloadPsType\n    );\n  }\n\n  /**\n   * Fetches original input file details of a particular training\n   * @param {*} originalFileId\n   * @param {*} projectId\n   */\n  getOriginalFileDetails(originalFileId: string, projectId: string): Promise<any> {\n    return this._data\n      .getMyFileData(projectId, originalFileId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Fetchs the child datasets\n   * @param projectId\n   * @param originalFileId\n   */\n  getChildDataSets(projectId: string, originalFileId: string): Promise<any> {\n    return this._data\n      .getAllChildDatasets(projectId, originalFileId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Fetchs all the models list\n   * @param projectId\n   * @param originalFileId\n   */\n  getModelsList(selectedTrainingId: string): Promise<any> {\n    return this._models\n      .getModelsList(selectedTrainingId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Fetches notebook input file details\n   * @param {*} projectId\n   * @param {*} notebookInputFileId\n   */\n  getNotebookInputFileDetails(projectId: string, notebookInputFileId: string): Promise<any> {\n    return this._data\n      .getMyFileData(projectId, notebookInputFileId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Handles the dynamic form dialog as per the type and opens it\n   * @param type\n   * @param trainingInfo\n   * @param modelInfo\n   */\n  openFormDialog(type: string, trainingInfo?: any, modelInfo?: any): void {\n    this._dialog\n      .open(FormsDialogHandlerComponent, {\n        minWidth: '60vw',\n        maxWidth: '60vw',\n        data: {\n          type: type,\n          trainingInfo: trainingInfo,\n          modelInfo: modelInfo,\n          trainings: this.trainings,\n          originalFileWithEdaDetails: this.originalFileWithEdaDetails,\n          currentModelMeta: this.currentModelMeta,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {\n        if (data?.type === 'retrain' || data?.type === 'tuning' || data?.type === 'advAlgo') {\n          this.trainings[0].algorithms = data.algorithms;\n        }\n      });\n  }\n\n  /**\n   * Handles the dynamic graph dialog as per the type and opens it\n   * @param type\n   * @param trainingInfo\n   * @param modelInfo\n   */\n  openGraphDialog(type: string, trainingInfo?: any, modelInfo?: any, tab?: string): void {\n    this._dialog\n      .open(GraphsDialogHandlerComponent, {\n        minWidth:\n          type === 'compareModel' || type === 'limeReport' || type === 'timeAccuracy'\n            ? '50vw'\n            : '80vw',\n        maxWidth: '90vw',\n        data: {\n          type: type,\n          trainingInfo: trainingInfo,\n          modelInfo: modelInfo,\n          tab: tab,\n          trainings: this.trainings,\n          originalFileWithEdaDetails: this.originalFileWithEdaDetails,\n          sortedModel: this.data[0].values,\n          filtersArray: this.filtersArray,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {});\n  }\n\n  /**\n   * Opens the quick prediction dialog\n   */\n  openQuickPredictionDialog(): void {\n    this._dialog\n      .open(QuickPredictionComponent, {\n        maxWidth: '50vw',\n        data: {\n          trainings: this.trainings,\n          currentModelMeta: this.currentModelMeta,\n          notebookInputFileDetails: this.notebookInputFileDetails,\n          originalFileWithEdaDetails: this.originalFileWithEdaDetails,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {});\n  }\n\n  /**\n   * Opens the pipeline dialog\n   */\n  openPipelineDialog(): void {\n    let autoGenerationData = this.trainings[0]['autoFeatureGenTasks'];\n    this._models\n      .getPipelineTask(this.currentModelMeta.trainingId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        async (res) => {\n          if (res) {\n            if (\n              this.trainings[0].sampling == 'under_sampling' ||\n              this.trainings[0].sampling == 'over_sampling'\n            ) {\n              var obj = {\n                description:\n                  'Sampling is a method that allows us to get information about the population based on the statistics from a subset of the population (sample), without having to investigate every individual.',\n                index: 6,\n                parent: 'training_data_prep',\n                preview: 'True',\n                task: 'sampling',\n                taskName: 'Sampling',\n              };\n              res.push(obj);\n            }\n            var dataCollection = [];\n            var eda = [];\n            var training = [];\n            this.pipelineTasks = [];\n            res.forEach(function (item) {\n              if (item.parent == 'Data Collection') {\n                dataCollection.push(item);\n              }\n              if (item.parent == 'EDA') {\n                eda.push(item);\n              }\n              if (item.parent == 'training_data_prep') {\n                if (item.task == 'auto_feature_generate') {\n                  var tempAFoperations = [];\n                  autoGenerationData.forEach(function (autoFGenOp) {\n                    tempAFoperations.push(autoFGenOp['operation']);\n                  });\n                  item.afOperations = tempAFoperations;\n                }\n                training.push(item);\n              }\n            });\n            this.pipelineTasks.push({\n              data: dataCollection,\n              parent: 'Data Collection',\n            });\n            this.pipelineTasks.push({ data: eda, parent: 'EDA' });\n            this.pipelineTasks.push({ data: training, parent: 'Training' });\n            this._dialog\n              .open(PipelineComponent, {\n                maxWidth: '90vw',\n                data: {\n                  trainings: this.trainings,\n                  currentModelMeta: this.currentModelMeta,\n                  notebookInputFileDetails: this.notebookInputFileDetails,\n                  originalFileWithEdaDetails: this.originalFileWithEdaDetails,\n                  pipelineTask: this.pipelineTasks,\n                  pipelineData: res,\n                },\n              })\n              .afterClosed()\n              .subscribe((data) => {});\n          }\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Models');\n        }\n      );\n  }\n\n  /**\n   * Called when hold out operation is performed and updates the trainings data\n   * @param value\n   */\n  async updateTrainingModels(value: any): Promise<any> {\n    this.trainings[0].models = value;\n    //await this.showSelectedTrainingModels(this.trainings[0]);\n  }\n\n  /**\n   * Initailize the models start and end date for only timeseries project type\n   * @param {*} projectType timeseries\n   * @param {*} models\n   */\n  initModels(projectType: string, models: any): void {\n    if (projectType === 'timeseries' && models) {\n      let startDate = new Array(models.length).fill(new Date());\n      let endDate = new Array(models.length).fill(new Date());\n    }\n  }\n\n  /**\n   * Function called when user change filter\n   * @param {*} filter changed value\n   */\n  filterChanged(filter: any): void {\n    this.filter = [filter];\n    this.sortAndRankModels(this.trainings[0]);\n  }\n\n  /**\n   * Function called when filter sort order changed\n   * @param {*} order asc/desc\n   */\n  filterSortOrderChanged(order: string): void {\n    this.filterSortOrder = order;\n    this.sortAndRankModels(this.trainings[0]);\n  }\n\n  /**\n   * Initialize filters list\n   * @param {*} algoType regression/classification\n   */\n  setFilterList(algoType: string): void {\n    if (algoType === 'regression') {\n      this.filtersArray = [\n        { name: 'Model Score', id: 'testScore' },\n        { name: 'R Squared', id: 'rSquared' },\n        { name: 'Time Elapsed', id: 'timeElapsed' },\n        { name: 'Overall Score', id: 'overallScore' },\n        { name: 'MAE', id: 'Mean Absolute Error' },\n        { name: 'RMSE', id: 'Root Mean Square Error' },\n        { name: 'MSE', id: 'Mean Square Error' },\n      ];\n    } else {\n      this.filtersArray = [\n        { name: 'Accuracy', id: 'testScore' },\n        { name: 'F1 Score', id: 'f1Score' },\n        { name: \"Mathew's Coeff\", id: 'matCoeff' },\n        { name: 'Time Elapsed', id: 'timeElapsed' },\n        { name: 'Overall Score', id: 'overallScore' },\n      ];\n    }\n  }\n\n  /**\n   * Function to sort an array of objects as per the key\n   * @param {*} items input data - array\n   * @param {*} key key for comparison\n   */\n  sortArryOFObjects(items: any, key: any): any {\n    items.sort((a: any, b: any) => {\n      return b[key] - a[key];\n    });\n    return items;\n  }\n  /**\n   * Opens the new window with algorithm details and doc\n   * @param {*} algoName\n   */\n  getAlgoDouUrl(algoName: string): void {\n    let queryForUrl = null;\n    if (algoName.includes('Bagging') && algoName.includes('Regression')) {\n      if (algoName.includes('Logistic')) {\n        queryForUrl = 'Bagging Classifier';\n      } else {\n        queryForUrl = 'Bagging Regressor';\n      }\n    } else if (algoName.includes('Bagging') && algoName.includes('Classification')) {\n      queryForUrl = 'Bagging Classifier';\n    } else if (algoName.includes('Boosting') && algoName.includes('Classification')) {\n      queryForUrl = 'Boosting Classifier';\n    } else if (algoName.includes('Boosting') && algoName.includes('Regression')) {\n      if (algoName.includes('Logistic')) {\n        queryForUrl = 'Boosting Classifier';\n      } else {\n        queryForUrl = 'Boosting Regressor';\n      }\n    } else {\n      queryForUrl = algoName.split('-')[0];\n    }\n    if (queryForUrl) {\n      let algo = this.ALGORITHMS_ARRAY.filter((algorithm: any) => algorithm.name === queryForUrl);\n      this._window.open(algo[0].url, '_blank');\n    }\n  }\n\n  /**\n   * SOCKET - Listen for training completed events\n   */\n  initTrainingSocket(): void {\n    this._socket.listen('TrainingProgress').subscribe(\n      async (data: any) => {\n        if (data) {\n          if (!this.trainings[0]) {\n            await this.getTrainingsList();\n          }\n          if (this.trainings[0]) {\n            if (data.status === 'success') {\n              this.trainings[0].models.push(data.modelMetaData);\n              if (data.trainingType == 'retraining') {\n                this.totalAlgos += 1;\n                this.sortAndRankModels(this.trainings[0]);\n                this._toaster.success(\n                  `Retraining successfully completed for ${data.algoName}`,\n                  'Models'\n                );\n              } else if (data.trainingType === 'model_tuning') {\n                this.totalAlgos += 1;\n                this.sortAndRankModels(this.trainings[0]);\n                this._toaster.success(\n                  `Model tuning successfully completed for ${data.modelMetaData.modelMetaData.algoName}`,\n                  'Models'\n                );\n              } else if (data.trainingType === 'bagging_boosting') {\n                this.totalAlgos += 1;\n                this.sortAndRankModels(this.trainings[0]);\n                this._toaster.success(\n                  `Bagging/Boosting successfully completed for ${data.algoName}`,\n                  'Models'\n                );\n              }\n              this._spinner.stopSpinner();\n            } else {\n              if (data.trainingType === 'train') {\n                this.erroCount += 1;\n              } else if (data.trainingType == 'retraining') {\n                this._toaster.error(\n                  `Retraining failed for ${data.algoName} - ${data.modelMetaData.message}`,\n                  'Models'\n                );\n              } else if (data.trainingType === 'model_tuning') {\n                this._toaster.error(\n                  `Model tuning failed for ${data.algoName} - ${data.modelMetaData.message}`,\n                  'Models'\n                );\n              } else if (data.trainingType === 'bagging_boosting') {\n                this._toaster.error(\n                  `Bagging/Boosting failed for ${data.algoName} - ${data.modelMetaData.message}`,\n                  'Models'\n                );\n              }\n              this._spinner.stopSpinner();\n            }\n            if (data.trainingType === 'train') {\n              if (\n                this.trainings[0].algorithms.length ===\n                this.erroCount + this.trainings[0].models.length\n              ) {\n                this.showTrainingSpinner = false;\n                this.getTrainingsList();\n              } else {\n                this.showTrainingSpinner = true;\n              }\n            }\n            this.supportedGraphList();\n          }\n          this._spinner.stopSpinner();\n        } else {\n          this._spinner.stopSpinner();\n        }\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error(`Socket Error - ${err.message}`, 'Models');\n      }\n    );\n  }\n\n  /**\n   * SOCKET - Listen for data drift completed events\n   */\n  initDataDriftSocket(): void {\n    this._socket.listen('dataDrift').subscribe(\n      (data: any) => {\n        if (data) {\n          if (data.status === 'datadrift_failed') {\n            this._toaster.error(`Drift analysis failed - ${data.data}`, 'Models');\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n            this._router.navigateByUrl('/project/datadrift/report');\n            this._toaster.success(`Drift analysis successfully completed`, 'Models');\n          }\n        } else {\n          this._spinner.stopSpinner();\n        }\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error(`Socket Error - ${err.message}`, 'Train Model');\n      }\n    );\n  }\n\n  /**\n   * SOCKET - Listen for CPU load completed messages\n   */\n  initCpuLoadSocket(): void {\n    this._socket.listen('cpuLoad').subscribe(\n      async (data: any) => {\n        if (data) {\n          this.cpuLoad = data;\n        }\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error(`Socket Error - ${err.message}`, 'Train Model');\n      }\n    );\n  }\n\n  /**\n   * To detect changes inside the array\n   * @param item\n   * @returns\n   */\n  trackByFn(item: any): any {\n    return item ? item._id : null;\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('dataDrift');\n    this._socket.removeListener('cpuLoad');\n    this._socket.removeListener('TrainingProgress');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { ModelsComponent } from './models.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { FormsDialogHandlerComponent } from './forms-dialog-handler/forms-dialog-handler.component';\nimport { GraphsDialogHandlerComponent } from './graphs-dialog-handler/graphs-dialog-handler.component';\nimport { PredictiveExpansionComponent } from './predictive-expansion/predictive-expansion.component';\nimport { ClusterExpansionComponent } from './cluster-expansion/cluster-expansion.component';\nimport { TimeseriesExpansionComponent } from './timeseries-expansion/timeseries-expansion.component';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { ExpansionGraphsComponent } from './expansion-graphs/expansion-graphs.component';\nimport { QuickPredictionComponent } from './quick-prediction/quick-prediction.component';\nimport { TreeModule } from '@circlon/angular-tree-component';\nimport { PipelineComponent } from './pipeline/pipeline.component';\nimport { PipelineExpansionComponent } from './pipeline/pipeline-expansion/pipeline-expansion.component';\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\nimport { MatBadgeModule } from '@angular/material/badge';\n@NgModule({\n  declarations: [\n    ModelsComponent,\n    FormsDialogHandlerComponent,\n    GraphsDialogHandlerComponent,\n    PredictiveExpansionComponent,\n    ClusterExpansionComponent,\n    TimeseriesExpansionComponent,\n    ExpansionGraphsComponent,\n    QuickPredictionComponent,\n    PipelineComponent,\n    PipelineExpansionComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    TreeModule,\n    CdkAccordionModule,\n    AgGridModule.withComponents([GraphsDialogHandlerComponent]),\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ModelsComponent,\n      },\n    ]),\n    MatBadgeModule\n  ],\n})\nexport class ModelsModule { }\n"]}