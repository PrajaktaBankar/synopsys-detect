{"version":3,"sources":["webpack:///src/app/routes/training/training.service.ts","webpack:///src/app/routes/eda/dialog-handler/dialog-handler.component.html","webpack:///src/app/routes/eda/dialog-handler/dialog-handler.component.ts","webpack:///src/app/routes/eda/eda.component.html","webpack:///src/app/routes/eda/eda.component.ts","webpack:///src/app/routes/eda/eda.module.ts","webpack:///src/app/routes/text-analysis/text-analysis.service.ts"],"names":["TrainingService","_http","serverBaseUrl","projectId","isEdaRequired","this","get","reqObj","post","responseType","trainingId","isLastTraining","modelId","DialogHandlerComponent","Plotly","dialogData","_fb","_edaDialogRef","_eda","_localStorage","_toaster","_snackBar","_spinner","_data","_utils","dataSource","graphTypes","Integer","Decimal","Categorical","resizeEvent","unsubscribe$","Subject","multiUniFeaturesControl","displayedColumns","backGround","foreGround","featureDataTypes","allFeatures","graphTypesSelected","showSpinner","isMmultiUnivariateAnalysis","isWordCloud","outlier","showOutlier","movingAverage","movingAverageMethod","name","method","feature","type","dialogHeading","previewData","project","getItem","forEach","data","push","colName","isDisabled","sort","targetVar","find","e","myArray","itemToRemove","filter","arrayItem","columnDefs","myFileData","pid","dataId","subscribe","res","key","preview","headerName","field","gridOptions","headerHeight","defaultColDef","resizable","previewrowData","stopSpinner","error","err","graphType","span","edaData","hasOwnProperty","value","length","de","findTheDataType","dt","mySelections","setValue","updateValueAndValidity","ftype","multivariateDataType","temp","filterArray","sencondftype","thirdftype","isNumeric","indexOf","featureValue","item","element","optionOne","optionTwo","id","baseImg","snackBarRef","open","chartType","selectedVariables","edaSummary","uniqueBy","filename","selectedDataSet","currentEdaId","_id","currentPipelineFilename","tasks","fileEncoding","generatePlot","generateMultiUniVariatePlot","pipe","takeUntil","showhint","sampling_msg","wordCloud","document","getElementById","graphDiv","graphContent","setAttribute","deleteTraces","layout","template","plot_bgcolor","width","height","title","xanchor","y","x","yanchor","xaxis","linecolor","yaxis","zerolinecolor","plot","displayModeBar","showSnackBar","a","createElement","href","download","click","arr","prop","reduce","d","includes","close","message","button","horizontalPosition","verticalPosition","event","target","trim","toLowerCase","paginator","firstPage","api","setDomLayout","gridApi","setColumnDefs","setRowData","refreshCells","force","next","unsubscribe","closeModal","EdaComponent","EdaModule","EDA_COLUMNS","_dialog","_router","_socket","_window","_training","_textAnalysis","_cd","edaDisplayedColumns","edaPreviewColumns","edaOutlierColumns","pageSizeOptions","color","mode","diameter","exportProjectDiameter","featureMethod","customStrategyControl","required","polynomialOrderControl","splineOrderControl","customCorrectionControl","targetControl","timeseriesIds","holdoutFilename","trainDataset","devDataset","testDataset","taFeatureConfig","showEdaButton","timeseriesGroupList","dateFormat","date","eda_stages","stageTitle","status","stage","Numeric","DateTime","Text","outlierDetectionStrategies","outlierCorrectionStrategies","showAdvanceOptions","showTargetOptions","trainSize","devSize","holdoutSize","dataSetsList","imputationFeatures","numericFeatures","finalFeatureList","stringTransformation","featureName","fromText","toText","conditionalFilter","edaMode","multiUniFeatures","missingThreshold","edaStages","isEdaStarted","edaCompleted","showNumberInput","showTextInput","customEdaStrategyObject","customCorrectionStrategyObject","isOutlierCustom","showError","hideEdaButton","polynomialOrderObject","splineOrderObject","allowedEdaAdvanceOptions","appType","environment","splitDateWise","methodConstants","resamplingConstants","resampleError","edaDataSource","edaPreviewDataSource","edaOutlierDataSource","user","psFeatures","allowedFeaturesList","edaForm","group","selectedDataset","datetimeIndex","imputationFeatureForm","imputationFeatureControl","nullValidator","featuresToImputeControl","initSocket","getAllFiles","generateEdaColums","getAllProjectDatas","filesList","fileSource","console","log","previousEdaDetails","dismiss","validateEdaForm","edaParams","initEdaStages","showEdaProgress","strategies","pId","isMultilabel","fileId","dataSetInfo","customEdaStrategy","customCorrectionStrategy","imputationFeature","featuresToImpute","afterEdaDataFilePath","filePath","parentPipelineFilename","parentFileId","usingGPU","useGPU","edaConditionalFiltering","classNames","algoType","depVariable","SplitDatasetFeature","isMultipleTimeseries","multipleTimeseriesId","newFeatureTransform","map","itemFound","timeseriesInfo","polynomialOrder","splineOrder","resampling","resamplingMethod","aggregationFunction","startEda","info","closeAll","isError","edaProgressTemp","minWidth","openDialog","moduleName","edaReportData","edaId","dataSetId","_updateChangeSubscription","reset","fileSchema","descriptiveStatistics","unidistant_date","splitDateFeaturesList","dataType","outlierDetectionStrategy","outlierCorrectionStrategy","isVarTypeChanged","customVarType","imputationStrategy","numericFeature","getChildDataset","ProjectId","missing","missingCount","imputationCustomValue","buildEdaStrategyTable","buildEdaPreviewTable","outlierPreviewFilepath","buildOutlierPreviewTable","finalData","mergeArrays","targetFeature","getTargetList","i","taFeaturesToExclude","newFeature","previousEda","isMultiTimeseries","frequencyColData","val","frequencyVal","String","frequency","split","replace","resamplingFrequencyIndexVal","index","targetChangeHandler","then","resp","conditionFeature","fetaure","className","getUniqueClass","body","timeseriesChangeHandler","getTargetDeatils","unique","obj","conditionalFeatureList","cFeatureList","plotTargetGraph","dType","dependentFeaturetype","getTargetDetails","targetResponse","taExperimentId","textAnalysisDetails","getTextAnalysisDetails","toPromise","getAllChildDatasets","getEdaByFileId","onChangeDataset","dataSet","schema","ds","flow","outlierIndex","splice","edaPaginator","edaSort","tempArray","filepath","correctedData","imputedDatasetFilepath","isSharedFeature","data_type","readUploadedData","edaPreviewPaginator","edaPreviewSort","edaOutlierPaginator","edaOutlierSort","taExperiment","constantFeature","highCardinalityFeature","mostlyMissing","missingProportion","defaultimputationDataType","Datetime","Boolean","URL","startegies","ocsCustomValue","selectedOption","inputDialogRef","edaTableInputTemp","strategyHandler","Object","keys","selectedIndex","dataset","multiTimeseriesCheck","timeseriesId","fileName","selectedDatasetId","calculateTimeseriesFrequency","objIndex","findIndex","usersets","outputName","outputType","shareReport","navigate","conditionalPreviewTemplate","Data","filterValue","getConditionalFilter","conditionalColumn","column","conditionalrow","row","dialogRef","resamplingPreviewTemplate","getresamplingPreview","resampledColumn","resampledRow","resampled_data","resamplegridOptions","resamplepreviewrowData","tableData","tableColumns","maxWidth","trainVal","trainSlider","writeValue","isChecked","testVal","testSlider","getEdaData","success","onAction","openDateFormatTemplate","dateDialogRef","dateFormatValidator","format","showSnackBarGeneric","colname","JSON","parse","stringify","listen","pop","findEda","tableName","removeListener","Window","applyFilter","withComponents","forChild","path","component","TextAnalysisService","params","experimentId","inputData","taskConfig","renderType","sentimentAnalysisParams","summarizeParam","configData","wordEmbeddingParam","dataConfig"],"mappings":"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","file":"x","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrainingService {\n  serverBaseUrl: string = environment.serverBaseUrl;\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches the previous training details\n   * @param projectId\n   * @param isEdaRequired\n   * @returns\n   */\n  getPreviousTrainingDetails(projectId: string, isEdaRequired: boolean): Observable<any> {\n    return this._http.get(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/trainmodel?isEdaRequired=${isEdaRequired}`\n    );\n  }\n\n  /**\n   * Generates the target plot data\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  plotTargetGraph(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/report/trainmodel/multiunivariate?target=true`,\n      reqObj\n    );\n  }\n\n  /**\n   * Function will return details like algouseGPU:false,Type,isMultilabel,testPercentage,isImbalanced etc.\n   * On target variable selection.\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  getTargetDetails(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/predictive/target_details`,\n      reqObj\n    );\n  }\n\n  /**\n   * Calculates the feature score\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  calculateFeatureScore(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/predictive/calculate_feature_score`,\n      reqObj\n    );\n  }\n\n  /**\n   * calculates the sampling percentage\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  calculateSamplingPercentage(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/training/sampling_percentage`,\n      reqObj\n    );\n  }\n\n  /**\n   * Fetches the optimal clusters\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  findOptimalClusters(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/clustering/visualize/optimise_clusters`,\n      reqObj\n    );\n  }\n\n  /**\n   * Fetches the unique categories\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  getUniqueCategories(reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/training/feature/unique_categories`,\n      reqObj\n    );\n  }\n\n  /**\n   * Executes the predictive modeling type training\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  startPredictiveTraining(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/trainmodel`,\n      reqObj,\n      { responseType: 'text' }\n    );\n  }\n\n  /**\n   * Executes the clustering type training\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  startClusteringTraining(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/clustering/trainmodel`,\n      reqObj,\n      { responseType: 'text' }\n    );\n  }\n\n  /**\n   * Executes the timeseries project type training\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  startTimeseriesTraining(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/timeseries/trainmodel`,\n      reqObj,\n      { responseType: 'text' }\n    );\n  }\n\n  /**\n   * Generates the visualize component graph\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  getVisualizeComponentPlot(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/timeseries/visualize/component`,\n      reqObj\n    );\n  }\n\n  /**\n   * Performs the stationary test\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  startStationarityTest(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/timeseries/stationarity_test`,\n      reqObj\n    );\n  }\n\n  /**\n   * Generates the auto correalation graph\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  getAutoCorrelationGraph(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/timeseries/visualize/autocorrelation`,\n      reqObj\n    );\n  }\n\n  /**\n   * Deletes the training\n   * @param projectId\n   * @param dataId\n   */\n  deleteTraining(trainingId: string, projectId: string, isLastTraining: boolean): Observable<any> {\n    return this._http.delete(\n      `${this.serverBaseUrl}/api/v2/training/${trainingId}?lastTraining=${isLastTraining}&projectId=${projectId}`\n    );\n  }\n\n  /**\n   * Starts the retraining execution\n   * @param trainingId\n   * @param modelId\n   * @param reqObj\n   * @returns\n   */\n  startReTraining(trainingId: string, modelId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/training/${trainingId}/models/${modelId}/retrain`,\n      reqObj\n    );\n  }\n\n  /**\n   * Starts the model tuning execution\n   * @param trainingId\n   * @param modelId\n   * @param reqObj\n   * @returns\n   */\n  startModelTuning(trainingId: string, modelId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/training/${trainingId}/model/${modelId}/tune`,\n      reqObj\n    );\n  }\n\n  /**\n   * Starts the execution of adv algorithm\n   * @param trainingId\n   * @param modelId\n   * @param reqObj\n   * @returns\n   */\n  startAdvTraining(trainingId: string, modelId: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/advtrainmodel/${trainingId}/models/${modelId}`,\n      reqObj\n    );\n  }\n}\n","<h2 mat-dialog-title>\n  {{ dialogHeading }}\n  <small *ngIf=\"dialogData.type === 'preview'\">(Note: Preview of first 5 records only)</small>\n</h2>\n<!-- Analysis form -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'analysis'\" class=\"mat-typography\">\n  <!-- Select user type -->\n  <div class=\"row\">\n    <div class=\"col-md-6 form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select feature</mat-label>\n        <mat-select [formControl]=\"multiUniFeaturesControl\" (selectionChange)=\"featureSelectionChanged()\" multiple\n          required>\n          <mat-option *ngFor=\"let feature of allFeatures\" [value]=\"feature.feature\" [disabled]=\"feature.disabled\"\n            Edited>{{ feature.feature }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"\n            multiUniFeaturesControl.hasError('required') &&\n            (multiUniFeaturesControl.dirty || multiUniFeaturesControl.touched)\n          \">Feature(s) is required.</mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- Radio buttons -->\n  <mat-radio-group class=\"radio-group\" aria-label=\"Select an option\" (change)=\"graphSelectionChanged()\"\n    [(ngModel)]=\"graphType\">\n    <div *ngIf=\"multiUniFeaturesControl.value.length === 1\">\n      <mat-radio-button name=\"opt1\" *ngFor=\"let graph of graphTypesSelected\"\n        [hidden]=\"(project.type !=='timeseries' && graph === 'Lineplot')\" [value]=\"graph\"\n        [matTooltip]=\"_utils.getTootip(graph)\">{{\n        graph\n        }}</mat-radio-button>\n    </div>\n    <div *ngIf=\"multiUniFeaturesControl.value.length === 2\">\n      <mat-radio-button name=\"opt2\" *ngFor=\"let graph of graphTypesSelected\" [value]=\"graph\"\n        [matTooltip]=\"_utils.getTootip(graph)\">{{\n        graph\n        }}</mat-radio-button>\n    </div>\n    <div *ngIf=\"graphType=='2D'|| graphType=='3D'\">\n      <mat-radio-button name=\"opt2\" *ngFor=\"let graph of graphTypesSelected\" [value]=\"graph\"\n        [matTooltip]=\"_utils.getTootip(graph)\">{{\n        graph\n        }}</mat-radio-button>\n    </div>\n  </mat-radio-group>\n  <div class=\"row\" *ngIf=\"graphType == 'Lineplot'\">\n    <div class=\"col-md-12\">\n      <div class=\"col-md-12\">\n        <mat-checkbox class=\"m-0 w-25\" [(ngModel)]=\"outlier\" id=\"outlier\" name=\"outlier\"\n          *ngIf=\"showOutlier && movingAverage == false\">\n          Plot outliers\n        </mat-checkbox>\n      </div>\n      <div class=\"col-md-12\">\n        <mat-checkbox class=\"m-0 w-25\" [(ngModel)]=\"movingAverage\" id=\"movingAverage\" name=\"movingAverage\"\n          *ngIf=\"graphType == 'Lineplot' && outlier == false\">\n          Plot moving average\n        </mat-checkbox>\n        <div class=\"row\" *ngIf=\"movingAverage == true\">\n          <div class=\"col-md-5\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select feature</mat-label>\n              <mat-select [(ngModel)]=\"method\" required>\n                <mat-option *ngFor=\"let item of movingAverageMethod\" [value]=\"item.method\">{{\n                  item.name }}</mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n          <div class=\"col-md-4\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label for=\"folderpath\">Enter span value</mat-label>\n              <input matInput type=\"number\" min=\"1\" name=\"span\" [(ngModel)]=\"span\" id=\"span\"\n                placeholder=\"Enter span value\" />\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Plot -->\n  <button *ngIf=\"isWordCloud && baseImg !== undefined\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    (click)=\"ondownload()\" style=\"margin-left: 88%;\">\n    Download\n  </button>\n  <div class=\"row justify-content-center\">\n    <img *ngIf=\"isWordCloud\" id=\"wordCloud\" />\n    <div *ngIf=\"isMmultiUnivariateAnalysis\" id=\"multiUnivariateAnalysis\"></div>\n    <mat-hint *ngIf=\"showhint !== ''\">\n    {{showhint}}\n    </mat-hint>\n  </div>\n</mat-dialog-content>\n\n<!-- Preview data section -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'preview'\" class=\"mat-typography preview-data-section mb-3\">\n  <!-- <mat-form-field class=\"search-input\">\n    <mat-label>Search</mat-label>\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Enter the value\" #input />\n  </mat-form-field> -->\n  <ag-grid-angular #agGrid id=\"myGrid\" *ngIf=\"previewrowData\" class=\"ag-angle my-4\" [rowData]=\"previewrowData\"\n    [gridOptions]=\"gridOptions\" (gridReady)=\"gridReady($event)\">\n  </ag-grid-angular>\n  <!-- Paginator\n  <mat-paginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator> -->\n</mat-dialog-content>\n\n<!-- Dialog buttons -->\n<mat-dialog-actions class=\"justify-content-end m-auto\">\n  <button mat-stroked-button (click)=\"closeModal()\">Cancel</button>\n  <button *ngIf=\"dialogData.type === 'analysis'\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    [disabled]=\"multiUniFeaturesControl.invalid || !graphType\" (click)=\"onSubmitFeatureAnalysis()\">\n    Submit\n  </button>\n</mat-dialog-actions>","import { LocalStorageService } from './../../../shared/local-storage.service';\nimport { EdaService } from './../eda.service';\nimport { EdaComponent } from './../eda.component';\nimport { AfterViewInit, Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { GridOptions } from 'ag-grid-community';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { DataService } from '../../data/data.service';\nimport { UtilsService } from 'src/app/shared/utils.service';\n\nconst Plotly = require('plotly.js-dist');\n\n@Component({\n  selector: 'app-dialog-handler',\n  templateUrl: './dialog-handler.component.html',\n  styleUrls: ['./dialog-handler.component.scss'],\n})\nexport class DialogHandlerComponent implements OnInit, OnDestroy, AfterViewInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  // @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  snackBarRef: MatSnackBarRef<any>;\n  /** Graph types for multi/uni variate */\n  graphTypes: any = {\n    Integer: ['Barplot', 'Boxplot', 'Scatterplot', 'Lineplot'],\n    Decimal: ['Barplot', 'Boxplot', 'Scatterplot', 'Lineplot'],\n    Categorical: ['Barplot', 'Pieplot'],\n  };\n  gridOptions: GridOptions;\n  resizeEvent = 'resize.ag-grid';\n  private gridApi;\n  gridColumnApi: any;\n  previewrowData: any;\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** From control instance variables */\n  multiUniFeaturesControl = new FormControl('');\n\n  // pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n  de: any;\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  featureDataTypes: Array<any> = [];\n  allFeatures: Array<any> = [];\n  ftype: any;\n  graphTypesSelected: Array<any> = [];\n  graphType: string;\n  mySelections: any;\n  sencondftype: any;\n  thirdftype: any;\n  project: any;\n  showSpinner: boolean = false;\n  isMmultiUnivariateAnalysis: boolean = true;\n  isWordCloud: boolean = true;\n  dialogHeading: string;\n  feature: any;\n  outlier: any = false;\n  showOutlier: boolean = false;\n  movingAverage: any = false;\n  method: any;\n  span: any;\n  baseImg: any;\n  movingAverageMethod = [\n    {\n      name: 'Exponential moving average',\n      method: 'exponential_ma'\n    },\n    {\n      name: 'Simple moving average',\n      method: 'simple_ma'\n    }\n  ]\n  showhint: any;\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _fb: FormBuilder,\n    private _edaDialogRef: MatDialogRef<EdaComponent>,\n    private _eda: EdaService,\n    private _localStorage: LocalStorageService,\n    private _toaster: ToastrService,\n    private _snackBar: MatSnackBar,\n    private _spinner: SpinnerService,\n    private _data: DataService,\n    public _utils: UtilsService\n  ) { }\n\n  /**\n   * Initializes all the required data\n   */\n  ngOnInit(): void {\n    this.feature = [];\n    switch (this.dialogData.type) {\n      case 'preview':\n        this.dialogHeading = 'Data Preview';\n        this.previewData();\n        break;\n      case 'analysis':\n        this.dialogHeading = 'Multivariate/Univariate Analysis';\n        this.project = this._localStorage.getItem('project');\n        this.dialogData.featureDataTypes.forEach((data: any) => {\n          data.data !== 'Unstructured' &&\n            this.allFeatures.push({ feature: data.colName, isDisabled: false });\n        });\n\n        this.feature = this.allFeatures;\n    }\n  }\n\n  /**\n   * Assigns the references after the view is initialized\n   */\n  ngAfterViewInit() {\n    // this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Finds the data type\n   * @param targetVar\n   * @returns\n   */\n  findTheDataType(targetVar: any): any {\n    return this.dialogData.featureDataTypes.find((e: any) => {\n      return e.colName === targetVar;\n    });\n  }\n\n  /**\n   * Filters the array\n   * @param myArray\n   * @param itemToRemove\n   * @returns\n   */\n  filterArray(myArray: any, itemToRemove: any) {\n    return myArray.filter((arrayItem: any) => {\n      return arrayItem !== itemToRemove;\n    });\n  }\n\n  previewData() {\n    this._spinner.showSpinner();\n    let columnDefs = [];\n    this._data\n      .myFileData(this.dialogData.reqObj.pid, this.dialogData.dataId, this.dialogData.reqObj, true)\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            for (let key in res.preview[0]) {\n              columnDefs.push({\n                headerName: key,\n                field: key,\n              });\n            }\n\n            this.gridOptions = {\n              headerHeight: 40,\n              columnDefs: columnDefs,\n              // rowData: res.preview,\n              defaultColDef: { resizable: true },\n            };\n\n            this.previewrowData = res.preview;\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n            this._toaster.error('Cannot preview the files data', 'Data Set');\n          }\n        },\n        (err: Error) => {\n          this.showSpinner = false;\n          this._toaster.error('Server Error', 'Data Set');\n        }\n      );\n  }\n\n  graphSelectionChanged() {\n    if (this.graphType !== 'Lineplot') {\n      this.movingAverage = false;\n      this.outlier = false;\n      this.method = '';\n      this.span = '';\n    }\n    this.showOutlier = (this.project.type === 'timeseries' && this.graphType === 'Lineplot' && this.dialogData.edaData.hasOwnProperty('edaSummary')) ? true : false;\n  }\n  /**\n   * Feature selection changed for multi/uni variate\n   */\n  featureSelectionChanged(): void {\n    this.showOutlier = (this.project.type === 'timeseries' && this.multiUniFeaturesControl.value.length === 1 && this.graphType === 'Lineplot' && this.dialogData.edaData.hasOwnProperty('edaSummary')) ? true : false;\n    this.de = this.findTheDataType(this.multiUniFeaturesControl.value[0]);\n    // if (\n    //   (this.multiUniFeaturesControl.value.length != 0 && this.de.data == 'Text') ||\n    //   (this.multiUniFeaturesControl.value.length != 0 && this.de.data == 'URL')\n    // ) {\n    //   this.allFeatures.forEach((data: any) => {\n    //     if (data.feature !== this.multiUniFeaturesControl.value[0]) {\n    //       data.disabled = true;\n    //     }\n    //   });\n    // } else if (this.multiUniFeaturesControl.value.length === 0) {\n    //   this.allFeatures.forEach((data: any) => {\n    //     data.disabled = false;\n    //   });\n    // } else {\n    this.allFeatures = [];\n    // }\n    let dt: Array<any> = [];\n    // Hides the plot section if no feature is selected\n    if (this.multiUniFeaturesControl.value.length === 0) {\n      this.isWordCloud = false;\n      this.isMmultiUnivariateAnalysis = false;\n    }\n    // limits the user for selecting at most 3 options\n    if (this.multiUniFeaturesControl.value.length < 4) {\n      this.mySelections = this.multiUniFeaturesControl.value;\n    } else {\n      this.multiUniFeaturesControl.setValue(this.mySelections);\n      this.multiUniFeaturesControl.updateValueAndValidity();\n    }\n    // Generates radio buttons as per the selected features\n    if (this.multiUniFeaturesControl.value.length === 1) {\n      this.ftype = this.findTheDataType(this.multiUniFeaturesControl.value[0]);\n      this.graphTypesSelected = this.graphTypes[this.ftype.multivariateDataType];\n      switch (this.ftype.multivariateDataType) {\n        case 'Integer':\n          dt = ['Integer', 'Decimal', 'Datetime', 'Categorical', 'Boolean'];\n        case 'Decimal':\n          dt = ['Integer', 'Decimal', 'Datetime', 'Categorical', 'Boolean'];\n          break;\n        case 'Categorical':\n        case 'Boolean':\n          dt = ['Integer', 'Decimal', 'Categorical', 'Boolean'];\n          break;\n        case 'Datetime':\n          dt = ['Integer', 'Decimal'];\n          break;\n        case 'Text':\n          dt = [];\n          break;\n        case 'URL':\n          dt = [];\n          break;\n        default:\n          dt = [];\n      }\n      let temp = this.graphTypes[this.ftype.multivariateDataType];\n      if (temp) {\n        this.graphTypesSelected = this.filterArray(temp, 'Scatterplot');\n      }\n      this.graphType = 'Barplot';\n      // Remove barplot and add histogram, if only one feature is selected and is numeric\n      if (\n        this.multiUniFeaturesControl.value.length === 1 &&\n        (this.ftype.multivariateDataType === 'Integer' ||\n          this.ftype.multivariateDataType === 'Decimal')\n      ) {\n        this.graphTypesSelected = this.graphTypesSelected.filter((e) => e != 'Barplot');\n        this.graphTypesSelected.push('Histogram');\n        this.graphType = 'Histogram';\n      }\n    } else if (this.multiUniFeaturesControl.value.length === 2) {\n      this.graphTypesSelected = [];\n      this.ftype = this.findTheDataType(this.multiUniFeaturesControl.value[0]);\n      if (\n        this.ftype.multivariateDataType === 'Integer' ||\n        this.ftype.multivariateDataType === 'Decimal' ||\n        this.ftype.multivariateDataType === 'Boolean' ||\n        this.ftype.multivariateDataType === 'Categorical'\n      ) {\n        this.sencondftype = this.findTheDataType(this.multiUniFeaturesControl.value[1]);\n        if (\n          this.ftype.multivariateDataType === 'Integer' &&\n          this.sencondftype.multivariateDataType === 'Integer'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n\n        if (\n          this.ftype.multivariateDataType === 'Decimal' &&\n          this.sencondftype.multivariateDataType === 'Decimal'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n\n        if (\n          this.ftype.multivariateDataType === 'Integer' &&\n          this.sencondftype.multivariateDataType === 'Decimal'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n\n        if (\n          this.ftype.multivariateDataType === 'Decimal' &&\n          this.sencondftype.multivariateDataType === 'Integer'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n\n        if (\n          this.ftype.multivariateDataType === 'Integer' &&\n          this.sencondftype.multivariateDataType === 'Numeric'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n\n        if (\n          this.ftype.multivariateDataType === 'Numeric' &&\n          this.sencondftype.multivariateDataType === 'Integer'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n\n        if (\n          this.ftype.multivariateDataType === 'Numeric' &&\n          this.sencondftype.multivariateDataType === 'Numeric'\n        ) {\n          this.graphTypesSelected = ['Boxplot', 'Scatterplot'];\n          this.graphType = 'Boxplot';\n        }\n        if (\n          this.ftype.multivariateDataType === 'Integer' &&\n          this.sencondftype.multivariateDataType === 'Boolean'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Boolean' &&\n          this.sencondftype.multivariateDataType === 'Integer'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Boolean' &&\n          this.sencondftype.multivariateDataType === 'Decimal'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Decimal' &&\n          this.sencondftype.multivariateDataType === 'Boolean'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Boolean' &&\n          this.sencondftype.multivariateDataType == 'Numeric'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Numeric' &&\n          this.sencondftype.multivariateDataType === 'Boolean'\n        ) {\n\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Categorical' &&\n          this.sencondftype.multivariateDataType === 'Integer'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Integer' &&\n          this.sencondftype.multivariateDataType === 'Categorical'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Categorical' &&\n          this.sencondftype.multivariateDataType === 'Decimal'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Decimal' &&\n          this.sencondftype.multivariateDataType === 'Categorical'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Categorical' &&\n          this.sencondftype.multivariateDataType === 'Numeric'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        } else if (\n          this.ftype.multivariateDataType === 'Numeric' &&\n          this.sencondftype.multivariateDataType === 'Categorical'\n        ) {\n          this.graphTypesSelected = ['Barplot', 'Boxplot', 'Histogram'];\n          this.graphType = 'Barplot';\n        }\n\n        dt = ['Integer', 'Decimal', 'Categorical', 'Boolean'];\n      } else if (this.ftype.multivariateDataType === 'Datetime') {\n        dt = [];\n      } else if (this.ftype.multivariateDataType === 'Categorical') {\n        dt = ['Integer', 'Decimal', 'Categorical', 'Boolean'];\n      } else if (this.ftype.multivariateDataType === 'Boolean') {\n        dt = ['Integer', 'Decimal', 'Categorical', 'Boolean'];\n      } else if (this.ftype.multivariateDataType === 'Text') {\n        dt = [];\n      } else if (this.ftype.multivariateDataType === 'URL') {\n        dt = [];\n      }\n    } else if (this.multiUniFeaturesControl.value.length === 3) {\n      this.thirdftype = this.findTheDataType(this.multiUniFeaturesControl.value[2]);\n      this.ftype.isNumeric = (this.ftype.multivariateDataType === 'Integer' || this.ftype.multivariateDataType === 'Decimal'\n        || this.ftype.multivariateDataType === 'Numeric') ? 'Numeric' : 'none';\n      this.sencondftype.isNumeric = (this.sencondftype.multivariateDataType === 'Integer' ||\n        this.sencondftype.multivariateDataType === 'Decimal' ||\n        this.sencondftype.multivariateDataType === 'Numeric') ? 'Numeric' : 'none';\n      this.thirdftype.isNumeric = (this.thirdftype.multivariateDataType === 'Integer'\n        || this.thirdftype.multivariateDataType === 'Decimal'\n        || this.thirdftype.multivariateDataType === 'Numeric') ? 'Numeric' : 'none';\n      if (this.ftype.isNumeric === 'Numeric' && this.sencondftype.isNumeric === 'Numeric' && this.thirdftype.isNumeric === 'Numeric') {\n       //   console.log('m inside**********************************')\n        this.graphTypesSelected = ['2D', '3D'];\n        this.graphType = '2D';\n      } else {\n       // console.log(\"**********************************pls let else\")\n        this.graphType = 'scatter';\n      }\n    }\n    this.dialogData.featureDataTypes.forEach((data: any) => {\n      dt.indexOf(data.multivariateDataType) !== -1\n        ? this.allFeatures.push({ feature: data.colName, isDisabled: false })\n        : null;\n    });\n\n    if (this.multiUniFeaturesControl.value.length) {\n      let featureValue;\n      if (this.multiUniFeaturesControl.value.length == 1) {\n        featureValue = this.multiUniFeaturesControl.value[0];\n      } else if (this.multiUniFeaturesControl.value.length == 2) {\n        featureValue = this.multiUniFeaturesControl.value[1];\n      }\n\n      let item = this.dialogData.featureDataTypes.filter((item) => {\n        return item.data == 'Datetime' && item.colName == featureValue;\n      });\n\n      if (item.length && item[0].data == 'Datetime') {\n        item.length == 1\n          ? this.allFeatures.push({ feature: item[0].colName, isDisabled: false })\n          : null;\n        // this.allFeatures.unshift(this.allFeatures.pop())\n      }\n    }\n    if (this.allFeatures.length == 0) {\n      this.multiUniFeaturesControl.value.forEach((element) => {\n        this.allFeatures.push({ feature: element });\n      });\n    }\n\n    if (this.multiUniFeaturesControl.value.length == 0) {\n      this.allFeatures = this.feature;\n    }\n  }\n\n  compareFn(optionOne, optionTwo): boolean {\n    return optionOne.id === optionTwo.id;\n  }\n  /**\n   * Generates a graph as per the selected features and plot type\n   */\n  onSubmitFeatureAnalysis(): void {\n    this.baseImg = undefined;\n    this.showSpinner = true;\n    if (this.movingAverage === true && (this.method === undefined || this.span === undefined)) {\n      this.snackBarRef = this._snackBar.open(\n        'Please select method and enter span value when moving average plot is selected',\n        'OK'\n      );\n      return;\n    }\n    if (this.movingAverage === true && this.method !== undefined && (this.span < 0 || this.span === 0)) {\n      this.snackBarRef = this._snackBar.open(\n        'Span value can not be less than 1',\n        'OK'\n      );\n      return;\n    }\n    if (this.movingAverage === true && (this.span % 1) !== 0) {\n      this.snackBarRef = this._snackBar.open(\n        'Span value can not be decimal',\n        'OK'\n      );\n      return;\n    }\n    this.isWordCloud = true;\n    this.isMmultiUnivariateAnalysis = true;\n    let chartType;\n    // If histogram is selected then parse graph type as Barplot, only if one feature is selected and is numeric\n    if (\n      this.multiUniFeaturesControl.value.length === 1 &&\n      this.graphType == 'Histogram' &&\n      (this.ftype.multivariateDataType === 'Integer' ||\n        this.ftype.multivariateDataType === 'Decimal')\n    ) {\n      chartType = 'Barplot';\n    } else {\n      chartType = this.graphType;\n    }\n    let reqObj: any = {\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      selectedVariables: this.multiUniFeaturesControl.value,\n      chartType: chartType,\n      outlier: this.outlier,\n      movingAverage: this.movingAverage,\n      method: this.method,\n      span: this.span\n    };\n    if (this.dialogData.edaData.hasOwnProperty('edaSummary')) {\n      reqObj.edaSummary = this.uniqueBy(this.dialogData.edaData.edaSummary, 'colName');\n      reqObj.filename = this.dialogData.selectedDataSet.name;\n      reqObj.currentEdaId = this.dialogData.edaData._id;\n      reqObj.currentPipelineFilename = this.dialogData.edaData.tasks[0].currentPipelineFilename;\n      reqObj.featureDataTypes = this.uniqueBy(this.dialogData.featureDataTypes, 'colName');\n    } else {\n      reqObj.featureDataTypes = this.uniqueBy(this.dialogData.featureDataTypes, 'colName');\n      reqObj.filename = this.dialogData.selectedDataSet.name;\n    }\n    reqObj.fileEncoding = this.dialogData.selectedDataSet.fileEncoding || 'utf_8';\n    this.generatePlot(reqObj);\n  }\n\n  /**\n   * Generate and renders the plot for munti uni variate feature\n   * @param reqObj\n   */\n  generatePlot(reqObj: any): void {\n    this._spinner.showSpinner();\n    this._eda\n      .generateMultiUniVariatePlot(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this.showSpinner = false;\n          if (res) {\n            this.showhint = res.sampling_msg;\n            let wordCloud: any = document.getElementById('wordCloud');\n            let graphDiv: any = document.getElementById('multiUnivariateAnalysis');\n            if (\n              this.ftype.multivariateDataType === 'Text' ||\n              this.ftype.multivariateDataType === 'URL'\n            ) {\n              this.baseImg = res.graphContent;\n              this.isWordCloud = true;\n              this.isMmultiUnivariateAnalysis = false;\n              wordCloud.setAttribute('src', 'data:application/pdf;base64,' + res.graphContent);\n            } else {\n              this.isWordCloud = false;\n              this.isMmultiUnivariateAnalysis = true;\n              // Always clears the previous plot and renders new one.\n              while (graphDiv.data && graphDiv.data.length > 0) {\n                Plotly.deleteTraces(graphDiv, [0]);\n              }\n              res.graphContent.layout.template.layout.plot_bgcolor = 'white';\n              res.graphContent.layout.width = 1138;\n              res.graphContent.layout.height = 450;\n              res.graphContent.layout.template.layout.title.xanchor = 'center';\n              res.graphContent.layout.template.layout.title.y = 0.9;\n              res.graphContent.layout.template.layout.title.x = 0.5;\n              res.graphContent.layout.template.layout.title.yanchor = 'top';\n              res.graphContent.layout.template.layout.xaxis.linecolor = 'black';\n              res.graphContent.layout.template.layout.yaxis.linecolor = 'black';\n              res.graphContent.layout.template.layout.xaxis.zerolinecolor = 'black';\n              res.graphContent.layout.template.layout.yaxis.zerolinecolor = 'black';\n\n              Plotly.plot(graphDiv, res.graphContent.data, res.graphContent.layout, { displayModeBar: true });\n\n            }\n          } else {\n            this._toaster.error('Cannot plot the graph', 'EDA');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err: any) => {\n          this.showSnackBar(err.error.graphContent, 'OK');\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  ondownload() {\n    this._spinner.showSpinner();\n    var a = document.createElement(\"a\"); //Create <a>\n    a.href = \"data:image/png;base64,\" + this.baseImg; //Image Base64 Goes here\n    a.download = \"FeatureAnalaysis.png\"; //File name Here\n    a.click(); //Downloaded file\n    this._spinner.stopSpinner();\n  }\n  /**\n   * Finds the unique item and returns it\n   * @param arr\n   * @param prop\n   * @returns\n   */\n  uniqueBy(arr: any, prop: any): any {\n    return arr.reduce((a: any, d: any) => {\n      if (!a.includes(d[prop])) {\n        a.push(d);\n      }\n      return a;\n    }, []);\n  }\n\n  /**\n   * Closes the current opened dialog\n   */\n  closeModal(data?: any): void {\n    this._edaDialogRef.close(data);\n  }\n\n  /**\n   * Renders the snackbar\n   */\n  showSnackBar(message: string, button: string): void {\n    this.snackBarRef = this._snackBar.open(message, button, {\n      horizontalPosition: 'right',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Called when ng-grid is rendered in dom\n   * @param event\n   */\n  gridReady(event: any) {\n    event.api.setDomLayout('autoHeight');\n    this.gridApi = event.api;\n    this.gridApi.setColumnDefs(this.gridOptions.columnDefs);\n    this.gridApi.setRowData(this.previewrowData);\n    this.gridApi.refreshCells({ force: true });\n  }\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">signal_cellular_alt</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title\" [matTooltip]=\"_utils.getTootip('eda')\">EDA</h3>\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content *ngIf=\"dataSetsList.length\">\n      <!-- EDA form -->\n      <form [formGroup]=\"edaForm\" role=\"form\" class=\"form-validate mt-4\" name=\"edaForm\">\n        <div class=\"row\">\n          <div [class]=\"project.type =='timeseries' ? 'col-md-3' : 'col-md-4'\">\n            <mat-form-field appearance=\"outline\" [matTooltip]=\"_utils.getTootip('selectDataSetEda')\">\n              <mat-label for=\"eda file\" >Select a dataset</mat-label>\n              <mat-select formControlName=\"selectedDataset\" (selectionChange)=\"onChangeDataset($event.value)\" required>\n                <mat-option *ngFor=\"let dataItem of dataSetsList\" [value]=\"dataItem._id\">\n                  {{ dataItem.name | dropFileExtension: dataItem.fileSource }}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"\n                  edaForm.get('selectedDataset').hasError('required') &&\n                  (edaForm.get('selectedDataset').dirty || edaForm.get('selectedDataset').touched)\n                \">File is requried.</mat-error>\n              <mat-hint *ngIf=\"selectedDataSet && !previousEda\">\n                EDA hasn't performed on this dataset.\n              </mat-hint>\n            </mat-form-field>\n          </div>\n          <div [class]=\"project.type =='timeseries' ? 'col-md-3' : 'col-md-4'\"\n            *ngIf=\"project.type === 'timeseries' && selectedDataSet\">\n            <mat-form-field appearance=\"outline\" [matTooltip]=\"_utils.getTootip('selectIndex')\">\n              <mat-label for=\"Index Column\">Select index</mat-label>\n              <mat-select formControlName=\"datetimeIndex\" (selectionChange)=\"onIndexColumnChange()\" required>\n                <mat-option *ngFor=\"let item of selectedDataSet.fileSchema | indexDataType\" [value]=\"item.colName\">\n                  {{ item.colName }}\n                </mat-option>\n              </mat-select>\n              <mat-hint *ngIf=\"selectedIndex?.unidistant_date === false && !previousEda\">\n                Date is not unidistant or contains missing values.\n              </mat-hint>\n              <mat-error *ngIf=\"\n                  edaForm.get('datetimeIndex').hasError('required') &&\n                  (edaForm.get('datetimeIndex').dirty || edaForm.get('datetimeIndex').touched)\n                \">Index is required.</mat-error>\n            </mat-form-field>\n          </div>\n          <div [class]=\"project.type =='timeseries' ? 'col-md-3' : 'col-md-4'\"\n            *ngIf=\"selectedDataSet && project.type != 'clustering'\">\n            <mat-form-field appearance=\"outline\" [matTooltip]=\"_utils.getTootip('selectTarget')\">\n              <mat-label for=\"Index Column\">Select a target</mat-label>\n              <mat-select [formControl]=\"targetControl\" (selectionChange)=\"targetChangeHandler($event.value)\" required>\n                <mat-option *ngFor=\"let item of targetFeature\" [value]=\"item\">\n                  {{ item.colName }}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"\n                  targetControl.hasError('required') &&\n                  (targetControl.dirty || targetControl.touched)\n                \">Target is required.</mat-error>\n              <mat-hint *ngIf=\"selectedDataSet\">\n                Please remove the missing values from the feature to use it as a target.\n              </mat-hint>\n            </mat-form-field>\n          </div>\n          <div [class]=\"project.type =='timeseries' ? 'col-md-3' : 'col-md-4'\"\n            *ngIf=\"selectedDataSet && project.type == 'timeseries' && targetControl.value && multipleTimeseriesId === 'True'\">\n            <mat-form-field appearance=\"outline\" [matTooltip]=\"_utils.getTootip('timeSeriesIds')\">\n              <mat-label for=\"timeseries\">Select timeseries identifier\n              </mat-label>\n              <mat-select [formControl]=\"timeseriesIds\" multiple required\n                (selectionChange)=\"timeseriesChangeHandler($event.value)\">\n                <mat-option *ngFor=\"let item of timeseriesGroupList\" [value]=\"item.colName\">\n                  {{ item.colName }}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\" timeseriesIds.hasError('required') &&\n              (timeseriesIds.dirty || timeseriesIds.touched)\">Timeseries identifiers are required.</mat-error>\n            </mat-form-field>\n          </div>\n          <div class=\"col-md-7 border-left ml-4\" *ngIf=\"project.type == 'clustering' && selectedDataSet\">\n            <mat-card class=\"heading mat-elevation-z0\">\n              <mat-card-header>\n                <div mat-card-avatar>\n                  <mat-icon class=\"folder-icon\">description</mat-icon>\n                </div>\n                <mat-card-title>\n                  <h3 class=\"heading-title\">Dataset Info</h3>\n                </mat-card-title>\n              </mat-card-header>\n              <mat-card-content>\n                <table class=\"table table-borderless mt-4 text-left\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\" class=\"font-weight-normal\">No. of Records</th>\n                      <th scope=\"col\" class=\"font-weight-normal\">No. of Columns</th>\n                      <th scope=\"col\" class=\"font-weight-normal\">File Size</th>\n                      <th scope=\"col\" class=\"font-weight-normal\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{{ selectedDataSet?.noOfRows || '-' }}</td>\n                      <td>{{ selectedDataSet?.noOfCols || '-' }}</td>\n                      <td>\n                        {{\n                        selectedDataSet\n                        ? (selectedDataSet['fileSize'] | fileSizeConverter: 2)\n                        : '-'\n                        }}\n                      </td>\n                      <td>\n                        <button *ngIf=\"selectedDataSet\" mat-icon-button class=\"text-value\" matTooltip=\"Preview the data\"\n                          (click)=\"dataPreviewHandler(selectedDataSet._id)\">\n                          <i class=\"fa fa-eye\"></i>\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </mat-card-content>\n            </mat-card>\n          </div>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!dataSetsList.length\" class=\"text-center mt-5 font-weight-normal\">\n    You don't have any data set or connection yet,\n    <a class=\"text-decoration-none\" href=\"#\" [routerLink]=\"['/project/data/dataconnection']\">upload now.</a>\n  </h4>\n\n  <!-- Data set info and Target Graph -->\n  <mat-card *ngIf=\"selectedDataSet && project.type != 'clustering'\" class=\"heading mt-5\">\n    <div class=\"row\">\n      <div class=\"col-md-4 border-right\" *ngIf=\"selectedDataSet\">\n        <mat-card class=\"heading mat-elevation-z0\">\n          <mat-card-header>\n            <div mat-card-avatar>\n              <mat-icon class=\"folder-icon\">description</mat-icon>\n            </div>\n            <mat-card-title>\n              <h3 class=\"heading-title\">Dataset info</h3>\n            </mat-card-title>\n          </mat-card-header>\n          <mat-card-content style=\"min-height: 400px\">\n            <table class=\"table table-borderless mt-4\">\n              <tbody>\n                <tr>\n                  <th scope=\"col\" class=\"font-weight-normal\">No. of Records</th>\n                  <td>{{ selectedDataSet?.noOfRows || '-' }}</td>\n                </tr>\n                <tr>\n                  <th scope=\"col\" class=\"font-weight-normal\">No. of Columns</th>\n                  <td>{{ selectedDataSet?.noOfCols || '-' }}</td>\n                </tr>\n                <tr>\n                  <th scope=\"col\" class=\"font-weight-normal\">File Size</th>\n                  <td>\n                    {{\n                    selectedDataSet ? (selectedDataSet['fileSize'] | fileSizeConverter: 2) : '-'\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"col\" class=\"font-weight-normal\">Action</th>\n                  <td>\n                    <button *ngIf=\"selectedDataSet\" mat-icon-button class=\"text-value\" matTooltip=\"Preview the data\"\n                      (click)=\"dataPreviewHandler(selectedDataSet._id)\">\n                      <i class=\"fa fa-eye\"></i>\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      <div class=\"col-md-8\" [hidden]=\"project.type === 'clustering'\">\n        <mat-card class=\"heading mat-elevation-z0\">\n          <mat-card-header>\n            <div mat-card-avatar>\n              <mat-icon class=\"folder-icon\">bar_chart</mat-icon>\n            </div>\n            <mat-card-title>\n              <h3 class=\"heading-title\">Target distribution</h3>\n            </mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <div class=\"mt-5 text-muted\" [hidden]=\"targetControl.value\">\n              Please select a target, to view the graph.\n            </div>\n            <div class=\"mt-4\" [hidden]=\"!targetControl.value\">\n              <div class=\"d-flex justify-content-center\" id=\"targetPlot\"></div>\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n  </mat-card>\n\n  <!-- Heading section (Advance options and share report button) -->\n  <div *ngIf=\"!project.useGPU && selectedDataSet\"\n    class=\"row mt-5 mb-2 d-flex align-items-center justify-content-between\">\n    <div class=\"col-md-6 d-flex align-items-center\">\n      <button mat-icon-button (click)=\"showAdvanceOptions = !showAdvanceOptions\" class=\"bg-grey-300 mr-3\">\n        <mat-icon class=\"chevron-icon\" *ngIf=\"!showAdvanceOptions\">chevron_right</mat-icon>\n        <mat-icon class=\"chevron-icon\" *ngIf=\"showAdvanceOptions\">expand_more</mat-icon>\n      </button>\n      <h5 class=\"mb-0\" style=\"color: #07509d\">Advanced options</h5>\n    </div>\n    <div [class]=\"\n        previousEda ? 'col-md-4 d-flex justify-content-end' : 'col-md-2 d-flex justify-content-end'\n      \" style=\"max-width: none !important\">\n      <!-- FEATURE ANALYSIS -->\n      <button class=\"mr-3 text-center\" mat-stroked-button type=\"button\" (click)=\"openFeatureAnalysisModal()\"\n        [matTooltip]=\"_utils.getTootip('featureAnalysis')\">\n        Feature analysis\n      </button>\n      <!-- EDA REPORT -->\n      <button class=\"mr-3 text-center\" mat-stroked-button *ngIf=\"previousEda\" type=\"button\"\n        (click)=\"openEDAReportModal()\" [disabled]=\"\n          appType === 'saas' &&\n          !user?.roles?.includes('super_admin') &&\n          !user?.roles?.includes('admin')\n        \" [ngClass]=\"\n          appType === 'enterprise' ||\n          (appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin')))\n            ? ''\n            : 'disable-Btn'\n        \">\n        <span [class]=\"\n            appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))\n              ? ''\n              : 'mr-2'\n          \" matBadge [matBadgeIcon]=\"\n            appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))\n              ? ''\n              : 'ENT'\n          \" matBadgeOverlap=\"false\">EDA report</span>\n      </button>\n      <!-- SHARE REPORT -->\n      <button class=\"text-center\" mat-stroked-button *ngIf=\"previousEda\" (click)=\"shareReport(selectedDataSet)\"\n        [disabled]=\"\n          appType === 'saas' &&\n          !user?.roles?.includes('super_admin') &&\n          !user?.roles?.includes('admin')\n        \" [ngClass]=\"\n          appType === 'enterprise' ||\n          (appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin')))\n            ? ''\n            : 'disable-Btn'\n        \">\n        <span [class]=\"\n            appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))\n              ? ''\n              : 'mr-2'\n          \" matBadge [matBadgeIcon]=\"\n            appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))\n              ? ''\n              : 'ENT'\n          \" matBadgeOverlap=\"false\">Share report</span>\n      </button>\n    </div>\n    <!-- <div *ngIf=\"edaData\" class=\"col-md-2 d-flex text-right\">\n      <button class=\"mt-4\" mat-stroked-button *ngIf=\"previousEda\" type=\"button\" (click)=\"openEDAReportModal()\">\n        View EDA report\n      </button>\n       <button mat-stroked-button (click)=\"shareReport(selectedDataSet)\">Share Report</button> -->\n    <!-- </div>\n    <div *ngIf=\"previousEda\" class=\"col-md-2 d-flex text-right\">\n      <button mat-stroked-button (click)=\"shareReport(selectedDataSet)\">Share Report</button>\n    </div> -->\n  </div>\n\n  <!-- Advance options (Tabs) -->\n  <mat-card *ngIf=\"showAdvanceOptions && selectedDataSet\" class=\"mt-4 p-4\">\n    <mat-card-content>\n      <mat-tab-group mat-align-tabs=\"start\">\n        <!-- Split Dataset -->\n        <mat-tab label=\"Split Dataset\" *ngIf=\"project.type !== 'clustering'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedEdaAdvanceOptions.includes('splitDataset')\n          \">\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedEdaAdvanceOptions.includes('splitDataset') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('splitDataset')\">\n              Split Dataset\n            </mat-label>\n          </ng-template>\n          <div class=\"row mx-2 my-4 border-bottom\" *ngIf=\"project.type !=='timeseries' && splitDateFeaturesList.length\">\n            <div class=\"col-md-12\">\n              <mat-checkbox class=\"m-0 w-25\" [(ngModel)]=\"splitDateWise\" id=\"splitdataset\" name=\"splitdataset\"\n                [matTooltip]=\"_utils.getTootip('splitDataDatewise')\">\n                Split dataset date wise\n              </mat-checkbox>\n            </div>\n            <div class=\"col-md-4 mt-2\" *ngIf=\"splitDateWise == true\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Select split date feature</mat-label>\n                <mat-select [(ngModel)]=\"SplitDatasetFeature\">\n                  <mat-option *ngFor=\"let feature of splitDateFeaturesList\" [value]=\"feature.colName\">{{\n                    feature.colName }}</mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"row mx-2 my-4\">\n            <!-- TRAIN DATASET -->\n            <div class=\"col-md-4 border-right\">\n              <mat-checkbox class=\"m-0 w-25\" [(ngModel)]=\"trainDataset\" disabled id=\"trainDataset\" name=\"trainDataset\"\n                [matTooltip]=\"_utils.getTootip('trainDataset')\">\n                Train Dataset\n              </mat-checkbox>\n              <div class=\"mt-3 ml-4\" *ngIf=\"trainDataset\">\n                <mat-label for=\"targetDataset\">Select train dataset</mat-label>\n                <div>\n                  <mat-slider #trainSlider thumbLabel [displayWith]=\"formatLabel\" class=\"custom-mat-slider\"\n                    color=\"primary\" (change)=\"trainDatasetChanged($event.value)\" [(ngModel)]=\"trainSize\">\n                  </mat-slider>\n                  <!-- [value]=\"trainSize\" -->\n                  <!-- [ngModelOptions]=\"{ standalone: true }\" -->\n                  {{ trainSize }}%\n                </div>\n              </div>\n            </div>\n            <!-- TEST DATASET -->\n            <div class=\"col-md-4 border-right ml-3\">\n              <mat-checkbox class=\"m-0 w-25\" [(ngModel)]=\"testDataset\" disabled id=\"testDataset\" name=\"testDataset\"\n                *ngIf=\"project.type !== 'clustering'\" [matTooltip]=\"_utils.getTootip('testDataset')\">Test Dataset\n              </mat-checkbox>\n              <div class=\"mt-3 ml-4\" *ngIf=\"testDataset && project.type !== 'clustering'\">\n                <mat-label for=\"testDataset\">Select test dataset (hold out)</mat-label>\n                <div>\n                  <mat-slider #testSlider thumbLabel [displayWith]=\"formatLabel\" class=\"custom-mat-slider\"\n                    color=\"primary\" [max]=\"100-(trainSize+devSize)\" [min]=\"10\" [(ngModel)]=\"holdoutSize\"\n                    (change)=\"testDatasetChanged($event.value)\"></mat-slider>\n                  <!-- [max]=\"100 - (trainSize + devSize)\" -->\n                  <!-- [ngModelOptions]=\"{ standalone: true }\" -->\n                  {{ holdoutSize }}%\n                </div>\n              </div>\n            </div>\n            <!-- DEV DATASET -->\n            <div class=\"col-md-3 ml-3\">\n              <mat-checkbox class=\"m-0 w-25\" [(ngModel)]=\"devDataset\" (change)=\"toggleDevDataset(devDataset)\"\n                id=\"devDataset\" name=\"devDataset\" *ngIf=\"project.type == 'predictive_modeling'\"\n                [matTooltip]=\"_utils.getTootip('devlopmentDataset')\">\n                Development Dataset\n              </mat-checkbox>\n              <div class=\"ml-4 mt-3\" *ngIf=\"devDataset && project.type == 'predictive_modeling'\">\n                <mat-label for=\"devDataset\">Dev dataset (validation) : {{ devSize }}% </mat-label>\n                <!-- <mat-slider\n                  thumbLabel\n                  [displayWith]=\"formatLabel\"\n                  class=\"custom-mat-slider\"\n                  color=\"primary\"\n                  min=\"0\"\n                  [max]=\"100 - trainSize\"\n                  step=\"1\"\n                  [(ngModel)]=\"devSize\"\n                  [ngModelOptions]=\"{ standalone: true }\"\n                  (change)=\"devDatasetChanged()\"\n                >\n                </mat-slider> -->\n                <!-- {{ devSize }} % -->\n              </div>\n            </div>\n            <div class=\"mt-4\">\n              <mat-hint>\n                Note :\n                <ul>\n                  <li>Train Set - Sample used to train the model (min 50% and max 90%)</li>\n                  <li *ngIf=\"project.type != 'timeseries'\">\n                    Dev Set (Validation) - Sample used to perform Kfold and Hyper parameter tuning\n                  </li>\n                  <li>Test Set (Holdout) - Sample used to evaluate model only</li>\n                  <li>Sum of all dataset must be 100%</li>\n                </ul>\n              </mat-hint>\n            </div>\n            <!-- <div class=\"col-md-6\">\n              <mat-hint>\n                Note :\n                <ul>\n                  <li>Train Set - Sample used to train the model</li>\n                  <li *ngIf=\"project.type != 'timeseries'\">\n                    Dev (Validation) Set - Sample used to perform Kfold and Hyper parameter tuning\n                  </li>\n                  <li>Test (Holdout) Set - Sample used to evaluate model only</li>\n                  <li>Sum of all slider values must be 100% only</li>\n                </ul>\n              </mat-hint>\n            </div> -->\n          </div>\n        </mat-tab>\n        <!-- MISSING THRESHOLD -->\n        <mat-tab label=\"Missing Threshold\" [matTooltip]=\"_utils.getTootip('missingThreshold')\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedEdaAdvanceOptions.includes('missingThreshold')\n          \">\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedEdaAdvanceOptions.includes('missingThreshold') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('missingThreshold')\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedEdaAdvanceOptions.includes('missingThreshold')\n                  ? ''\n                  : 'disable-Btn'\n              \">\n              Missing Threshold\n            </mat-label>\n          </ng-template>\n          <label class=\"h5 mt-4\">Select missing threshold: {{ missingThreshold }}%</label>\n          <div>\n            <mat-slider thumbLabel [displayWith]=\"formatLabel\" class=\"custom-mat-slider\" color=\"primary\" min=\"5\"\n              max=\"100\" step=\"5\" [(ngModel)]=\"missingThreshold\" [ngModelOptions]=\"{ standalone: true }\"></mat-slider>\n          </div>\n        </mat-tab>\n        <!-- IMPUTATION FEATURE -->\n        <mat-tab *ngIf=\"project.type !== 'timeseries'\" [matTooltip]=\"_utils.getTootip('imputationFeature')\"\n          label=\"Imputation Feature\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedEdaAdvanceOptions.includes('imputationFeature')\n          \">\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedEdaAdvanceOptions.includes('imputationFeature') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('imputationFeature')\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedEdaAdvanceOptions.includes('imputationFeature')\n                  ? ''\n                  : 'disable-Btn'\n              \">\n              Imputation Feature\n            </mat-label>\n          </ng-template>\n          <div class=\"my-3 ml-2\" style=\"overflow: hidden\">\n            <div class=\"mt-4 h5\" *ngIf=\"!imputationFeatures.length\">\n              Imputation feature is not available for this dataset.\n            </div>\n            <div class=\"row mt-4\" [formGroup]=\"imputationFeatureForm\" *ngIf=\"imputationFeatures.length\">\n              <div class=\"col-md-4\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select imputation feature</mat-label>\n                  <mat-select formControlName=\"imputationFeatureControl\">\n                    <mat-option *ngFor=\"let feature of imputationFeatures\" [value]=\"feature.imputationFeature\">{{\n                      feature.imputationFeature }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n              <div class=\"col-md-4\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select features to impute</mat-label>\n                  <mat-select formControlName=\"imputationFeatureControl\">\n                    <mat-option *ngFor=\"let feature of numericFeatures\" [value]=\"feature.numericFeature\">{{\n                      feature.numericFeature }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n            </div>\n          </div>\n        </mat-tab>\n        <!-- CONDITIONAL FILTERING -->\n        <mat-tab label=\"Conditional Filtering\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedEdaAdvanceOptions.includes('conditionalFiltering')\n          \">\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedEdaAdvanceOptions.includes('conditionalFiltering') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('contiionalFiltering')\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedEdaAdvanceOptions.includes('conditionalFiltering')\n                  ? ''\n                  : 'disable-Btn'\n              \">\n              Conditional Filtering</mat-label>\n          </ng-template>\n          <div class=\"my-3 ml-2\" style=\"overflow: hidden\">\n            <div *ngFor=\"let opt of conditionalFilter; let i = index\" class=\"row\">\n              <!-- SELECT (operaion) -->\n              <div class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select feature</mat-label>\n                  <mat-select [(ngModel)]=\"opt.featureName\" (selectionChange)=\"onFeatureChange($event.value, i)\">\n                    <mat-option value=\"none\">None</mat-option>\n                    <mat-option *ngFor=\"let feature of cFeatureList\" [value]=\"feature.colName\">{{\n                      feature.colName }}</mat-option>\n                  </mat-select>\n                  <mat-hint *ngIf=\"project.type !== 'clustering'\">Note: Please select a target first.</mat-hint>\n                </mat-form-field>\n              </div>\n              <!-- SELECT (method) -->\n              <div class=\"col-md-3\" *ngIf=\"opt.featureName\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select method</mat-label>\n                  <mat-select [(ngModel)]=\"opt.method\">\n                    <mat-option *ngFor=\"let method of method[i]\" [value]=\"method.value\">{{\n                      method.name\n                      }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n              <!-- SELECT (value) -->\n              <div *ngIf=\"opt.featureName && featureMethod[i].dataType != 'Categorical' && featureMethod[i].dataType != 'Datetime'\" class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select value</mat-label>\n                  <input matInput type=\"number\" [(ngModel)]=\"opt.value\" placeholder=\"Enter value\" autocomplete />\n                </mat-form-field>\n              </div>\n              <div *ngIf=\"opt.featureName && featureMethod[i].dataType == 'Datetime'\" class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select value</mat-label>\n                  <input matInput type=\"date\" [(ngModel)]=\"opt.value\" placeholder=\"Enter value\" autocomplete />\n                </mat-form-field>\n              </div>\n              <!-- INPUT (value) -->\n              <div *ngIf=\"opt.featureName && featureMethod[i].dataType === 'Categorical'\" class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select value</mat-label>\n                  <mat-select [(ngModel)]=\"opt.value\">\n                    <mat-option *ngFor=\"let method of class[i]\" [value]=\"method\">{{\n                      method\n                      }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n              <!-- BUTTON (remove) -->\n              <div *ngIf=\"i > 0\" class=\"col-md-1\">\n                <button class=\"mt-2\" mat-icon-button>\n                  <mat-icon (click)=\"removeFilter(i)\">close</mat-icon>\n                </button>\n              </div>\n            </div>\n            <!-- BUTTON (add) -->\n            <button class=\"add-button\" mat-stroked-button type=\"button\" (click)=\"addFilter()\">\n              <mat-icon class=\"mr-1\">add</mat-icon>Add\n            </button>\n            <!-- BUTTON (preview) -->\n            <button class=\"add-button ml-3\" *ngIf=\"\n                (conditionalFilter[0] && conditionalFilter[0].method) ||\n                conditionalFilter.length > 1\n              \" mat-stroked-button type=\"button\" (click)=\"preview(conditionalPreviewTemplate)\">\n              Preview\n            </button>\n          </div>\n        </mat-tab>\n        <!-- STRING TRANSFORMATION -->\n        <mat-tab label=\"String Transformation\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedEdaAdvanceOptions.includes('stringTransformation')\n          \">\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedEdaAdvanceOptions.includes('stringTransformation') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('stringTransformation')\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedEdaAdvanceOptions.includes('stringTransformation')\n                  ? ''\n                  : 'disable-Btn'\n              \">\n              String Transformation</mat-label>\n          </ng-template>\n          <div class=\"my-3 ml-2\" style=\"overflow: hidden\">\n            <div *ngFor=\"let opt of stringTransformation; let i = index\" class=\"row\">\n              <!-- SELECT (operaion) -->\n              <div class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Select feature</mat-label>\n                  <mat-select [(ngModel)]=\"opt.featureName\" (selectionChange)=\"onStringFeatureChange($event.value)\">\n                    <mat-option value=\"none\">None</mat-option>\n                    <mat-option *ngFor=\"let feature of feature\" [value]=\"feature\">{{\n                      feature\n                      }}</mat-option>\n                  </mat-select>\n                  <mat-hint *ngIf=\"project.type !== 'clustering'\">Note: Please select a target first.</mat-hint>\n                </mat-form-field>\n              </div>\n              <div class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>From value</mat-label>\n                  <input matInput type=\"text\" [(ngModel)]=\"opt.fromText\" placeholder=\"Enter feature value to transform\"\n                    autocomplete />\n                </mat-form-field>\n              </div>\n              <!-- Text input -->\n              <div class=\"col-md-3\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>To value</mat-label>\n                  <input matInput type=\"text\" [(ngModel)]=\"opt.toText\" placeholder=\"Enter the value to transform\"\n                    autocomplete />\n                </mat-form-field>\n              </div>\n              <!-- BUTTON (remove) -->\n              <div *ngIf=\"i > 0\" class=\"col-md-1\">\n                <button class=\"mt-2\" mat-icon-button>\n                  <mat-icon (click)=\"removeItem(i)\">close</mat-icon>\n                </button>\n              </div>\n            </div>\n            <!-- BUTTON (add) -->\n            <button class=\"add-button\" mat-stroked-button type=\"button\" (click)=\"addItem()\">\n              <mat-icon class=\"mr-1\">add</mat-icon>Add\n            </button>\n          </div>\n        </mat-tab>\n        <!-- Resampling -->\n        <mat-tab *ngIf=\"project.type === 'timeseries'\" [disabled]=\"\n              appType === 'saas' &&\n              !user?.roles?.includes('super_admin') &&\n              !user?.roles?.includes('admin') &&\n              !allowedEdaAdvanceOptions.includes('resampling')\n            \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedEdaAdvanceOptions.includes('resampling') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [ngClass]=\"\n                  appType === 'enterprise' ||\n                  (appType === 'saas' &&\n                    (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                  allowedEdaAdvanceOptions.includes('resampling')\n                    ? ''\n                    : 'disable-Btn'\n                \" [matTooltip]=\"_utils.getTootip('resampling')\">Resampling</mat-label>\n          </ng-template>\n          <div class=\"mx-2 my-3\">\n            <!-- SELECT -->\n            <mat-form-field class=\"w-25 mr-4\" appearance=\"outline\">\n              <mat-label>Select resampling frequency</mat-label>\n              <mat-select [(ngModel)]=\"resamplingMethod\" [disabled]=\"!resamplingConstants.length\">\n                <mat-option *ngFor=\"let const of resamplingConstants\" [value]=\"const.value\">\n                  {{ const.desc }}\n                </mat-option>\n              </mat-select>\n              <mat-hint>Note: Please select a date time index first.</mat-hint>\n            </mat-form-field>\n            <!-- SELECT -->\n            <mat-form-field *ngIf=\"resamplingMethod\" class=\"w-25\" appearance=\"outline\">\n              <mat-label>Select method</mat-label>\n              <mat-select [(ngModel)]=\"aggregationFunction\">\n                <mat-option *ngFor=\"let const of methodConstants\" [value]=\"const.value\">\n                  {{ const.desc }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n            <button class=\"add-button ml-3\" mat-stroked-button type=\"button\"\n              *ngIf=\"resamplingMethod && aggregationFunction\" (click)=\"resamplingPreview(resamplingPreviewTemplate)\">\n              Preview\n            </button>\n          </div>\n        </mat-tab>\n        <!-- EDA REPORT -->\n        <!-- <mat-tab label=\"Eda Report\" [matTooltip]=\"_utils.getTootip('edaReport')\">\n          <ng-template mat-tab-label>\n            <mat-label [matTooltip]=\"_utils.getTootip('edaReport')\">EDA Report</mat-label>\n          </ng-template>\n          <div class=\"mt-4 h5\" *ngIf=\"!previousEda\">Please complete EDA and try again.</div>\n          <button class=\"mt-4\" mat-stroked-button *ngIf=\"previousEda\" type=\"button\" (click)=\"openEDAReportModal()\">\n            View EDA report\n          </button>\n        </mat-tab> -->\n        <!-- FEATURE ANALYSIS -->\n        <!-- <mat-tab label=\"Feature Analysis\" [matTooltip]=\"_utils.getTootip('multivariateAnalysis')\">\n          <ng-template mat-tab-label>\n            <mat-label [matTooltip]=\"_utils.getTootip('multivariateAnalysis')\">Feature Analysis</mat-label>\n          </ng-template>\n          <button class=\"mt-4\" mat-stroked-button type=\"button\" (click)=\"openFeatureAnalysisModal()\">\n            Do feature analysis\n          </button>\n        </mat-tab> -->\n      </mat-tab-group>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Heading section (EDA details) -->\n  <mat-card [hidden]=\"!selectedDataSet\" class=\"heading mt-5 p-4\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\" alt=\"EDA\">table_chart</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title\">Details</h3>\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <!-- EDA details (tabs and tables) -->\n      <mat-tab-group dynamicHeight class=\"mt-4\" mat-align-tabs=\"start\">\n        <mat-tab label=\"Summary\" [matTooltip]=\"_utils.getTootip('edaSummary')\">\n          <ng-template mat-tab-label>\n            <mat-label [matTooltip]=\"_utils.getTootip('edaSummary')\">Summary</mat-label>\n          </ng-template>\n          <div class=\"d-flex align-items-baseline justify-content-between\">\n            <!-- Search bar -->\n            <mat-form-field class=\"search-input mt-3\">\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event, 'edaSummary')\" #input />\n            </mat-form-field>\n            <p *ngIf=\"previousEda\" class=\"advance-options clickable\" (click)=\"downloadEdaSummary()\">\n              Corrected Dataset<mat-icon class=\"align-middle ml-2\">file_download</mat-icon>\n            </p>\n          </div>\n          <div class=\"mt-2 mx-2\" style=\"overflow: auto !important\">\n            <table #edaSort=\"matSort\" mat-table [dataSource]=\"edaDataSource\" matSort matSortActive=\"colName\"\n              matSortDirection=\"asc\" matSortDisableClear>\n              <ng-container [matColumnDef]=\"col\" [sticky]=\"col === 'colName'\" *ngFor=\"let col of edaDisplayedColumns\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                  {{ generateProperColNames(col) }}\n                </th>\n                <!-- Dynamic columns (except dropdowns) -->\n                <ng-container *ngIf=\"\n                    col !== 'dataType' &&\n                    col !== 'colName' &&\n                    col !== 'imputationStrategy' &&\n                    col !== 'outlierDetectionStrategy' &&\n                    col !== 'outlierCorrectionStrategy'\n                  \">\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{ element[col] | edaValueFormatter }}\n                  </td>\n                </ng-container>\n\n                <!-- FEATURE NAME column -->\n                <ng-container *ngIf=\"col == 'colName'\">\n                  <td mat-cell *matCellDef=\"let element\" [ngClass]=\"getCustomStyle(element)\"\n                    [matTooltip]=\"getTooltip(element)\">\n                    {{ element[col] }} <br>\n                    <a *ngIf=\"element.dataType =='Datetime'\"\n                      (click)=\"openDateFormatModal(openDateFormatTemplate, element)\" role=\"button\"><small\n                        [matTooltip]=\"_utils.getTootip('changeDateFormat')\">Change date\n                        format</small></a>\n                  </td>\n                </ng-container>\n\n                <!-- VAR TYPE column (dropdown) -->\n                <ng-container *ngIf=\"col == 'dataType'\">\n                  <td mat-cell *matCellDef=\"let element; let i = index; let last = last\">\n                    <mat-form-field class=\"custom-dropdown\" appearance=\"outline\">\n                      <mat-label>Select var type</mat-label>\n                      <mat-select [(ngModel)]=\"element.customVarType\" (selectionChange)=\"varTypeChanged(element)\"\n                        [matTooltip]=\"\n                          element.dataType === 'Unstructured'\n                            ? _utils.getTootip('unstructuredFeature')\n                            : null\n                        \" [disabled]=\"disableDataType(element)\">\n                        <mat-option *ngFor=\"let type of getCustomVarTypes(element)\" [value]=\"type\">\n                          {{ type }}\n                        </mat-option>\n                      </mat-select>\n                    </mat-form-field>\n                  </td>\n                </ng-container>\n\n                <!-- IMPUTATION STRATEGY column (dropdown) -->\n                <ng-container *ngIf=\"col == 'imputationStrategy'\">\n                  <td mat-cell *matCellDef=\"let element; let i = index\">\n                    <mat-form-field class=\"custom-dropdown\" appearance=\"outline\">\n                      <mat-label>Select strategy</mat-label>\n                      <mat-select [(ngModel)]=\"element.imputationStrategy\"\n                        (selectionChange)=\"imputationStrategyChanged(element)\" [matTooltip]=\"\n                          element.dataType === 'Unstructured'\n                            ? _utils.getTootip('unstructuredFeature')\n                            : null\n                        \" [disabled]=\"element.dataType === 'Unstructured' ? true : false\">\n                        <mat-option *ngFor=\"let type of generateStrategyOptions(element)\" [value]=\"type\">\n                          {{ type }}\n                        </mat-option>\n                      </mat-select>\n                    </mat-form-field>\n                    <!-- Error for empty custom value -->\n                    <p class=\"custom-hint\" *ngIf=\"element.imputationStrategy === 'Custom'||\n                          element.imputationStrategy === 'Spline' ||\n                          element.imputationStrategy === 'Polynomial'\">\n                      <mat-hint>{{ getCustomStrategyError(element) }}</mat-hint>\n                    </p>\n                    <!-- Custom value -->\n                    <mat-chip-list class=\"d-inline-block\" *ngIf=\"\n                        element.imputationCustomValue &&\n                        (element.imputationStrategy === 'Custom' ||\n                          element.imputationStrategy === 'Spline' ||\n                          element.imputationStrategy === 'Polynomial')\n                      \">\n                      <mat-chip class=\"custom-chip\" (click)=\"imputationStrategyChanged(element)\">Custom value : {{\n                        element.imputationCustomValue }}</mat-chip>\n                    </mat-chip-list>\n                  </td>\n                </ng-container>\n\n                <!-- OUTLIER DETECTION STRATEGY column (dropdown) -->\n                <ng-container *ngIf=\"col == 'outlierDetectionStrategy'\">\n                  <td mat-cell *matCellDef=\"let element; let i = index\">\n                    <mat-form-field *ngIf=\"element.dataType === 'Integer' || element.dataType === 'Decimal'\"\n                      class=\"outlier-custom-dropdown\" appearance=\"outline\">\n                      <mat-label>Select strategy</mat-label>\n                      <mat-select [matTooltip]=\"\n                          element.dataType === 'Unstructured'\n                            ? _utils.getTootip('unstructuredFeature')\n                            : null\n                        \" [(ngModel)]=\"element.outlierDetectionStrategy\"\n                        (selectionChange)=\"outlierDetectionStrategyChanged(element)\"\n                        [disabled]=\"element.dataType === 'Unstructured' ? true : false\">\n                        <mat-option *ngFor=\"let type of outlierDetectionStrategies\" [value]=\"type\">\n                          {{ type }}\n                        </mat-option>\n                      </mat-select>\n                    </mat-form-field>\n                    <p *ngIf=\"element.dataType !== 'Integer' && element.dataType !== 'Decimal'\">\n                      Supported for numeric feature only.\n                    </p>\n                  </td>\n                </ng-container>\n\n                <!-- OUTLIER CORRECTION STRATEGY column (dropdown) -->\n                <ng-container *ngIf=\"col == 'outlierCorrectionStrategy'\">\n                  <td mat-cell *matCellDef=\"let element; let i = index\">\n                    <mat-form-field *ngIf=\"element.dataType === 'Integer' || element.dataType === 'Decimal'\"\n                      class=\"outlier-custom-dropdown\" appearance=\"outline\">\n                      <mat-label>Select strategy</mat-label>\n                      <mat-select [matTooltip]=\"\n                          element.dataType === 'Unstructured'\n                            ? _utils.getTootip('unstructuredFeature')\n                            : null\n                        \" [(ngModel)]=\"element.outlierCorrectionStrategy\"\n                        (selectionChange)=\"outlierCorrectionStrategyChanged(element)\"\n                        [disabled]=\"element.dataType === 'Unstructured' ? true : false\">\n                        <mat-option *ngFor=\"let type of getOutlierCorrectionStrategies(element)\" [value]=\"type\">\n                          {{ type }}\n                        </mat-option>\n                      </mat-select>\n                    </mat-form-field>\n                    <!-- Error for empty custom value -->\n                    <p class=\"custom-hint\" *ngIf=\"element.outlierCorrectionStrategy === 'Custom'\">\n                      <mat-hint>{{ getCustomOutlierError(element) }}</mat-hint>\n                    </p>\n                    <!-- Custom value -->\n                    <mat-chip-list class=\"d-inline-block\" *ngIf=\"\n                        element.ocsCustomValue && element.outlierCorrectionStrategy === 'Custom'\n                      \">\n                      <mat-chip class=\"custom-chip\" (click)=\"outlierCorrectionStrategyChanged(element)\">Custom value :\n                        {{ element.ocsCustomValue }}</mat-chip>\n                    </mat-chip-list>\n                    <p *ngIf=\"element.dataType !== 'Integer' && element.dataType !== 'Decimal'\">\n                      Supported for numeric feature only.\n                    </p>\n                  </td>\n                </ng-container>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"edaDisplayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: edaDisplayedColumns\"></tr>\n\n              <!-- Row shown when there is no matching data -->\n              <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell\" colspan=\"4\">\n                  No data matching the filter \"{{ input.value }}\"\n                </td>\n              </tr>\n            </table>\n          </div>\n          <mat-paginator class=\"mt-2 mx-2\" #edaPaginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n          <!-- Paginator -->\n        </mat-tab>\n        <mat-tab *ngIf=\"previousEda && previousEda.correctedData !== null\" label=\"Imputation preview\" [matTooltip]=\"_utils.getTootip('imputationPreview')\">\n          <ng-template mat-tab-label>\n            <mat-label [matTooltip]=\"_utils.getTootip('imputationPreview')\">Imputation preview</mat-label>\n          </ng-template>\n          <div class=\"d-flex align-items-baseline justify-content-between\">\n            <!-- Search bar -->\n            <mat-form-field class=\"search-input mt-3\">\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event, 'imputation')\" #input />\n            </mat-form-field>\n            <p>Note: Preview of first 5 records only</p>\n            <p *ngIf=\"previousEda\" class=\"advance-options clickable\" (click)=\"downloadImputedDataset()\">\n              Imputed Dataset<mat-icon class=\"align-middle ml-2\">file_download</mat-icon>\n            </p>\n          </div>\n          <div class=\"mt-2 mx-2\" style=\"overflow: auto !important\">\n            <table #edaPreviewSort=\"matSort\" mat-table [dataSource]=\"edaPreviewDataSource\" matSort matSortDisableClear>\n              <!-- Dynamic columns -->\n              <ng-container [matColumnDef]=\"col\" *ngFor=\"let col of edaPreviewColumns\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                  {{ col }}\n                </th>\n                <td mat-cell *matCellDef=\"let element\">{{ element[col] }}</td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"edaPreviewColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: edaPreviewColumns\"></tr>\n\n              <!-- Row shown when there is no matching data -->\n              <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n                  No data matching the filter \"{{ input.value }}\"\n                </td>\n                <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">\n                  No data available in table\n                </td>\n              </tr>\n            </table>\n          </div>\n          <!-- Paginator -->\n          <!-- <mat-paginator class=\"mt-2 mx-2\" #edaPreviewPaginator [pageSizeOptions]=\"pageSizeOptions\">\n          </mat-paginator> -->\n        </mat-tab>\n        <mat-tab *ngIf=\"previousEda?.outlierPreviewFilepath\" label=\"Outlier preview\"\n          [matTooltip]=\"_utils.getTootip('outlierPreview')\">\n          <ng-template mat-tab-label>\n            <mat-label [matTooltip]=\"_utils.getTootip('outlierPreview')\">Outlier preview</mat-label>\n          </ng-template>\n          <div class=\"d-flex align-items-baseline justify-content-between\">\n            <!-- Search bar -->\n            <mat-form-field class=\"search-input mt-3\">\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event, 'outlier')\" #input />\n            </mat-form-field>\n            <p>Note: Preview of first 5 records only</p>\n            <p class=\"advance-options clickable\" (click)=\"downloadOutlierPreview()\">\n              Outlier Preview<mat-icon class=\"align-middle ml-2\">file_download</mat-icon>\n            </p>\n          </div>\n          <div class=\"mt-2 mx-2\" style=\"overflow: auto !important\">\n            <table #edaOutlierSort=\"matSort\" mat-table [dataSource]=\"edaOutlierDataSource\" matSort matSortDisableClear>\n              <!-- Dynamic columns -->\n              <ng-container [matColumnDef]=\"col\" *ngFor=\"let col of edaOutlierColumns\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>\n                  {{ col }}\n                </th>\n                <td mat-cell *matCellDef=\"let element\">{{ element[col] }}</td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"edaOutlierColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: edaOutlierColumns\"></tr>\n\n              <!-- Row shown when there is no matching data -->\n              <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n                  No data matching the filter \"{{ input.value }}\"\n                </td>\n                <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">\n                  No data available in table\n                </td>\n              </tr>\n            </table>\n          </div>\n          <!-- Paginator -->\n          <!-- <mat-paginator class=\"mt-2 mx-2\" #edaOutlierPaginator [pageSizeOptions]=\"pageSizeOptions\">\n          </mat-paginator> -->\n        </mat-tab>\n      </mat-tab-group>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Sticky button (start EDA) -->\n  <div *ngIf=\"selectedDataSet && showEdaButton != false\" class=\"sticky-button\">\n    <button mat-raised-button class=\"btn-primary start-eda-btn\" type=\"submit\" (click)=\"startEda()\"\n      [disabled]=\"edaForm.invalid || hideEdaButton\">\n      <mat-icon>insights</mat-icon> Start EDA\n    </button>\n  </div>\n</div>\n\n<!-- EDA progress dialog template -->\n<ng-template #edaProgressTemp class=\"dialogHeight\">\n  <h2 mat-dialog-title>EDA Stages</h2>\n  <hr />\n  <mat-dialog-content class=\"mat-typography\">\n    <mat-list>\n      <mat-list-item *ngFor=\"let stage of edaStages\">\n        <mat-icon mat-list-icon style=\"color: green\">task_alt</mat-icon>\n        <div mat-line>{{ stage.stageTitle }}</div>\n      </mat-list-item>\n    </mat-list>\n  </mat-dialog-content>\n  <hr />\n  <p class=\"h4 mt-4 text-center\" *ngIf=\"edaCompleted\">\n    EDA duration: {{ previousEda.edaDuration | number: '1.0-2' }} sec\n  </p>\n  <mat-dialog-actions class=\"justify-content-center m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\" *ngIf=\"edaCompleted == false\">\n      Close\n    </button>\n    <button mat-flat-button mat-dialog-close class=\"btn-primary\" *ngIf=\"edaCompleted == true\">\n      Continue\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!-- Custom strategy input popup template -->\n<ng-template #edaTableInputTemp let-data>\n  <h1 mat-dialog-title>\n    {{ getDialogHeading(selectedOption) }}\n    {{data}}\n  </h1>\n  <mat-dialog-content>\n    <mat-form-field>\n      <mat-label>{{\n        selectedOption.imputationStrategy === 'Custom' ||\n        selectedOption.outlierCorrectionStrategy === 'Custom'\n        ? 'Enter custom value'\n        : 'Enter order value'\n        }}</mat-label>\n      <div *ngIf=\"showNumberInput\">\n        <input [formControl]=\"customStrategyControl\" *ngIf=\"selectedOption.imputationStrategy === 'Custom'\" matInput\n          type=\"number\" />\n        <input matInput [formControl]=\"polynomialOrderControl\"\n          *ngIf=\"selectedOption.imputationStrategy === 'Polynomial'\" type=\"number\" />\n        <input *ngIf=\"selectedOption.imputationStrategy === 'Spline'\" matInput [formControl]=\"splineOrderControl\"\n          type=\"number\" />\n      </div>\n      <div *ngIf=\"\n          showTextInput &&\n          (selectedOption.imputationStrategy === 'Custom' ||\n            selectedOption.outlierCorrectionStrategy === 'Custom')\n        \">\n        <input matInput *ngIf=\"!isOutlierCustom\" [formControl]=\"customStrategyControl\" type=\"text\" />\n        <input matInput *ngIf=\"isOutlierCustom\" [formControl]=\"customCorrectionControl\" type=\"text\" />\n      </div>\n      <input matInput [hidden]=\"true\">\n    </mat-form-field>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button (click)=\"closeCustomDialog(selectedOption, data)\">Cancel</button>\n    <button mat-flat-button type=\"submit\" (click)=\"submitCustomStrategies(selectedOption)\" class=\"btn-primary\"\n      cdkFocusInitial>\n      Submit\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<ng-template #conditionalPreviewTemplate>\n  <h2 mat-dialog-title>Preview</h2>\n  <mat-dialog-content class=\"mat-typography preview-data-section mb-3\">\n    <!-- <mat-form-field class=\"search-input\">\n      <mat-label>Search</mat-label>\n      <input matInput (keyup)=\"applyFilter($event, 'conditionalPreview')\" #input />\n    </mat-form-field> -->\n    <div class=\"col-md-12 text-danger\" *ngIf=\"conditionalrow < 200\">\n      Note : It is recommended to have more number of data points for model creation\n    </div>\n    <table class=\"table mt-2\">\n      <thead>\n        <tr>\n          <th>Rows</th>\n          <th>Columns</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{{ conditionalrow }}</td>\n          <td>{{ conditionalColumn }}</td>\n        </tr>\n      </tbody>\n    </table>\n    <mat-divider></mat-divider>\n    <ag-grid-angular #agGrid id=\"myGrid\" *ngIf=\"previewrowData\" class=\"ag-angle my-4\" [rowData]=\"previewrowData\"\n      [gridOptions]=\"gridOptions\" (gridReady)=\"gridReady($event, 'conditional')\">\n    </ag-grid-angular>\n    <!-- Paginator -->\n    <!-- <mat-paginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator> -->\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n  </mat-dialog-actions>\n</ng-template>\n\n<ng-template #openDateFormatTemplate let-data>\n  <h2 mat-dialog-title>Change Date format</h2>\n  <mat-dialog-content class=\"mat-typography preview-data-section mb-3\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Select a Date format</mat-label>\n      <mat-select [(ngModel)]=\"selectedOption.dateFormat\" required>\n        <mat-option *ngFor=\"let item of dateFormat\" [value]=\"item.value\">\n          {{ item.date }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n    <button mat-flat-button type=\"submit\" (click)=\"verifyDateFormat(selectedOption)\" class=\"btn-primary\"\n      cdkFocusInitial>\n      Submit\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<ng-template #resamplingPreviewTemplate>\n  <h2 mat-dialog-title>Preview</h2>\n  <mat-dialog-content class=\"mat-typography preview-data-section mb-3\">\n    <!-- <mat-form-field class=\"search-input\">\n      <mat-label>Search</mat-label>\n      <input matInput (keyup)=\"applyFilter($event, 'conditionalPreview')\" #input />\n    </mat-form-field> -->\n    <table class=\"table mt-2\">\n      <thead>\n        <tr>\n          <th>Rows</th>\n          <th>Columns</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{{ resampledRow }}</td>\n          <td>{{ resampledColumn }}</td>\n        </tr>\n      </tbody>\n    </table>\n    <mat-divider></mat-divider>\n    <ag-grid-angular #agGrid id=\"myGrid\" *ngIf=\"resamplepreviewrowData\" class=\"ag-angle my-4\"\n      [rowData]=\"resamplepreviewrowData\" [gridOptions]=\"gridOptions\" (gridReady)=\"gridReady($event,'resampling')\">\n    </ag-grid-angular>\n    <!-- Paginator -->\n    <!-- <mat-paginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator> -->\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n  </mat-dialog-actions>\n</ng-template>","import { HttpErrorResponse } from '@angular/common/http';\nimport { TextAnalysisService } from './../text-analysis/text-analysis.service';\nimport { EdaService } from './eda.service';\nimport { DialogHandlerComponent } from './dialog-handler/dialog-handler.component';\nimport { DataService } from './../data/data.service';\nimport {\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  ChangeDetectorRef,\n  Inject,\n} from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { EdaReportComponent } from 'src/app/shared/components/eda-report/eda-report.component';\nimport { Router } from '@angular/router';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { environment } from 'src/environments/environment';\nimport { TrainingService } from '../training/training.service';\nimport { GridOptions } from 'ag-grid-community';\nimport { MatSlider } from '@angular/material/slider';\nimport {\n  FREQUENCIES,\n  METHOD_CONSTANTS,\n  NLP_FEATURE_COUNTS,\n  NLP_LANGUAGES,\n  RESAMPLING_CONSTANTS,\n} from 'src/assets/data/timeseries-nlp';\nconst Plotly = require('plotly.js-dist');\nconst EDA_COLUMNS: Array<string> = [\n  'colName',\n  'dataType',\n  'imputationStrategy',\n  'frequency',\n  'missing',\n  'unique',\n  'max',\n  'median',\n  'min',\n  'std',\n  'mean',\n  'outlierDetectionStrategy',\n  'outlierCorrectionStrategy',\n  'outlierCount',\n];\n@Component({\n  selector: 'app-eda',\n  templateUrl: './eda.component.html',\n  styleUrls: ['./eda.component.scss'],\n})\nexport class EdaComponent implements OnInit {\n  /** Data-table settings */\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild('edaPaginator') edaPaginator: MatPaginator;\n  @ViewChild('edaPreviewPaginator') edaPreviewPaginator: MatPaginator;\n  @ViewChild('edaOutlierPaginator') edaOutlierPaginator: MatPaginator;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('edaSort') edaSort: MatSort;\n  @ViewChild('edaPreviewSort') edaPreviewSort: MatSort;\n  @ViewChild('edaOutlierSort') edaOutlierSort: MatSort;\n\n  @ViewChild('edaTableInputTemp') edaTableInputTemp: TemplateRef<any>;\n  @ViewChild('edaProgressTemp') edaProgressTemp: TemplateRef<any>;\n\n  @ViewChild('trainSlider', { static: false }) trainSlider: MatSlider;\n  @ViewChild('testSlider', { static: false }) testSlider: MatSlider;\n\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  edaDataSource: MatTableDataSource<[]>;\n  edaPreviewDataSource: MatTableDataSource<[]>;\n  edaOutlierDataSource: MatTableDataSource<[]>;\n  conditionalRes;\n  displayedColumns: Array<string> = [];\n  edaDisplayedColumns: Array<string> = [];\n  edaPreviewColumns: Array<string> = [];\n  edaOutlierColumns: Array<any> = [];\n  targetList: any;\n  dialogRef: MatDialogRef<any>;\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  targetFeature: any;\n  /** Progress spinner settings */\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n  exportProjectDiameter = 50;\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Form group variables */\n  edaForm: FormGroup;\n  imputationFeatureForm: FormGroup;\n  method: any = [];\n  class: any = [];\n  featureMethod: any = [];\n  /** Form controls intializations */\n  customStrategyControl = new FormControl('', Validators.required);\n  polynomialOrderControl = new FormControl('', Validators.required);\n  splineOrderControl = new FormControl('', Validators.required);\n  customCorrectionControl = new FormControl('', Validators.required);\n  targetControl = new FormControl('', Validators.required);\n  timeseriesIds = new FormControl('', Validators.required);\n  holdoutFilename = new FormControl('', Validators.required);\n  trainDataset: boolean = true;\n  devDataset: boolean = false;\n  testDataset: boolean = true;\n  taFeatureConfig: any = [];\n  showEdaButton: boolean = true;\n  timeseriesGroupList: any = [];\n  dateFormat = [\n    {\n      date: '%d-%m-%Y (Eg. 01-02-2022)',\n      value: '%d-%m-%Y',\n    },\n    {\n      date: '%Y-%d-%m (Eg. 2022-01-02)',\n      value: '%Y-%d-%m',\n    },\n    {\n      date: '%Y-%m-%d (Eg. 2022-02-01)',\n      value: '%Y-%m-%d',\n    },\n    {\n      date: '%m-%d-%Y (Eg. 02-01-2022)',\n      value: '%m-%d-%Y',\n    },\n    {\n      date: '%d-%m-%y (Eg. 01-02-2022)',\n      value: '%d-%m-%y',\n    },\n    {\n      date: '%y-%d-%m (Eg. 2022-01-02)',\n      value: '%y-%d-%m',\n    },\n    {\n      date: '%y-%m-%d (Eg. 2022-02-01)',\n      value: '%y-%m-%d',\n    },\n    {\n      date: '%m-%d-%y (Eg. 02-01-2022)',\n      value: '%m-%d-%y',\n    },\n  ];\n  /** List of eda stages */\n  eda_stages: Array<object> = [\n    {\n      stageTitle: 'Calculating missing values',\n      status: false,\n      stage: 0,\n    },\n    {\n      stageTitle: 'Calculating statistical details',\n      status: false,\n      stage: 0,\n    },\n    {\n      stageTitle: 'Implementing strategies for missing values',\n      status: false,\n      stage: 0,\n    },\n    {\n      stageTitle: 'Handling outliers',\n      status: false,\n      stage: 0,\n    },\n    {\n      stageTitle: 'Generating EDA summary',\n      status: false,\n      stage: 0,\n    },\n    {\n      stageTitle: 'Finalizing EDA...',\n      status: false,\n      stage: 0,\n    },\n  ];\n\n  Numeric = [\n    {\n      name: 'Equal To',\n      value: 'equalTo',\n    },\n    {\n      name: 'Greater Than',\n      value: 'greaterThan',\n    },\n    {\n      name: 'Less Than',\n      value: 'lessThan',\n    },\n    {\n      name: 'Greater Than Equal',\n      value: 'greaterThanEqual',\n    },\n    {\n      name: 'Less Than Equal',\n      value: 'lessThanEqual',\n    },\n    {\n      name: 'Remove Number',\n      value: 'removeNumber',\n    },\n  ];\n\n  DateTime = [\n    {\n      name: 'Date Equal To',\n      value: 'dateEqualTo',\n    },\n    {\n      name: 'Date Greater Than Equal',\n      value: 'dateGreaterThanEqual',\n    },\n    {\n      name: 'Date Less Than Equal',\n      value: 'dateLessThanEqual',\n    },\n    {\n      name: 'Date Greater Than',\n      value: 'dateGreaterThan',\n    },\n    {\n      name: 'Date Less Than',\n      value: 'dateLessThan',\n    },\n  ];\n\n  Text = [\n    {\n      name: 'Remove Text',\n      value: 'removeText',\n    },\n  ];\n\n  Categorical = [\n    {\n      name: 'Equal Class',\n      value: 'equalClass',\n    },\n    {\n      name: 'Remove Class',\n      value: 'removeClass',\n    },\n  ];\n  outlierDetectionStrategies: Array<string> = ['Z-score', 'Inter-Quartile Range', 'Factor Method'];\n  outlierCorrectionStrategies: Array<string> = [\n    'Ignore outlier',\n    'Lower bound',\n    'Upper bound',\n    'Mean',\n    'Median',\n    'Custom',\n    'Delete data',\n  ];\n\n  showAdvanceOptions: boolean = false;\n  showTargetOptions: boolean = false;\n  trainSize: number = 0;\n  devSize: number = 0;\n  holdoutSize: number = 0;\n  project: any;\n  dataSetsList: Array<any> = [];\n  selectedDataSet: any;\n  edaData: any;\n  imputationFeatures: Array<any> = [];\n  numericFeatures: Array<any> = [];\n  finalFeatureList: Array<any> = [];\n  feature: Array<any> = [];\n  stringTransformation: Array<any> = [{ featureName: '', fromText: '', toText: '' }];\n  conditionalFilter: Array<any> = [{ featureName: '', method: '', value: [] }];\n  originalObject: any;\n  edaMode: string = null;\n  featureDataTypes: Array<any> = [];\n  multiUniFeatures: Array<any> = [];\n  allFeatures: Array<any> = [];\n  missingThreshold: number = 50;\n  showSpinner: boolean = false;\n  edaStages: Array<any> = [];\n  isEdaStarted: boolean = false;\n  edaCompleted: boolean = false;\n  tooltip: string;\n  customStyle: string;\n  showNumberInput: boolean = false;\n  showTextInput: boolean = false;\n  customEdaStrategyObject: Object = {};\n  customCorrectionStrategyObject: Object = {};\n  isOutlierCustom: boolean = false;\n  showError: boolean = false;\n  hideEdaButton: boolean = false;\n  polynomialOrderObject: Object = {};\n  splineOrderObject: Object = {};\n  selectedOption: any;\n  inputDialogRef: MatDialogRef<any>;\n  dateDialogRef: MatDialogRef<any>;\n  snackBarRef: MatSnackBarRef<any>;\n  user: any;\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  conditionalFeatureList: any;\n  cFeatureList: any;\n  conditionalrow: any;\n  conditionalColumn: any;\n  resampledColumn: any;\n  resampledRow: any;\n  algoType: any;\n  isMultilabel: any;\n  classNames: any;\n  previousEda: any;\n  stringFeature: any;\n  // restriction variables\n  allowedEdaAdvanceOptions: Array<any> = null;\n  appType: string = environment.appType;\n  gridOptions: GridOptions;\n  resamplegridOptions: GridOptions;\n  resizeEvent = 'resize.ag-grid';\n  private gridApi;\n  gridColumnApi: any;\n  previewrowData: any;\n  resamplepreviewrowData: any;\n  splitDateWise: boolean = false;\n  SplitDatasetFeature: any;\n  splitDateFeaturesList: any;\n  selectedIndex: any;\n  resamplingMethod: string;\n  methodConstants = METHOD_CONSTANTS;\n  resamplingConstants = [];\n  aggregationFunction: string;\n  isMultipleTimeseries: any;\n  multipleTimeseriesId: any;\n  resampleError: boolean = false;\n  constructor(\n    private _fb: FormBuilder,\n    private _spinner: SpinnerService,\n    private _localStorage: LocalStorageService,\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _dialog: MatDialog,\n    private _eda: EdaService,\n    private _router: Router,\n    private _socket: SocketIoService,\n    private _snackBar: MatSnackBar,\n    private _window: Window,\n    public _utils: UtilsService,\n    private _training: TrainingService,\n    private _textAnalysis: TextAnalysisService,\n    private _cd: ChangeDetectorRef\n  ) {\n    this.dataSource = new MatTableDataSource();\n    this.edaDataSource = new MatTableDataSource();\n    this.edaPreviewDataSource = new MatTableDataSource();\n    this.edaOutlierDataSource = new MatTableDataSource();\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    // setting the allowed advance options to the array.\n\n    this.allowedEdaAdvanceOptions = this.user?.psFeatures?.allowedFeaturesList || [];\n    this.edaForm = this._fb.group({\n      selectedDataset: ['', Validators.required],\n      datetimeIndex: ['', this.project.type === 'timeseries' ? Validators.required : ''],\n    });\n    this.imputationFeatureForm = this._fb.group({\n      imputationFeatureControl: ['', Validators.nullValidator],\n      featuresToImputeControl: ['', Validators.nullValidator],\n    });\n    if (this.project.type == 'predictive_modeling') {\n      this.trainSize = 70;\n      this.devSize = 0;\n      this.holdoutSize = 30;\n    } else if (this.project.type == 'timeseries') {\n      this.trainSize = 80;\n      this.holdoutSize = 20;\n    }\n  }\n\n  /**\n   * Initializes all the required data for this page\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.initSocket();\n    this.getAllFiles();\n    this.splitDateWise = false;\n    this.edaDisplayedColumns = this.generateEdaColums();\n    // this.previousEdaDetails('fromNgInit');\n  }\n\n  /**\n   * Fetches all the files\n   * @param projectId\n   */\n  getAllFiles(): void {\n    this._data\n      .getAllProjectDatas(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            if (res[0].filesList.length) {\n              // this.dataSetsList = res[0].filesList;\n              this.dataSetsList = res[0].filesList.filter(\n                (item) => item.fileSource != 'upload_retrained'\n              );\n              console.log('🚀 ~ this.dataSetsList ---->', this.dataSetsList);\n              this.previousEdaDetails('fromNgInit');\n            }\n          } else {\n            this._toaster.error('Cannot fetch files list', 'EDA');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'EDA');\n        }\n      );\n  }\n\n  /**\n   * Starts the EDA execution process\n   * @returns\n   */\n  startEda(type?: string): any {\n    this.edaCompleted = false;\n    if (type == 'snackbarcall') {\n      this.showEdaButton = true;\n    }\n    this.snackBarRef ? this.snackBarRef.dismiss() : '';\n    let isEdaFormValid: boolean;\n    isEdaFormValid = this.validateEdaForm();\n    if (!isEdaFormValid) {\n      let edaParams: any;\n      this._spinner.showSpinner();\n      this.initEdaStages();\n      this.isEdaStarted = true;\n      this.showEdaProgress();\n      // API data parsing structure\n      let reqObj: any = {\n        edaMode: this.edaMode,\n        strategies: this.finalFeatureList,\n        missingThreshold: this.missingThreshold,\n        pId: this.project._id,\n        isMultilabel: this.isMultilabel,\n        fileId: this.selectedDataSet._id,\n        dataSetInfo: {\n          trainSize: this.trainSize,\n          devSize: this.devSize || null,\n          holdoutSize: this.holdoutSize || null,\n          holdoutFilename: this.holdoutFilename.value || 'none',\n        },\n        customEdaStrategy: this.customEdaStrategyObject,\n        customCorrectionStrategy: this.customCorrectionStrategyObject,\n        imputationFeature: this.imputationFeatureForm.get('imputationFeatureControl').value.length\n          ? this.imputationFeatureForm.get('imputationFeatureControl').value[0]\n          : null,\n        featuresToImpute: this.imputationFeatureForm.get('featuresToImputeControl').value || null,\n        afterEdaDataFilePath: this.edaData?.afterEdaDataFilePath || null,\n        filePath: this.selectedDataSet.name,\n        fileEncoding: this.selectedDataSet.fileEncoding || 'utf_8',\n        parentPipelineFilename: this.selectedDataSet.tasks[0].currentPipelineFilename || null,\n        parentFileId: this.selectedDataSet._id,\n        usingGPU: this.project.useGPU || false,\n        edaConditionalFiltering: this.conditionalFilter,\n        stringTransformation: this.stringTransformation,\n      };\n      if (this.project.type == 'predictive_modeling') {\n        reqObj.classNames = this.classNames;\n        reqObj.algoType = this.algoType;\n      } else if (this.project.type == 'clustering') {\n        reqObj.algoType = 'clustering';\n      }\n      if (this.project.type !== 'clustering') {\n        reqObj.depVariable = this.targetControl.value.colName || null;\n      }\n      reqObj.dataSetInfo.trainSize = this.trainDataset === true ? this.trainSize : null;\n      reqObj.dataSetInfo.devSize = this.devDataset === true ? this.devSize : null;\n      reqObj.dataSetInfo.holdoutSize = this.testDataset === true ? this.holdoutSize : null;\n      reqObj.dataSetInfo.splitDateWise = this.splitDateWise;\n      reqObj.dataSetInfo.SplitDatasetFeature = this.SplitDatasetFeature;\n      reqObj.isMultipleTimeseries = this.multipleTimeseriesId;\n      reqObj.timeseriesIds =\n        this.multipleTimeseriesId === 'True' ? this.timeseriesIds.value : 'none';\n      edaParams = reqObj;\n      if (\n        this.stringTransformation[0].featureName == '' ||\n        this.stringTransformation[0].fromText == '' ||\n        this.stringTransformation[0].toText == ''\n      ) {\n        delete edaParams.stringTransformation;\n      } else {\n        let newFeatureTransform = this.stringTransformation.filter((temp: any) => {\n          if (temp.featureName != '' && temp.fromText !== '' && temp.toText !== '') {\n            return temp;\n          }\n        });\n        edaParams.stringTransformation = newFeatureTransform;\n      }\n      if (\n        this.conditionalFilter[0].featureName == '' ||\n        this.conditionalFilter[0].method == '' ||\n        this.conditionalFilter[0].value === ''\n      ) {\n        delete edaParams['edaConditionalFiltering'];\n        this.featureMethod = [];\n        this.conditionalFilter = [{ featureName: '', method: '', value: [] }];\n      } else {\n        this.conditionalFilter = this.conditionalFilter.filter(function (temp) {\n          if (temp.featureName != '' && temp.method != '' && temp.value !== '') {\n            if (temp.method == 'equalClass' || temp.method == 'equalClass') {\n              if (temp.value[0] !== '') {\n                return temp;\n              }\n            }\n            return temp;\n          }\n        });\n        let arr = [];\n        this.conditionalFilter.map((item) => {\n          let itemFound = this.featureMethod.find((feature) => {\n            return feature.colName == item.featureName;\n          });\n          if (itemFound) {\n            arr.push(itemFound);\n          }\n        });\n        this.featureMethod = [];\n        this.featureMethod = arr;\n        edaParams.edaConditionalFiltering = this.conditionalFilter;\n      }\n      if (!edaParams.imputationFeature) {\n        edaParams.featuresToImpute = null;\n      }\n      if (this.project.type === 'timeseries') {\n        edaParams.timeseriesInfo = { datetimeIndex: this.edaForm.get('datetimeIndex').value };\n        edaParams.polynomialOrder = this.polynomialOrderObject;\n        edaParams.splineOrder = this.splineOrderObject;\n        edaParams.resampling = {\n          resamplingMethod: this.resamplingMethod,\n          aggregationFunction: this.aggregationFunction,\n        };\n        if (!edaParams.resampling.resamplingMethod) {\n          edaParams.resampling = 'None';\n        }\n        if (edaParams.resampling.resamplingMethod && !edaParams.resampling.aggregationFunction) {\n          edaParams.resampling = 'None';\n        }\n      }\n      // API call to execute EDA\n      this._eda\n        .startEda(this.project._id, edaParams)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this._toaster.info('EDA execution started', 'EDA');\n            } else {\n              this._toaster.error('Cannot start EDA', 'EDA');\n            }\n            this._spinner.stopSpinner();\n          },\n          (err: HttpErrorResponse) => {\n            this.isEdaStarted = false;\n            this._dialog.closeAll();\n            this._spinner.stopSpinner();\n            this._toaster.error(err?.error?.message, 'EDA');\n          }\n        );\n    }\n  }\n\n  /**\n   * Returns true/false if form is valid or not\n   */\n  validateEdaForm(): boolean {\n    let isError: boolean = false;\n    if (this.project.type === 'timeseries') {\n      if (!this.edaForm.get('datetimeIndex').value) {\n        this.snackBarRef = this._snackBar.open('Please select the index.', 'OK', {\n          verticalPosition: 'bottom',\n          horizontalPosition: 'end',\n        });\n        isError = true;\n      }\n      if (!this.targetControl.value) {\n        this.snackBarRef = this._snackBar.open('Please select the target.', 'OK', {\n          verticalPosition: 'bottom',\n          horizontalPosition: 'end',\n        });\n        isError = true;\n      }\n      if (this.multipleTimeseriesId === 'True' && !this.timeseriesIds.value) {\n        this.snackBarRef = this._snackBar.open('Please select the timeseries identifiers.', 'OK', {\n          verticalPosition: 'bottom',\n          horizontalPosition: 'end',\n        });\n        isError = true;\n      }\n      if (this.multipleTimeseriesId === 'True' && !this.timeseriesIds.value.length) {\n        this._snackBar.open('Please select timeseries identifiers.', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n        isError = true;\n      }\n      // if (!this.trainDataset || !this.testDataset) {\n      //   this.snackBarRef = this._snackBar.open(\n      //     'Please select all split dataset advanced options.',\n      //     'Ok',\n      //     {\n      //       verticalPosition: 'bottom',\n      //       horizontalPosition: 'end',\n      //     }\n      //   );\n      //   isError = true;\n      // }\n      if (this.trainSize + this.holdoutSize !== 100) {\n        this.snackBarRef = this._snackBar.open(\n          'Sum of split dataset slider values must be 100%',\n          'OK',\n          {\n            verticalPosition: 'bottom',\n            horizontalPosition: 'end',\n          }\n        );\n        isError = true;\n      }\n    } else if (this.project.type === 'predictive_modeling') {\n      if (!this.targetControl.value) {\n        this.snackBarRef = this._snackBar.open('Please select the target.', 'OK', {\n          verticalPosition: 'bottom',\n          horizontalPosition: 'end',\n        });\n        isError = true;\n      }\n      // if (!this.trainDataset || !this.devDataset) {\n      //   this.snackBarRef = this._snackBar.open(\n      //     'Please select all split dataset advanced options.',\n      //     'Ok',\n      //     {\n      //       verticalPosition: 'bottom',\n      //       horizontalPosition: 'end',\n      //     }\n      //   );\n      //   isError = true;\n      // }\n    }\n    // Validations for split dataset advanced option\n    if (this.project.type !== 'clustering') {\n      if (this.trainSize + this.holdoutSize + this.devSize !== 100) {\n        this.snackBarRef = this._snackBar.open(\n          'Sum of split dataset slider values must be 100%',\n          'OK',\n          {\n            verticalPosition: 'bottom',\n            horizontalPosition: 'end',\n          }\n        );\n        isError = true;\n      }\n      if (this.devDataset && this.devSize <= 0) {\n        this.snackBarRef = this._snackBar.open(\n          'Development dataset value cannot be zero or negative, if selected',\n          'OK'\n        );\n        isError = true;\n      }\n      if (this.holdoutSize === 0) {\n        this.snackBarRef = this._snackBar.open(\n          'Test dataset (hold out) value cannot be zero',\n          'OK'\n        );\n        isError = true;\n      }\n      if (this.splitDateWise === true && this.SplitDatasetFeature === undefined) {\n        this.snackBarRef = this._snackBar.open('Please select date feature to split dataset', 'OK');\n        isError = true;\n      }\n    }\n    return isError;\n  }\n\n  /**\n   * Function to initialize EDA stage\n   */\n  initEdaStages(): void {\n    this.edaStages = [\n      {\n        stageTitle: 'Calculating missing values',\n        status: false,\n      },\n    ];\n  }\n\n  /**\n   * Renders the dialog with sequential EDA progress status\n   */\n  showEdaProgress(): void {\n    this._dialog.open(this.edaProgressTemp, {\n      // height: 'auto',\n      width: '450px',\n      minWidth: '0px',\n    });\n  }\n\n  /**\n   * Fetches the file data and renders in dialog\n   * @param dataId\n   */\n  dataPreviewHandler(dataId: string): void {\n    this.showSpinner = true;\n    let reqObj = {\n      dataId: dataId,\n      pid: this.project._id,\n    };\n    this.openDialog('preview', dataId, reqObj);\n  }\n\n  /**\n   * Opens the EDA report dialog to render the details\n   * @param fileData\n   * @param type\n   */\n  openEDAReportModal(): void {\n    let edaReportData: object = {\n      projectId: this.project._id,\n      edaId: this.edaData._id,\n      currentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      currentEdaId: this.edaData._id,\n    };\n    /** Opens the eda report component modal to render report */\n    this._dialog.open(EdaReportComponent, {\n      // height: 'auto',\n      width: '80%',\n      data: {\n        moduleName: 'eda',\n        edaReportData: edaReportData,\n      },\n    });\n  }\n\n  /**\n   * Calls when the data set is changed\n   * @param dataSetId\n   */\n  async onChangeDataset(dataSetId: string, type?: string): Promise<any> {\n    this._spinner.showSpinner();\n    for (let prop in this.customEdaStrategyObject) {\n      delete this.customEdaStrategyObject[prop];\n    }\n    this.snackBarRef ? this.snackBarRef.dismiss() : '';\n    this.edaPreviewColumns = [];\n    this.edaDataSource.data = [];\n    this.edaDataSource._updateChangeSubscription();\n    this.edaOutlierColumns = [];\n    this.imputationFeatures = [];\n    this.numericFeatures = [];\n    this.feature = [];\n    this.customStrategyControl.reset(this.customStrategyControl.value);\n    this.customCorrectionControl.reset(this.customCorrectionControl.value);\n    if (this.project.type == 'predictive_modeling') {\n      this.devDataset = false;\n      this.trainSize = 70;\n      this.devSize = 0;\n      this.holdoutSize = 30;\n    } else if (this.project.type == 'timeseries') {\n      this.trainSize = 80;\n      this.holdoutSize = 20;\n    }\n    this.resamplingMethod = '';\n    this.aggregationFunction = '';\n    this.conditionalFilter = [{ featureName: '', method: '', value: '' }];\n    this.stringTransformation = [{ featureName: '', fromText: '', toText: '' }];\n    this.timeseriesIds.reset();\n    console.log('🚀 ~ dataSetsList ---->', this.dataSetsList);\n    console.log('🚀 ~ dataSetId ---->', dataSetId);\n    this.selectedDataSet = this.dataSetsList.find((data) => data._id === dataSetId);\n    if (this.project.type === 'timeseries') {\n      this.selectedDataSet.fileSchema.map((item) => {\n        let find = this.selectedDataSet.descriptiveStatistics.filter((element) => {\n          return item.colName === element.colName;\n        });\n        if (find) {\n          item.unidistant_date = find[0].unidistant_date;\n        }\n      });\n    }\n    this.splitDateFeaturesList = this.selectedDataSet.fileSchema.filter(\n      (item) => item.dataType === 'Datetime'\n    );\n    if (type !== 'fc') {\n      this.previousEdaDetails();\n    }\n    this.edaForm.get('selectedDataset').setValue(dataSetId);\n    this.finalFeatureList = this.selectedDataSet.fileSchema;\n    let list = this.finalFeatureList.filter((temp) => {\n      if (temp.dataType === 'Categorical' || temp.dataType === 'Text') {\n        return temp;\n      }\n    });\n    list.forEach((data) => data.dataType !== 'Unstructured' && this.feature.push(data.colName));\n    // Setting default values\n    this.finalFeatureList.map((feature) => {\n      feature.outlierDetectionStrategy = 'Inter-Quartile Range';\n      feature.outlierCorrectionStrategy = 'Ignore outlier';\n      feature.isVarTypeChanged = false;\n      feature.customVarType = feature.dataType;\n      if (feature.dataType === 'Decimal') {\n        feature.imputationStrategy = this.project.type === 'timeseries' ? 'Linear' : 'Mean';\n        this.numericFeatures.push({ numericFeature: feature.colName });\n      } else if (feature.dataType === 'Integer') {\n        feature.imputationStrategy = this.project.type === 'timeseries' ? 'Linear' : 'Median';\n        this.numericFeatures.push({ numericFeature: feature.colName });\n      } else if (feature.dataType === 'Datetime' || feature.dataType === 'Text') {\n        feature.imputationStrategy = 'Delete';\n      } else {\n        feature.imputationStrategy = 'Mode';\n      }\n      if (feature.dataType === 'Categorical' || feature.dataType === 'Boolean') {\n        this.imputationFeatures.push({ imputationFeature: feature.colName });\n      }\n      return feature;\n    });\n    this.finalFeatureList.map((item) => {\n      if (item.dataType === 'Datetime') {\n        item.dateFormat = '';\n      }\n      return item;\n    });\n    this.edaData = await this.getChildDataset(this.selectedDataSet.ProjectId, dataSetId).catch(\n      (e: Error) => {\n        this._toaster.error(`Error - ${e.message}.`, 'Eda');\n      }\n    );\n    if (this.edaData[0].hasOwnProperty('currentEdaId')) {\n      // Get previous eda data\n      this.edaData = this.edaData[0].currentEdaId;\n      if (this.project.type === 'timeseries') {\n        this.edaData.timeseriesInfo\n          ? this.edaForm.get('datetimeIndex').setValue(this.edaData.timeseriesInfo.datetimeIndex)\n          : this.edaForm.get('datetimeIndex').setValue(null);\n      }\n      if (!this.edaData.edaSummary[0].hasOwnProperty('isVarTypeChanged')) {\n        this.edaData.edaSummary.map((item: any) => {\n          item.isVarTypeChanged = false;\n          item.missing = item.hasOwnProperty('missingCount') ? item.missingCount : item.missing;\n          return item;\n        });\n      }\n      this.edaData.edaSummary.forEach(element => {\n        if (element.imputationStrategy === 'Spline') {\n          this.splineOrderControl.setValue(element.splineOrder)\n          element.imputationCustomValue = element.splineOrder;\n\n        }\n        if (element.imputationStrategy === 'Polynomial') {\n          this.polynomialOrderControl.setValue(element.polynomialOrder)\n          element.imputationCustomValue = element.polynomialOrder;\n        }\n      });\n      this.finalFeatureList = this.edaData.edaSummary;\n      this.buildEdaStrategyTable(this.edaData.edaSummary, 'after_eda');\n      this.buildEdaPreviewTable(this.edaData);\n      if (this.edaData.outlierPreviewFilepath) {\n        this.buildOutlierPreviewTable(this.edaData);\n      }\n    } else {\n      this.edaData = [];\n      this.edaMode = 'auto';\n      if (this.project.type === 'timeseries') {\n        this.edaForm.get('datetimeIndex').setValue(null);\n      }\n      this.selectedDataSet.fileSchema = this.finalFeatureList;\n      let finalData = await this.mergeArrays(this.selectedDataSet);\n      this.buildEdaStrategyTable(finalData.fileSchema, 'before_eda');\n    }\n    this.targetFeature = [];\n    this.targetFeature = await this.getTargetList(this.selectedDataSet).catch((e: Error) => {\n      this._toaster.error(`Error - ${e.message}`, 'Eda');\n    });\n    // Filter all the features having unstructured data type\n    this.targetFeature = this.targetFeature.filter((i: any) => i.dataType !== 'Unstructured');\n\n    let taFeaturesToExclude = [];\n    // If taFeatureConfig is present, needs to exclude those features from target list\n    if (this.taFeatureConfig.length) {\n      this.taFeatureConfig.map((item: any) => {\n        taFeaturesToExclude.push(...item.newFeature);\n      });\n      this.targetFeature = this.targetFeature.filter((item: any) => {\n        return !taFeaturesToExclude.includes(item.colName);\n      });\n    }\n    if (this.project.type == 'timeseries') {\n      this.targetFeature = this.targetFeature.filter((item) => {\n        if (item.dataType == 'Integer' || item.dataType == 'Decimal') {\n          return item;\n        }\n      });\n    }\n    // Prefills all EDA data\n    if (this.previousEda) {\n      if (this.previousEda.hasOwnProperty('depVariable')) {\n        let target = this.targetFeature.filter((item) => {\n          if (item.colName == this.previousEda.depVariable) {\n            return item;\n          }\n        });\n        this.splitDateWise = this.previousEda.dataSetInfo.splitDateWise;\n        this.SplitDatasetFeature = this.previousEda.dataSetInfo.SplitDatasetFeature;\n        this.trainSize = this.previousEda.dataSetInfo.trainSize || 70;\n        this.holdoutSize = this.previousEda.dataSetInfo.holdoutSize || 30;\n        if (this.previousEda.dataSetInfo.devSize > 0) {\n          this.devDataset = true;\n          this.devSize = this.previousEda.dataSetInfo.devSize;\n        }\n        this.targetControl.setValue(target[0]);\n        if (this.project.type === 'timeseries') {\n          this.multipleTimeseriesId = await this.isMultiTimeseries(this.selectedDataSet);\n          const frequencyColData = this.selectedDataSet.descriptiveStatistics.find(\n            (val) => val.colName === this.edaForm.get('datetimeIndex').value\n          );\n          // storing the frequency val in the variable for quick refrence.\n          let frequencyVal = String(frequencyColData.frequency.split('(')[0]).replace(' ', '');\n          // finding the index value of the frequency which is computed during eda.\n          const resamplingFrequencyIndexVal = RESAMPLING_CONSTANTS.find(\n            (item) => item.value === frequencyVal\n          )?.index;\n          // filtering the resampling constants based on the frequency index value.\n          if (frequencyVal) {\n            this.resamplingConstants = RESAMPLING_CONSTANTS.filter(\n              (val) => val.index > resamplingFrequencyIndexVal\n            );\n          } else {\n            this.resamplingConstants.length = 0;\n          }\n          if (this.previousEda.timeseriesIds !== null) {\n            this.timeseriesIds.setValue(this.previousEda.timeseriesIds);\n          }\n          if (this.previousEda.resampling !== 'None') {\n            this.resamplingMethod = this.previousEda.resampling?.resamplingMethod;\n            this.aggregationFunction = this.previousEda.resampling?.aggregationFunction;\n          }\n        }\n        this.targetChangeHandler(target[0]).then(async (resp) => {\n          let conditionFeature: any = resp;\n          if (this.previousEda.hasOwnProperty('edaConditionalFiltering')) {\n            let fetaure;\n            this.previousEda.edaConditionalFiltering.forEach((element) => {\n              fetaure = conditionFeature.filter((item) => {\n                if (item.colName == element.featureName) {\n                  return item;\n                }\n              });\n              this.featureMethod.push(fetaure[0]);\n            });\n            for (let i = 0; i < this.previousEda.edaConditionalFiltering.length; i++) {\n              if (\n                this.previousEda.edaConditionalFiltering[i].dataType == 'Integer' ||\n                this.previousEda.edaConditionalFiltering[i].dataType == 'Decimal'\n              ) {\n                this.method[i] = this.Numeric;\n              } else if (this.previousEda.edaConditionalFiltering[i].dataType == 'Datetime') {\n                this.method[i] = this.DateTime;\n              } else if (this.previousEda.edaConditionalFiltering[i].dataType == 'Text') {\n                this.method[i] = this.Text;\n              } else if (this.previousEda.edaConditionalFiltering[i].dataType == 'Categorical') {\n                this.method[i] = this.Categorical;\n                let className = await this.getUniqueClass(\n                  this.previousEda.edaConditionalFiltering[i].featureName\n                ).catch((e: Error) => {\n                  this._toaster.error(`Error - ${e.message}`, 'Eda');\n                });\n                this.class[i] = className.body;\n              }\n            }\n            this.conditionalFilter = this.previousEda.edaConditionalFiltering;\n          }\n          if (\n            this.previousEda.hasOwnProperty('stringTransformation') &&\n            this.previousEda.stringTransformation.length\n          ) {\n            this.stringTransformation = this.previousEda.stringTransformation;\n          }\n          if (this.project.type == 'timeseries' && this.previousEda.isMultipleTimeseries) {\n            this.timeseriesChangeHandler(this.timeseriesIds.value);\n          }\n        });\n\n      }\n    }\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Called when missing threshold changes\n   * @param data\n   */\n  async onThresholdChange(data) {\n    await this.getTargetList();\n  }\n  /**\n   * Called when the target is changed\n   */\n  async targetChangeHandler(target: any): Promise<void> {\n    await this.getTargetDeatils();\n    this._spinner.showSpinner();\n    if (this.multipleTimeseriesId === 'True') {\n      this.timeseriesGroupList = [];\n      this.timeseriesGroupList = this.finalFeatureList.filter((item) => {\n        return (\n          (item.dataType === 'Integer' || item.dataType === 'Boolean' || item.dataType === 'Categorical') &&\n          item.colName !== this.targetControl.value.colName &&\n          item.dataType !== 'Unstructured' &&\n          item.unique > 1\n        );\n      });\n    }\n    this.featureDataTypes = [];\n    this.finalFeatureList.forEach((data) => {\n      let obj = {\n        colName: data.colName,\n        data: data.dataType,\n        multivariateDataType: data.dataType,\n      };\n      this.featureDataTypes.indexOf(obj) === -1 ? this.featureDataTypes.push(obj) : null;\n    });\n    this.conditionalFeatureList = this.finalFeatureList.filter((temp) => {\n      if (\n        (temp.dataType === 'Categorical' ||\n          temp.dataType === 'Text' ||\n          temp.dataType === 'Datetime' ||\n          temp.dataType === 'Decimal' ||\n          temp.dataType === 'Integer') &&\n        temp.colName !== this.targetControl.value?.colName &&\n        temp.colName !== this.edaForm.get('datetimeIndex')?.value &&\n        temp.dataType !== 'Unstructured'\n      ) {\n        return temp;\n      }\n    });\n    this.cFeatureList = this.conditionalFeatureList;\n    // checkThemeColor();\n    let reqObj = {\n      filename: this.selectedDataSet.name,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      selectedVariables: [target.colName],\n      edaSummary: this.selectedDataSet.fileSchema,\n      chartType: 'barplot',\n      featureDataTypes: this.uniqueBy(this.featureDataTypes, 'colName'),\n      datetimeIndex: this.edaForm.value.datetimeIndex || null,\n    };\n    if (this.project.type !== 'timeseries') {\n      delete reqObj['datetimeIndex'];\n    }\n    this._training\n      .plotTargetGraph(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            // this.showLoading = false;\n            let graphDiv: any = document.getElementById('targetPlot');\n            if (graphDiv?.data != null) {\n              while (graphDiv.data && graphDiv.data.length > 0) {\n                Plotly.deleteTraces(graphDiv, [0]);\n              }\n            }\n            res.graphContent.layout.template.layout.plot_bgcolor = 'white';\n            res.graphContent.layout.template.layout.title.xanchor = 'center';\n            res.graphContent.layout.template.layout.title.y = 0.9;\n            res.graphContent.layout.template.layout.title.x = 0.5;\n            res.graphContent.layout.template.layout.title.yanchor = 'top';\n            res.graphContent.layout.xaxis.linecolor = 'black';\n            res.graphContent.layout.width = 600;\n            res.graphContent.layout.height = 400;\n            if (this.project.type !== 'timeseries') {\n              res.graphContent.layout.yaxis.linecolor = 'black';\n            }\n            Plotly.plot(graphDiv, res.graphContent.data, res.graphContent.layout);\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.message, 'EDA');\n        }\n      );\n    return this.conditionalFeatureList;\n  }\n\n  /**\n   * Fetches the target details\n   */\n  async getTargetDeatils(): Promise<void> {\n    let reqObj: any = {\n      afterEdaDataFilePath: this.selectedDataSet.name,\n    };\n    if (this.previousEda) {\n      let dType = this.previousEda.edaSummary.filter((item) => {\n        return item.colName == this.targetControl.value.colName;\n      });\n      reqObj.depVariable = this.targetControl.value.colName;\n      reqObj.dependentFeaturetype = dType[0].dataType;\n    } else {\n      reqObj.depVariable = this.targetControl.value.colName;\n      reqObj.dependentFeaturetype = this.targetControl.value.dataType;\n    }\n    // API call\n    this._training\n      .getTargetDetails(this.selectedDataSet.ProjectId, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          this.classNames = res.targetResponse.classNames;\n          this.isMultilabel = res.targetResponse.isMultilabel;\n          this.algoType = res.targetResponse.algoType.toLowerCase();\n        },\n        (err) => {\n          this._toaster.error('Something went wrong while fetching target details!.', 'EDA');\n        }\n      );\n  }\n\n  /**\n   * Fetched target list\n   */\n  async getTargetList(selectedDataSet?: any): Promise<any> {\n    let textAnalysisDetails: any;\n    this.taFeatureConfig = [];\n    this.targetControl.reset();\n    if (this.project.type == 'predictive_modeling') {\n      this.trainSize = 70;\n      // this.devSize = 20;\n      this.holdoutSize = 30;\n    } else if (this.project.type == 'timeseries') {\n      this.trainSize = 80;\n      this.holdoutSize = 20;\n    }\n    this.holdoutFilename.reset();\n    let reqObj = {\n      projectId: this.project._id,\n      filename: this.selectedDataSet.name,\n      fileSchema: this.selectedDataSet.fileSchema,\n      missingThreshold: this.missingThreshold,\n    };\n    // API call\n    // If experiment id is present for the selected file, fetch the details\n    if (selectedDataSet?.taExperimentId) {\n      textAnalysisDetails = await this.getTextAnalysisDetails(selectedDataSet.taExperimentId).catch(\n        (e: HttpErrorResponse) => {\n          this._toaster.error(e.error.message || 'Cannot fetch text-analysis details', 'EDA');\n        }\n      );\n      this.taFeatureConfig = textAnalysisDetails.taFeatureConfig || [];\n    }\n    // API call\n    return this._eda.getTargetList(reqObj).pipe(takeUntil(this.unsubscribe$)).toPromise();\n  }\n\n  /**\n   *\n   * @param type child dataset\n   */\n  async getChildDataset(projectId, dataSetId): Promise<any> {\n    return this._data\n      .getAllChildDatasets(this.selectedDataSet.ProjectId, dataSetId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * function to get previous eda for a particular file\n   * @param type\n   */\n  previousEdaDetails(type?: string): void {\n    this._eda\n      .getEdaByFileId(this.project._id, this.selectedDataSet ? this.selectedDataSet._id : null)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        async (res) => {\n          if (res) {\n            this.previousEda = [];\n            this.previousEda = res[0];\n            if (res.length && type === 'fromNgInit') {\n              console.log('🚀 ~ this.previousEda.fileId._id --->', this.previousEda.fileId._id);\n              await this.onChangeDataset(this.previousEda.fileId._id, 'fc');\n            }\n          }\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n  /**\n   * Merges the arrays\n   * @param dataSet\n   * @returns\n   */\n  mergeArrays(dataSet: any): any {\n    if (dataSet['descriptiveStatistics'] && dataSet['descriptiveStatistics'].length) {\n      dataSet.fileSchema.forEach((schema: any) => {\n        dataSet.descriptiveStatistics.forEach((ds: any) => {\n          if (ds.colName === schema.colName) {\n            schema['unique'] = ds['unique'];\n            schema['max'] = ds['max'];\n            schema['median'] = ds['median'];\n            schema['min'] = ds['min'];\n            schema['std'] = ds['std'];\n            schema['mean'] = ds['mean'];\n            schema['missing'] = ds['missing'];\n            if (this.project.type === 'timeseries') {\n              schema['frequency'] = ds['frequency'] || 'NA';\n            }\n          }\n        });\n      });\n    } else {\n      dataSet.fileSchema.forEach((schema: any) => {\n        schema['unique'] = '';\n        schema['max'] = '';\n        schema['median'] = '';\n        schema['min'] = '';\n        schema['std'] = '';\n        schema['mean'] = '';\n        schema['missing'] = '';\n        schema['frequency'] = '';\n      });\n    }\n    return dataSet;\n  }\n\n  /**\n   * Builds the EDA table (edaStrategy table)\n   * @param finalFeatureList\n   * @param flow\n   */\n  buildEdaStrategyTable(finalFeatureList: Array<any>, flow: string): void {\n    // this.getAllFiles();\n    this.finalFeatureList = finalFeatureList;\n    this.edaDisplayedColumns = this.generateEdaColums();\n    if (flow === 'after_eda') {\n      // Removes the unwanted columns\n      // let freqIndex = this.edaDisplayedColumns.indexOf('frequency');\n      // if (freqIndex > -1) {\n      //   this.edaDisplayedColumns.splice(freqIndex, 1);\n      // }\n    }\n    if (flow === 'before_eda') {\n      // Removes the unwanted columns\n      let outlierIndex = this.edaDisplayedColumns.indexOf('outlierCount');\n      outlierIndex > -1 ? this.edaDisplayedColumns.splice(outlierIndex, 1) : '';\n      // let freqIndex = this.edaDisplayedColumns.indexOf('frequency');\n      // freqIndex > -1 ? this.edaDisplayedColumns.splice(freqIndex, 1) : '';\n    }\n    if (this.project.type === 'timeseries') {\n      // Removes the unwanted columns\n      let outlierIndex = this.edaDisplayedColumns.indexOf('outlierCount');\n      if (outlierIndex > -1) {\n        this.edaDisplayedColumns.splice(outlierIndex, 1);\n      }\n    }\n    if (this.project.type != 'timeseries') {\n      this.edaDisplayedColumns.splice(this.edaDisplayedColumns.indexOf('frequency'), 1);\n    }\n    // Assigns data to the table\n    this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n    this.edaDataSource.paginator = this.edaPaginator;\n    this.edaDataSource.sort = this.edaSort;\n    this.edaDataSource._updateChangeSubscription();\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Builds EDA preview table (Imputaion preview)\n   * @param edaData\n   */\n  buildEdaPreviewTable(edaData: any): void {\n    const tempArray: Array<string> = [];\n    let reqObj: Object = {\n      filepath: edaData.correctedData !== null ? edaData.correctedData : edaData.imputedDatasetFilepath,\n      pid: this.project._id,\n    };\n    // Generates columns\n    edaData.edaSummary.forEach((data: any) => {\n      // Used for feature sharing, init isSharedFeature value to false\n      data.isSharedFeature = false;\n      if (data.data_type !== 'Datetime') {\n        tempArray.push(data.colName);\n      }\n    });\n    this.edaPreviewColumns = [...tempArray];\n    // API call to fetch EDA preview data\n    this._eda\n      .readUploadedData(this.project._id, reqObj)\n      // .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.edaPreviewDataSource = new MatTableDataSource(res.preview);\n            this.edaPreviewDataSource.paginator = this.edaPreviewPaginator;\n            this.edaPreviewDataSource.sort = this.edaPreviewSort;\n            this._spinner.stopSpinner();\n          }\n        },\n        (err) => {\n          this.edaPreviewDataSource = new MatTableDataSource(edaData.edaSummary);\n          this.edaPreviewDataSource.paginator = this.edaPreviewPaginator;\n          this.edaPreviewDataSource.sort = this.edaPreviewSort;\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Builds outlier preview table\n   * @param edaData\n   */\n  buildOutlierPreviewTable(edaData: any): void {\n    const tempArray: Array<string> = [];\n    let reqObj: Object = {\n      filepath: edaData.outlierPreviewFilepath,\n      pid: this.project._id,\n    };\n    // Generates columns\n    edaData.edaSummary.forEach((data: any) => {\n      // Used for feature sharing, init isSharedFeature value to false\n      data.isSharedFeature = false;\n      if (data.data_type !== 'Datetime') {\n        tempArray.push(data.colName);\n      }\n    });\n    this.edaOutlierColumns = [...tempArray];\n    // API call to fetch EDA preview data\n    this._eda\n      .readUploadedData(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.edaOutlierDataSource = new MatTableDataSource(res.preview);\n            this.edaOutlierDataSource.paginator = this.edaOutlierPaginator;\n            this.edaOutlierDataSource.sort = this.edaOutlierSort;\n            this._spinner.stopSpinner();\n          }\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n        }\n      );\n  }\n\n  /**\n   * Generates array based on original data type\n   * @param featureList\n   */\n  getCustomVarTypes(feature: any): Array<string> {\n    let type: string;\n    feature.isVarTypeChanged ? (type = feature.dataType) : (type = feature.customVarType);\n    switch (type) {\n      case 'Integer':\n        return ['Categorical', 'Integer', 'Decimal'];\n      case 'Decimal':\n        return ['Categorical', 'Integer', 'Decimal'];\n      case 'Categorical':\n        return ['Text', 'Categorical'];\n      case 'Text':\n        return ['Text'];\n      case 'Datetime':\n        return ['Datetime'];\n      case 'URL':\n        return ['URL'];\n      case 'Boolean':\n        return ['Integer', 'Decimal', 'Categorical', 'Boolean'];\n      case 'Unstructured':\n        return ['Unstructured'];\n    }\n  }\n\n  /**\n   * Fetchs text-analysis details\n   * @param projectId\n   * @param originalFileId\n   */\n  async getTextAnalysisDetails(taExperimentId: string): Promise<any> {\n    return this._textAnalysis\n      .taExperiment(taExperimentId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise();\n  }\n\n  /**\n   * Function will check for auto generated feature is exist or not, If exist give a different color to it\n   * @param data\n   * @returns\n   */\n  getCustomStyle(data: any): string {\n    return data.constantFeature || data.highCardinalityFeature || data.mostlyMissing\n      ? 'feature-name-style'\n      : '';\n  }\n\n  /**\n   * Generates and returns the dynamic tooltip as per the auto generated feature\n   * @param data\n   * @returns\n   */\n  getTooltip(data: any): string {\n    if (data.constantFeature) {\n      return 'Rejected, constant feature.This feature contains only one value for all the outputs in the dataset.';\n    } else if (data.highCardinalityFeature) {\n      return 'Rejected, high cardinality feature.This feature contains values that are very uncommon or unique,are typically identification numbers, email addresses, or user names.';\n    } else if (data.mostlyMissing) {\n      return `Rejected, feature contains ${data.missingProportion * 100}% of missing data.`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Called when varType is changed (dropdown)\n   * @param feature\n   */\n  varTypeChanged(feature: any): void {\n    if (this.previousEda) {\n      // Snackbar to hint user for changes detected and do EDA again button\n      this.showSnackBar();\n    }\n    let defaultimputationDataType = {};\n    this.project.type === 'timeseries'\n      ? (defaultimputationDataType = {\n        Integer: 'Linear',\n        Decimal: 'Linear',\n        Categorical: 'Mode',\n        Datetime: 'Delete',\n        Boolean: 'Mode',\n        Text: 'Mode',\n        URL: 'Mode',\n      })\n      : (defaultimputationDataType = {\n        Integer: 'Median',\n        Decimal: 'Mean',\n        Categorical: 'Mode',\n        Datetime: 'Delete',\n        Boolean: 'Mode',\n        Text: 'Mode',\n        URL: 'Mode',\n      });\n\n    // this.generateStrategyOptions(feature.customVarType);\n    this.finalFeatureList.forEach((data: any) => {\n      if (data.colName === feature.colName) {\n        data.customVarType = feature.customVarType;\n        data.isVarTypeChanged = true;\n        data.imputationStrategy = defaultimputationDataType[feature.customVarType];\n      }\n    });\n    if (this.multipleTimeseriesId === 'True') {\n      this.timeseriesGroupList = [];\n      this.timeseriesGroupList = this.finalFeatureList.filter((item) => {\n        return (\n          (item.customVarType === 'Integer' || item.customVarType === 'Boolean' || item.customVarType === 'Categorical') &&\n          item.colName !== this.targetControl.value.colName &&\n          item.dataType !== 'Unstructured' &&\n          item.unique > 1\n        );\n      });\n    }\n    // Updates the data-table array with new values\n    this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n    this.edaDataSource.paginator = this.edaPaginator;\n    this.edaDataSource.sort = this.edaSort;\n  }\n\n  /**\n   * Generate the correct strategy for eda strategy table based on dataType\n   * @param dataType\n   * @returns\n   */\n  generateStrategyOptions(feature: any): Array<string> {\n    // Creates a customEdaStrategy object, only if imputationCustomValue is present\n    feature.imputationCustomValue && feature.imputationStrategy === 'Custom'\n      ? (this.customEdaStrategyObject[feature.colName] = feature.imputationCustomValue)\n      : '';\n    feature.imputationStrategy === 'Spline' ? (this.splineOrderObject[feature.colName] = feature.imputationCustomValue)\n      : '';\n    feature.imputationStrategy === 'Polynomial' ? (this.polynomialOrderObject[feature.colName] = feature.imputationCustomValue)\n      : '';\n    let startegies: Array<string> = [];\n    this.project.type === 'timeseries'\n      ? (startegies = [\n        'Linear',\n        'Time',\n        'Index',\n        'Values',\n        'Nearest',\n        'Zero',\n        'Slinear',\n        'Quadratic',\n        'Cubic',\n        'Barycentric',\n        'Krogh',\n        'Polynomial',\n        'Spline',\n        'Piecewise_polynomial',\n        'Pchip',\n        'Mode',\n        'Custom',\n        'Delete',\n      ])\n      : (startegies = ['Min', 'Median', 'Max', 'Mean', 'Mode', 'St.Dev', 'Custom', 'Delete']);\n    return feature.customVarType === 'Integer' || feature.customVarType === 'Decimal'\n      ? startegies\n      : (startegies = ['Mode', 'Custom', 'Delete']);\n  }\n\n  /**\n   * Returns the outlierCorrectionStrategies options array\n   * @param dataType\n   * @returns\n   */\n  getOutlierCorrectionStrategies(feature: any): Array<string> {\n    // Creates a customEdaStrategy object, only if imputationCustomValue is present\n    feature.ocsCustomValue && feature.outlierCorrectionStrategy === 'Custom'\n      ? (this.customCorrectionStrategyObject[feature.colName] = feature.ocsCustomValue)\n      : '';\n    return this.outlierCorrectionStrategies;\n  }\n\n  /**\n   * Called when imputaion strategy is changed (dropdown)\n   * @param feature\n   * @returns\n   */\n  imputationStrategyChanged(feature: any): void {\n    this.customStrategyControl.setValue(feature.imputationCustomValue || '');\n    this.polynomialOrderControl.setValue(feature.polynomialOrder || 2);\n    this.splineOrderControl.setValue(feature.splineOrder || 2);\n    this.selectedOption = feature;\n    if (\n      this.selectedOption.imputationStrategy === 'Custom' ||\n      this.selectedOption.imputationStrategy === 'Spline' ||\n      this.selectedOption.imputationStrategy === 'Polynomial'\n    ) {\n      if (this.previousEda) {\n        this.snackBarRef ? this.snackBarRef.dismiss() : '';\n      }\n      if (feature.dataType === 'Integer' || feature.dataType === 'Decimal') {\n        this.showNumberInput = true;\n        this.showTextInput = false;\n        this.inputDialogRef = this._dialog.open(this.edaTableInputTemp, {\n          data: 'imputation',\n          width: '20%',\n          // height: 'auto',\n        });\n      } else {\n        this.showTextInput = true;\n        this.showNumberInput = false;\n        this.inputDialogRef = this._dialog.open(this.edaTableInputTemp, {\n          width: '20%',\n          data: 'imputation',\n          // height: 'auto',\n        });\n      }\n    } else {\n      this.hideEdaButton = false;\n      // Snackbar to hint user for changes detected and do EDA again button\n      if (this.previousEda) {\n        this.hideEdaButton ? '' : this.showSnackBar();\n      }\n      this.strategyHandler(feature);\n    }\n  }\n\n  /**\n   * Handles all the required data\n   * @param feature\n   */\n  strategyHandler(feature: any): void {\n    // Updates the array by assigning the new selected imputaion strategy\n    this.finalFeatureList.map((item) => {\n      if (feature.colName === item.colName) {\n        item.imputationStrategy = feature.imputationStrategy;\n      }\n      return item;\n    });\n    // Deletes the custom strategy and updates the array, if custom strategy is not selected\n    if (\n      feature.imputationStrategy !== 'Custom' &&\n      Object.keys(this.customEdaStrategyObject).length\n    ) {\n      this.finalFeatureList.map((item) => {\n        if (feature.colName === item.colName) {\n          item.imputationCustomValue = '';\n        }\n        return item;\n      });\n      this.customEdaStrategyObject.hasOwnProperty(feature.colName)\n        ? delete this.customEdaStrategyObject[feature.colName]\n        : '';\n    } else if (!feature.hasOwnProperty('ocsCustomValue')) {\n      this.finalFeatureList.map((item) => {\n        if (feature.colName === item.colName) {\n          item.outlierCorrectionStrategy = 'Ignore outlier';\n        }\n        return item;\n      });\n      this.hideEdaButton = false;\n    }\n    // If custom strategy is not selected, then deletes the custom strategy and updates the array\n    if (this.project.type === 'timeseries') {\n      if (feature.imputationStrategy !== 'Polynomial' && Object.keys(this.polynomialOrderObject).length) {\n        this.finalFeatureList.map((item) => {\n          if (feature.colName === item.colName) {\n            item.imputationCustomValue = '';\n          }\n          return item;\n        });\n        this.polynomialOrderObject.hasOwnProperty(feature.colName) ? delete this.polynomialOrderObject[feature.colName] : '';\n      }\n      if (feature.imputationStrategy !== 'Spline' && Object.keys(this.splineOrderObject).length) {\n        this.finalFeatureList.map((item) => {\n          if (feature.colName === item.colName) {\n            item.imputationCustomValue = '';\n          }\n          return item;\n        });\n        this.splineOrderObject.hasOwnProperty(feature.colName) ? delete this.splineOrderObject[feature.colName] : '';\n      }\n    }\n    // Updates the data-table array with new values\n    this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n    this.edaDataSource.paginator = this.edaPaginator;\n    this.edaDataSource.sort = this.edaSort;\n  }\n\n  /**\n   * Called when the outlier detection strategy changes\n   * @param feature\n   */\n  outlierDetectionStrategyChanged(feature: any): void {\n    // Updates the array by assigning the new selected imputaion strategy\n    this.finalFeatureList.map((item) => {\n      if (feature.colName === item.colName) {\n        item.outlierDetectionStrategy = feature.outlierDetectionStrategy;\n      }\n      return item;\n    });\n    // Updates the data-table array with new values\n    this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n    this.edaDataSource.paginator = this.edaPaginator;\n    this.edaDataSource.sort = this.edaSort;\n    // Snackbar to hint user for changes detected and do EDA again button\n    this.hideEdaButton ? '' : this.showSnackBar();\n  }\n\n  /**\n   * Called when the outlier correction strategy changes\n   * @param feature\n   */\n  outlierCorrectionStrategyChanged(feature: any): void {\n    this.customCorrectionControl.setValue(feature.ocsCustomValue || '');\n    this.selectedOption = feature;\n    // Updates the array by assigning the new selected imputaion strategy\n    this.finalFeatureList.map((item) => {\n      if (feature.colName === item.colName) {\n        item.outlierCorrectionStrategy = feature.outlierCorrectionStrategy;\n      }\n      return item;\n    });\n    // Opens the popup for custom strategy input and updates the array with new outlierCorrectionStrategy\n    if (\n      feature.outlierCorrectionStrategy === 'Custom' &&\n      (feature.dataType === 'Integer' || feature.dataType === 'Decimal')\n    ) {\n      if (this.previousEda) {\n        this.snackBarRef ? this.snackBarRef.dismiss() : '';\n      }\n      this.showTextInput = true;\n      this.showNumberInput = false;\n      this.isOutlierCustom = true;\n      this.inputDialogRef = this._dialog.open(this.edaTableInputTemp, {\n        width: '20%',\n        data: 'outliercorrection',\n        // height: 'auto',\n      });\n    } else {\n      this.hideEdaButton = false;\n      // Snackbar to hint user for changes detected and do EDA again button\n      if (this.previousEda) {\n        this.hideEdaButton ? '' : this.showSnackBar();\n      }\n    }\n    // If custom strategy is not selected, then deletes the outlierCorrectionStrategy and updates the array\n    if (\n      feature.outlierCorrectionStrategy !== 'Custom' &&\n      Object.keys(this.customCorrectionStrategyObject).length\n    ) {\n      this.finalFeatureList.map((item: any) => {\n        if (feature.colName === item.colName) {\n          item.ocsCustomValue = '';\n        }\n        return item;\n      });\n      this.customCorrectionStrategyObject.hasOwnProperty(feature.colName)\n        ? delete this.customCorrectionStrategyObject[feature.colName]\n        : '';\n    }\n    // Updates the data-table array with new values\n    this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n    this.edaDataSource.paginator = this.edaPaginator;\n    this.edaDataSource.sort = this.edaSort;\n  }\n\n  /**\n   * Handles the custom strategy value submition\n   * @param feature\n   */\n  submitCustomStrategies(feature: any): void {\n    this.customCorrectionControl.value\n      ? (this.customCorrectionStrategyObject[feature.colName] = this.customCorrectionControl.value)\n      : '';\n      // Updates the data-table array with new values\n      this.finalFeatureList.map((item) => {\n        if (item.colName === feature.colName) {\n          switch (feature.imputationStrategy) {\n            case 'Spline':\n              this.splineOrderControl.value ? (this.splineOrderObject[feature.colName] = this.splineOrderControl.value) : '';\n              item.imputationCustomValue = this.splineOrderControl.value ? this.splineOrderControl.value : feature.imputationCustomValue;\n              break;\n            case 'Polynomial':\n              this.polynomialOrderControl.value ? (this.polynomialOrderObject[feature.colName] = this.polynomialOrderControl.value) : '';\n              item.imputationCustomValue = this.polynomialOrderControl.value ? this.polynomialOrderControl.value : feature.imputationCustomValue;\n              break;\n            case 'Custom':\n              this.customStrategyControl.value ? (this.customEdaStrategyObject[feature.colName] = this.customStrategyControl.value) : '';\n              item.imputationCustomValue = this.customStrategyControl.value ? this.customStrategyControl.value : feature.imputationCustomValue;\n              break;\n          }\n          item.ocsCustomValue = this.customCorrectionControl.value ? this.customCorrectionControl.value : feature.ocsCustomValue;\n          if (this.project.type === 'timeseries') {\n            item.splineOrder = this.splineOrderControl.value;\n            item.polynomialOrder = this.polynomialOrderControl.value;\n          }\n        }\n        return item;\n      });\n    this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n    this.edaDataSource.paginator = this.edaPaginator;\n    this.edaDataSource.sort = this.edaSort;\n    this.edaDataSource._updateChangeSubscription();\n    this.inputDialogRef.close();\n    if (this.customCorrectionControl.value || this.customStrategyControl.value || this.splineOrderControl.value || this.polynomialOrderControl.value) {\n      this.hideEdaButton = false;\n      if (this.previousEda) {\n        // Snackbar to hint user for changes detected and do EDA again button\n        this.hideEdaButton ? '' : this.showSnackBar();\n      }\n    }\n    this.strategyHandler(feature);\n  }\n\n  /**\n   * Returns the dialog heading\n   * @param feature\n   * @returns\n   */\n  getDialogHeading(feature: any): string {\n    if (feature.imputationStrategy === 'Custom' || feature.outlierCorrectionStrategy === 'Custom') {\n      return 'Custom Strategy';\n    }\n    if (this.project.type === 'timeseries') {\n      return feature.imputationStrategy === 'Polynomial'\n        ? 'Polynomial Strategy'\n        : 'Spline Strategy';\n    }\n  }\n\n  /**\n   * Closed the custom strategy input pop-up\n   */\n  closeCustomDialog(feature: any, type): void {\n    this.inputDialogRef.close();\n    this.customCorrectionControl.reset();\n    if (type == 'outliercorrection') {\n      feature.customCorrectionStrategy = 'Ignore outlier';\n      this.selectedOption = feature;\n    } else if (type === 'imputation') {\n      if (feature.dataType === 'Decimal') {\n        feature.imputationStrategy = this.project.type === 'timeseries' ? 'Linear' : 'Mean';\n        this.numericFeatures.push({ numericFeature: feature.colName });\n      } else if (feature.dataType === 'Integer') {\n        feature.imputationStrategy = this.project.type === 'timeseries' ? 'Linear' : 'Median';\n        this.numericFeatures.push({ numericFeature: feature.colName });\n      } else if (feature.dataType === 'Datetime' || feature.dataType === 'Text') {\n        feature.imputationStrategy = 'Delete';\n      } else {\n        feature.imputationStrategy = 'Mode';\n      }\n      if (feature.dataType === 'Categorical' || feature.dataType === 'Boolean') {\n        this.imputationFeatures.push({ imputationFeature: feature.colName });\n      }\n    }\n    this.strategyHandler(feature);\n    this.hideEdaButton = false;\n    if (this.previousEda) {\n      // Snackbar to hint user for changes detected and do EDA again button\n      this.hideEdaButton ? '' : this.showSnackBar();\n    }\n  }\n\n  /**\n   * Function used to build a header columns for EDA preview and Outlier preview table\n   * @param edaSummary\n   */\n  buildHeaderColumns(edaSummary: any): void {\n    edaSummary.forEach((data: any) => {\n      // Used for feature sharing, init isSharedFeature value to false\n      data.isSharedFeature = false;\n      if (data.data_type !== 'Datetime') {\n        this.edaPreviewColumns.push(data.colName);\n      }\n    });\n  }\n\n  /**\n   * Opens the analysis form\n   */\n  openFeatureAnalysisModal(): void {\n    this.featureDataTypes = [];\n    // if (NVD3Config.getMplD3Object()) {\n    //   window.d3 = NVD3Config.getMplD3Object();\n    // }\n    this.multiUniFeatures = [];\n    this.allFeatures = [];\n    // $scope.multiUnivariateAnalysis = \"\";\n    this.finalFeatureList.forEach((data) => {\n      let obj = {\n        colName: data.colName,\n        data: data.dataType,\n        multivariateDataType: data.dataType,\n      };\n      this.featureDataTypes.indexOf(obj) === -1 ? this.featureDataTypes.push(obj) : null;\n      this.allFeatures.push(data.colName);\n    });\n    // Filters the features list (exclude index and target features)\n    this.featureDataTypes = this.featureDataTypes.filter((temp) => {\n      if (\n       //temp.colName !== this.targetControl.value?.colName &&\n        temp.colName !== this.edaForm.get('datetimeIndex')?.value\n      ) {\n        return temp;\n      }\n    });\n    if (this.previousEda && this.previousEda.isMultipleTimeseries) {\n      this.featureDataTypes = this.featureDataTypes.filter((i: any) =>\n        !this.previousEda.timeseriesIds.includes(i.colName) ? i : null\n      );\n    } \n    this.openDialog('analysis');\n    // checkThemeColor();\n    // modalScope.cancel = function () {\n    //   window.d3 = td3;\n    //   vm.allFeatures.length = 0;\n    //   modalInstance.close(modalScope.selected);\n    // };\n  }\n\n  /**\n   * Call when the index is changed\n   */\n  async onIndexColumnChange(): Promise<any> {\n    this.multipleTimeseriesId = await this.isMultiTimeseries(this.selectedDataSet);\n    this.selectedIndex = this.selectedDataSet.fileSchema.filter((item) => {\n      return item.colName === this.edaForm.get('datetimeIndex').value;\n    })[0];\n    if (this.project.type === 'timeseries') {\n      const frequencyColData = this.selectedDataSet.descriptiveStatistics.find(\n        (val) => val.colName === this.edaForm.get('datetimeIndex').value\n      );\n      // storing the frequency val in the variable for quick refrence.\n      let frequencyVal = String(frequencyColData.frequency.split('(')[0]).replace(' ', '');\n      // finding the index value of the frequency which is computed during eda.\n      const resamplingFrequencyIndexVal = RESAMPLING_CONSTANTS.find(\n        (item) => item.value === frequencyVal\n      )?.index;\n      // filtering the resampling constants based on the frequency index value.\n      if (frequencyVal) {\n        this.resamplingConstants = RESAMPLING_CONSTANTS.filter(\n          (val) => val.index > resamplingFrequencyIndexVal\n        );\n      } else {\n        this.resamplingConstants.length = 0;\n      }\n      this.conditionalFeatureList = this.finalFeatureList.filter((temp) => {\n        if (\n          (temp.dataType === 'Categorical' ||\n            temp.dataType === 'Text' ||\n            temp.dataType === 'Datetime' ||\n            temp.dataType === 'Decimal' ||\n            temp.dataType === 'Integer') &&\n          temp.colName !== this.targetControl.value?.colName &&\n          temp.colName !== this.edaForm.get('datetimeIndex')?.value &&\n          temp.dataType !== 'Unstructured'\n        ) {\n          return temp;\n        }\n      });\n      this.cFeatureList = this.conditionalFeatureList;\n    }\n    if (this.edaData) {\n      this._spinner.showSpinner();\n      let finalData = await this.mergeArrays(this.selectedDataSet);\n      this.buildEdaStrategyTable(finalData.fileSchema, 'before_eda');\n    }\n  }\n\n  /**\n   * function to check if dataset is multiple timeseries \n   */\n  async isMultiTimeseries(dataset): Promise<any> {\n    let reqObj = {\n      projectId: this.project._id,\n      filename: this.selectedDataSet.name,\n      datetimeIndex: this.edaForm.get('datetimeIndex').value,\n    };\n    return this._eda.multiTimeseriesCheck(reqObj).pipe(takeUntil(this.unsubscribe$)).toPromise();\n  }\n\n  timeseriesChangeHandler(timeseriesId) {\n    this.cFeatureList = this.conditionalFeatureList.filter((i: any) => {\n      return !timeseriesId.includes(i.colName) ? i : null\n    }\n    );\n    if (!timeseriesId.length) {\n      this._snackBar.open('Select timeseries identifiers.', 'OK', {\n        horizontalPosition: 'right',\n        verticalPosition: 'bottom',\n      });\n      return;\n    }\n    let reqObj = {\n      projectId: this.project._id,\n      fileName: this.selectedDataSet.name,\n      datetimeIndex: this.edaForm.get('datetimeIndex').value,\n      timeseriesIds: this.timeseriesIds.value,\n      selectedDatasetId: this.selectedDataSet._id,\n      fileSchema: this.selectedDataSet.fileSchema\n    }\n    this._eda\n      .calculateTimeseriesFrequency(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            let objIndex = this.finalFeatureList.findIndex((obj => obj.colName == this.edaForm.get('datetimeIndex').value));\n            if (objIndex !== -1) {\n              this.finalFeatureList[objIndex].frequency = res.frequency !== null ? res.frequency : 'NA';\n              const frequencyColData = this.finalFeatureList.find(\n                (val) => val.colName === this.edaForm.get('datetimeIndex').value\n              );\n              // storing the frequency val in the variable for quick refrence.\n              let frequencyVal = String(frequencyColData.frequency.split('(')[0]).replace(' ', '');\n              // finding the index value of the frequency which is computed during eda.\n              const resamplingFrequencyIndexVal = RESAMPLING_CONSTANTS.find(\n                (item) => item.value === frequencyVal\n              )?.index;\n              // filtering the resampling constants based on the frequency index value.\n              if (frequencyVal) {\n                this.resamplingConstants = RESAMPLING_CONSTANTS.filter(\n                  (val) => val.index > resamplingFrequencyIndexVal\n                );\n              } else {\n                this.resamplingConstants.length = 0;\n              }\n              this.edaDataSource = new MatTableDataSource(this.finalFeatureList);\n              this.edaDataSource.paginator = this.edaPaginator;\n              this.edaDataSource.sort = this.edaSort;\n            }\n            this._spinner.stopSpinner();\n          } else {\n            this._toaster.error('Cannot share the report', 'EDA');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'EDA');\n        }\n      );\n  }\n  /**\n   * Shares the report\n   * @param usersets\n   */\n  shareReport(usersets: any): void {\n    this._spinner.showSpinner();\n    usersets.outputName = usersets.fileSource;\n    usersets.outputType = 'EDA';\n    usersets.filename = usersets.name;\n    usersets.projectId = usersets.ProjectId;\n    usersets.edaId = this.previousEda._id;\n    this._eda\n      .shareReport(this.project._id, usersets)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this._spinner.stopSpinner();\n            this._router.navigate(['/project/output']);\n          } else {\n            this._toaster.error('Cannot share the report', 'EDA');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'EDA');\n        }\n      );\n  }\n  /**\n   * On feature change for the conditional filtering\n   * @param colName\n   * @param index\n   */\n  async onFeatureChange(colName, index, type?: string) {\n    this._spinner.showSpinner();\n    if (colName !== 'none') {\n      let feature = this.conditionalFeatureList.filter((item) => item.colName == colName);\n      if (type !== 'previousEda') {\n        let data = this.featureMethod[index];\n        if (data && data.colName != colName) {\n          this.featureMethod.splice(index, 1);\n        }\n        this.featureMethod.push(feature[0]);\n        this.conditionalFilter[index].value = '';\n        this.conditionalFilter[index].method = '';\n      }\n      if (feature[0].dataType == 'Integer' || feature[0].dataType == 'Decimal') {\n        this.method[index] = this.Numeric;\n      } else if (feature[0].dataType == 'Datetime') {\n        this.method[index] = this.DateTime;\n      } else if (feature[0].dataType == 'Text') {\n        this.method[index] = this.Text;\n      } else if (feature[0].dataType == 'Categorical') {\n        this.method[index] = this.Categorical;\n        let className = await this.getUniqueClass(colName).catch((e: Error) => {\n          this._toaster.error(`Error - ${e.message}`, 'Eda');\n        });\n        this.class[index] = className.body;\n      }\n    } else {\n      this.conditionalFilter = [{ featureName: '', method: '', value: [] }];\n    }\n\n    this._spinner.stopSpinner();\n  }\n\n  async getUniqueClass(colName): Promise<any> {\n    let reqObj = {\n      filename: this.selectedDataSet.name,\n      colName: colName,\n      projectId: this.project._id,\n    };\n    return this._eda.getUniqueClass(reqObj).pipe(takeUntil(this.unsubscribe$)).toPromise();\n  }\n  /**\n   * Modal for the conditional filtering preview\n   * @param conditionalPreviewTemplate\n   * @param Data\n   */\n  preview(conditionalPreviewTemplate: TemplateRef<any>, Data?: any) {\n    this._spinner.showSpinner();\n    let columnDefs = [];\n    let filterValue = this.conditionalFilter[0].value;\n    if (filterValue == '' && filterValue !== 0) {\n      this._spinner.stopSpinner();\n      this._snackBar.open('Enter all the required values.', 'OK', {\n        horizontalPosition: 'right',\n        verticalPosition: 'bottom',\n      });\n      return;\n    }\n    // let columnsArray: Array<any> = [];\n    if (\n      this.conditionalFilter[0].featureName == '' ||\n      this.conditionalFilter[0].method == '' ||\n      (filterValue !== 0 && this.conditionalFilter[0].value == '')\n    ) {\n      this.featureMethod = [];\n      return;\n    } else {\n      this.conditionalFilter = this.conditionalFilter.filter(function (temp) {\n        if (temp.featureName != '' && temp.method != '' && temp.value !== '') {\n          if (temp.method == 'equalClass' || temp.method == 'equalClass') {\n            if (temp.value[0] !== '') {\n              return temp;\n            }\n          }\n          return temp;\n        }\n      });\n    }\n    let reqObj = {\n      projectId: this.project._id,\n      fileName: this.selectedDataSet.name,\n      edaConditionalFiltering: this.conditionalFilter,\n    };\n    this._eda\n      .getConditionalFilter(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.conditionalColumn = res.column;\n            this.conditionalrow = res.row;\n            for (let key in res.descriptiveStatistics[0]) {\n              columnDefs.push({\n                headerName: key,\n                field: key,\n              });\n            }\n            this.gridOptions = {\n              headerHeight: 40,\n              columnDefs: columnDefs,\n              // rowData: res.preview,\n              defaultColDef: { resizable: true },\n            };\n\n            this.previewrowData = res.descriptiveStatistics;\n            /** Fetches only the key from the reponse for displaying columns */\n            // let head: Array<string> = Object.keys(res.descriptiveStatistics[0]res.descriptiveStatistics[0]);\n            // head.forEach((col) => columnsArray.push(col));\n            // this.displayedColumns = columnsArray;\n            // this.dataSource.data = res.descriptiveStatistics;\n          } else {\n            this._toaster.error('Can not get preview', 'EDA');\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.error.message, 'EDA');\n        }\n      );\n    this.dialogRef = this._dialog.open(conditionalPreviewTemplate, {\n      // height: 'auto',\n      width: '80%',\n    });\n    this._spinner.stopSpinner();\n  }\n\n  resamplingPreview(resamplingPreviewTemplate: TemplateRef<any>, Data?: any) {\n    this._spinner.showSpinner();\n    let columnDefs = [];\n    let reqObj = {\n      projectId: this.project._id,\n      fileName: this.selectedDataSet.name,\n      datetimeIndex: this.edaForm.get('datetimeIndex').value,\n      timeseriesIds: this.timeseriesIds.value,\n      resampling: {\n        resamplingMethod: this.resamplingMethod,\n        aggregationFunction: this.aggregationFunction,\n      },\n    };\n    this._eda\n      .getresamplingPreview(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (!res.hasOwnProperty('error')) {\n            this.resampledColumn = res.column;\n            this.resampledRow = res.row;\n            for (let key in res.resampled_data[0]) {\n              columnDefs.push({\n                headerName: key,\n                field: key,\n              });\n            }\n            this.resamplegridOptions = {\n              headerHeight: 40,\n              columnDefs: columnDefs,\n              // rowData: res.preview,\n              defaultColDef: { resizable: true },\n            };\n\n            this.resamplepreviewrowData = res.resampled_data;\n            this.dialogRef = this._dialog.open(resamplingPreviewTemplate, {\n              // height: 'auto',\n              width: '80%',\n            });\n\n          } else {\n            this.resampleError = res.error ? true : false;\n            this._toaster.error(res.error, 'EDA');\n          }\n\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.message, 'EDA');\n        }\n      );\n    this._spinner.stopSpinner();\n  }\n  /**\n   * Opens the dialog with data as per type\n   * @param type analysis/previeew\n   * @param tableData\n   * @param tableColumns\n   */\n  openDialog(type: string, tableData?: any, data?: any, tableColumns?: Array<any>): void {\n    this._dialog.open(DialogHandlerComponent, {\n      maxWidth: '90vw',\n      data:\n        type === 'preview'\n          ? { type: type, dataId: tableData, reqObj: data }\n          : {\n            type: type,\n            edaData: this.edaData,\n            selectedDataSet: this.selectedDataSet,\n            featureDataTypes: this.featureDataTypes,\n            tableData: tableData,\n            tableColumns: tableColumns,\n          },\n    });\n  }\n\n  onStringFeatureChange(feature) {\n    if (feature == 'none') {\n      this.stringTransformation = [{ featureName: '', fromText: '', toText: '' }];\n    }\n  }\n  /**\n   * Appends the % symbol to the slider thumb count\n   * @param value\n   * @returns\n   */\n  formatLabel(value: number): string {\n    return `${value}%`;\n  }\n\n  /**\n   * Returns error for custom imputaion strategy values\n   * @param feature\n   * @returns\n   */\n  getCustomStrategyError(feature: any): string {\n    if (!this.customEdaStrategyObject?.hasOwnProperty(feature.colName) && feature.imputationStrategy === 'Custom') {\n      this.hideEdaButton = true;\n      return 'Custom vaule is required.';\n    } else if (!this.splineOrderObject?.hasOwnProperty(feature.colName) && feature.imputationStrategy === 'Spline') {\n      this.hideEdaButton = true;\n      return 'Spline vaule is required.';\n    } else if (!this.polynomialOrderObject?.hasOwnProperty(feature.colName) && feature.imputationStrategy === 'Polynomial') {\n      this.hideEdaButton = true;\n      return 'Polunomial vaule is required.';\n    }\n  }\n\n  /**\n   * Returns error for custom outlier correction strategy values\n   * @param feature\n   * @returns\n   */\n  getCustomOutlierError(feature: any): string {\n    if (\n      !this.customCorrectionStrategyObject?.hasOwnProperty(feature.colName) &&\n      feature.outlierCorrectionStrategy === 'Custom'\n    ) {\n      this.hideEdaButton = true;\n      return 'Custom vaule is required.';\n    } else {\n      this.hideEdaButton = false;\n    }\n  }\n\n  /**\n   * Adds the new item in the form array\n   */\n  addItem(): void {\n    this.stringTransformation.push({ featureName: '', fromText: '', toText: '' });\n  }\n\n  /**\n   * Removes the item from form array\n   */\n  removeItem(index: number): void {\n    this.stringTransformation.splice(this.stringTransformation.indexOf(index), 1);\n  }\n\n  /**\n   * Add the item to conditional filter\n   */\n  addFilter(): void {\n    this.conditionalFilter.push({ featureName: '', method: '', value: '' });\n  }\n\n  /**\n   * Removes the item from conditional filter\n   */\n  removeFilter(index: number): void {\n    this.conditionalFilter.splice(this.conditionalFilter.indexOf(index), 1);\n  }\n\n  /**\n   * Downloads the edaSummary\n   */\n  downloadEdaSummary(): void {\n    this._window.open(\n      `${environment.serverBaseUrl}/api/v2/eda/${this.previousEda._id}/edaSummary/download`,\n      '_blank'\n    );\n  }\n\n  /**\n   * Downloads the outlier handled dataset\n   */\n  downloadOutlierPreview(): void {\n    this._window.open(\n      `${environment.serverBaseUrl}/api/v2/eda/${this.previousEda._id}/outlierPreview/download`,\n      '_blank'\n    );\n  }\n\n  downloadImputedDataset(): void {\n    this._window.open(\n      `${environment.serverBaseUrl}/api/v2/eda/${this.previousEda._id}/imputedDataset/download`,\n      '_blank'\n    );\n  }\n\n  /**\n   * Called when the train dataset is changed\n   * @param event\n   */\n  trainDatasetChanged(trainVal: any): void {\n    this.trainSize = trainVal;\n    // Check for min value\n    if (this.trainSize < 50) {\n      this.trainSlider.value = 50;\n      this.trainSlider.writeValue(50);\n      this.trainSize = 50;\n    }\n    // Check for max value\n    if (this.trainSize > 90) {\n      this.trainSlider.value = 90;\n      this.trainSlider.writeValue(90);\n      this.trainSize = 90;\n    }\n    if (this.project.type === 'timeseries') {\n      this.holdoutSize = 100 - this.trainSize;\n    } else {\n      if (!this.devDataset) {\n        this.devSize = 0;\n        this.holdoutSize = 100 - (this.trainSize + this.devSize);\n      } else {\n        this.devSize = 10;\n        this.holdoutSize = 100 - (this.trainSize + this.devSize);\n        // this.devSize = 100 - this.trainSize;\n        this.devSize = 100 - (this.trainSize + this.holdoutSize);\n      }\n    }\n  }\n\n  /**\n   * Called when the dev dataset (validation) is changed\n   * @param event\n   */\n  devDatasetChanged(): void {\n    this.holdoutSize = 100 - (this.trainSize + this.devSize);\n  }\n\n  /**\n   * Handles the toggling of the dev dataset checkbox\n   * @param isChecked\n   */\n  toggleDevDataset(isChecked: boolean): any {\n    if (!isChecked) {\n      this.devSize = 0;\n      if (this.trainSize !== 100 || this.trainSize + this.holdoutSize !== 100) {\n        this.holdoutSize = 100 - (this.trainSize + this.devSize);\n      }\n    } else {\n      // this.devDataset = false;\n      this.devSize = 10;\n      this.holdoutSize = 100 - (this.trainSize + this.devSize);\n    }\n  }\n\n  /**\n   * Called when the test dataset (hold out) is changed\n   * @param event\n   */\n  testDatasetChanged(testVal: any): void {\n    this.holdoutSize = testVal;\n    // Check for min value\n    if (!this.devDataset && this.holdoutSize < 10) {\n      this.testSlider.value = 10;\n      this.testSlider.writeValue(10);\n      this.holdoutSize = 10;\n    }\n    // Check for max value\n    if (!this.devDataset && this.holdoutSize > 50) {\n      this.testSlider.value = 50;\n      this.testSlider.writeValue(50);\n      this.holdoutSize = 50;\n    }\n    if (this.project.type === 'timeseries') {\n      this.trainSize = 100 - this.holdoutSize;\n    } else {\n      if (!this.devDataset) {\n        this.trainSize = 100 - this.holdoutSize;\n        // this.trainSize = 100 - this.holdoutSize;\n      } else {\n        this.devSize = 100 - (this.trainSize + this.holdoutSize);\n      }\n    }\n  }\n\n  /**\n   * Get the details about a specific EDA\n   * @param edaId\n   */\n  findEda(edaId: string): void {\n    this._eda\n      .getEdaData(edaId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.previousEda = res;\n            this.edaData = res;\n            res.edaSummary.forEach(element => {\n              if (element.imputationStrategy === 'Spline') {\n                element.imputationCustomValue = element.splineOrder;\n\n              }\n              if (element.imputationStrategy === 'Polynomial') {\n                element.imputationCustomValue = element.polynomialOrder;\n              }\n            });\n            this.buildEdaStrategyTable(res.edaSummary, 'after_eda');\n            this.buildEdaPreviewTable(res);\n            if (this.previousEda.outlierPreviewFilepath) {\n              this.buildOutlierPreviewTable(res);\n            }\n            this.edaCompleted = true;\n            this._toaster.success('Eda completed,You can start training', 'EDA');\n          } else {\n            this._toaster.error('Cannot fetch EDA details', 'EDA');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'EDA');\n          this.edaCompleted = true;\n        }\n      );\n  }\n\n  /**\n   * Returns the proper colum names\n   * @param colName\n   * @returns\n   */\n  generateProperColNames(colName: string): string {\n    switch (colName) {\n      case 'colName':\n        return 'Feature Name';\n      case 'dataType':\n        return 'Var Type';\n      case 'imputationStrategy':\n        return 'Imputation Strategy';\n      case 'missing':\n        return 'Missing';\n      case 'unique':\n        return 'Unique';\n      case 'max':\n        return 'Max';\n      case 'median':\n        return 'Median';\n      case 'min':\n        return 'Min';\n      case 'mean':\n        return 'Mean';\n      case 'std':\n        return 'SD';\n      case 'outlierDetectionStrategy':\n        return 'Outlier Detection Strategy';\n      case 'outlierCorrectionStrategy':\n        return 'Outlier Correction Strategy';\n      case 'outlierCount':\n        return 'Outlier';\n      case 'frequency':\n        return 'Frequency';\n    }\n  }\n\n  /**\n   * Renders the snack bar with message and button\n   */\n  showSnackBar(): void {\n    this.showEdaButton = false;\n    this.snackBarRef = this._snackBar.open(\n      'We have detected some changes',\n      'please do eda again.',\n      {\n        verticalPosition: 'bottom',\n        horizontalPosition: 'end',\n      }\n    );\n    this.snackBarRef.onAction().subscribe((item) => this.startEda('snackbarcall'));\n  }\n\n  openDateFormatModal(openDateFormatTemplate: TemplateRef<any>, data?: any) {\n    this.selectedOption = data;\n    if (this.selectedOption.hasOwnProperty('dateFormat')) {\n      this.selectedOption.dateFormat = this.selectedOption.dateFormat;\n    }\n    this.dateDialogRef = this._dialog.open(openDateFormatTemplate, {\n      width: '40%',\n      maxWidth: '40vw',\n      data: data,\n    });\n  }\n\n  verifyDateFormat(colName) {\n    if (colName.dateFormat === '') {\n      this.showSnackBarGeneric('Select date format', 'OK');\n      return;\n    }\n    this._spinner.showSpinner();\n    let reqObj = {\n      projectId: this.project._id,\n      filePath: this.selectedDataSet.name,\n      colName: colName.colName,\n      format: colName.dateFormat,\n    };\n    this._eda\n      .dateFormatValidator(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            if (res === 'True') {\n              this.finalFeatureList.forEach((item) => {\n                if (item.colName === colName.colName) {\n                  item.dateFormat = colName.dateFormat;\n                }\n              });\n              this.closeModal();\n              this._toaster.success('Selected date format is valid', 'EDA');\n            } else {\n              this.finalFeatureList.forEach((item) => {\n                if (item.colName === colName.colName) {\n                  item.dateFormat = '';\n                }\n              });\n              this._toaster.error('Selected date format is invalid', 'EDA');\n            }\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n            this._toaster.error('Selected date format is invalid', 'EDA');\n          }\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'EDA');\n          this.edaCompleted = true;\n        }\n      );\n  }\n\n  disableDataType(element) {\n    let colname;\n    if (this.timeseriesIds.value?.length) {\n      colname = this.timeseriesIds.value.filter((item) => {\n        return item === element.colName;\n      });\n    }\n    if (\n      this.targetControl.value &&\n      (element.colName === this.targetControl.value.colName || element.dataType === 'Unstructured')\n    ) {\n      return true;\n    } else if (colname !== undefined && colname.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this.dateDialogRef.close(data);\n  }\n\n  /**\n   * Returns the original columns array\n   * @returns\n   */\n  generateEdaColums(): Array<any> {\n    return JSON.parse(JSON.stringify(EDA_COLUMNS));\n  }\n\n  /**\n   * Initializes the socket to listen events when emmited\n   */\n  initSocket(): void {\n    // Listens to the pullData event\n    this._socket.listen('eda').subscribe(\n      (res: any) => {\n        res.status === 'pull_success'\n          ? this._toaster.success('Eda data saved successfully', 'EDA')\n          : this._toaster.error('Error while saving data', 'EDA');\n        this._spinner.stopSpinner();\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Connection');\n      }\n    );\n\n    // Listens to the eda progress info event\n    this._socket.listen('edaProgressInfo').subscribe(\n      (res: any) => {\n        if (res) {\n          this._spinner.stopSpinner();\n          this.edaStages.pop();\n          if (this.edaStages.length < 6) {\n            this.edaStages.push(res);\n            let index = this.edaStages.length;\n            if (this.eda_stages[index]) {\n              this.edaStages.push(this.eda_stages[index]);\n            }\n          }\n        } else {\n          this._spinner.stopSpinner();\n          this._toaster.error('Cannot fetch eda progress info', 'EDA');\n        }\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Connection');\n      }\n    );\n\n    // Listens to the EDA completed event\n    this._socket.listen('edaCompleted').subscribe(\n      (res: any) => {\n        if (res) {\n          if (res.status === 'EDA Completed') {\n            this.findEda(res.edaData._id);\n          } else if (res.status === 'EDA Failed') {\n            this._toaster.error(res.edaData.message, 'EDA');\n          }\n          this._spinner.stopSpinner();\n        } else {\n          this.edaCompleted = true;\n          this._spinner.stopSpinner();\n          this._toaster.error('Cannot complete the EDA', 'EDA');\n        }\n      },\n      (err: Error) => {\n        this.edaCompleted = true;\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event, tableName: string): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    if (tableName === 'edaSummary') {\n      this.edaDataSource.filter = filterValue.trim().toLowerCase();\n      if (this.edaDataSource.paginator) {\n        this.edaDataSource.paginator.firstPage();\n      }\n    } else if (tableName === 'imputation') {\n      this.edaPreviewDataSource.filter = filterValue.trim().toLowerCase();\n      if (this.edaPreviewDataSource.paginator) {\n        this.edaPreviewDataSource.paginator.firstPage();\n      }\n    } else if (tableName === 'outlier') {\n      this.edaOutlierDataSource.filter = filterValue.trim().toLowerCase();\n      if (this.edaOutlierDataSource.paginator) {\n        this.edaOutlierDataSource.paginator.firstPage();\n      }\n    } else if (tableName === 'conditionalPreview') {\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n      if (this.dataSource.paginator) {\n        this.dataSource.paginator.firstPage();\n      }\n    }\n  }\n\n  /**\n   * Renders the snackbar\n   */\n  showSnackBarGeneric(message: string, button: string): void {\n    this.snackBarRef = this._snackBar.open(message, button, {\n      horizontalPosition: 'right',\n      verticalPosition: 'bottom',\n    });\n  }\n  /**\n   * Finds the unique item and returns it\n   * @param arr\n   * @param prop\n   * @returns\n   */\n  uniqueBy(arr: any, prop: any): any {\n    return arr.reduce((a: any, d: any) => {\n      if (!a.includes(d[prop])) {\n        a.push(d);\n      }\n      return a;\n    }, []);\n  }\n  /**\n   * Called when ng-grid is rendered in dom\n   * @param event\n   */\n  gridReady(event: any, type) {\n    event.api.setDomLayout('autoHeight');\n    this.gridApi = event.api;\n    if (type === 'conditional') {\n      this.gridApi.setColumnDefs(this.gridOptions.columnDefs);\n      this.gridApi.setRowData(this.previewrowData);\n      this.gridApi.refreshCells({ force: true });\n    }\n    if (type === 'resampling') {\n      this.gridApi.setColumnDefs(this.resamplegridOptions.columnDefs);\n      this.gridApi.setRowData(this.resamplepreviewrowData);\n      this.gridApi.refreshCells({ force: true });\n    }\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('pullData');\n    this._socket.removeListener('nodeRedFlowExecution');\n    this._socket.removeListener('edaCompleted');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n    this.snackBarRef ? this.snackBarRef.dismiss() : '';\n  }\n}\n","import { EdaComponent } from './eda.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DialogHandlerComponent } from './dialog-handler/dialog-handler.component';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { GraphsDialogHandlerComponent } from '../models/graphs-dialog-handler/graphs-dialog-handler.component';\nimport { MatDialogModule } from '@angular/material/dialog';\n@NgModule({\n  declarations: [EdaComponent, DialogHandlerComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    MatDialogModule,\n    AgGridModule.withComponents([GraphsDialogHandlerComponent]),\n    RouterModule.forChild([{\n      path: '', component: EdaComponent,\n    }]),\n    MatBadgeModule\n  ]\n})\nexport class EdaModule { }\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TextAnalysisService {\n  serverBaseUrl: string = environment.serverBaseUrl;\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * fetches the list of experiments created by the user\n   * @param projectId\n   * @returns\n   */\n  experimentList(projectId: string): Observable<any> {\n    return this._http.get(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/textAnalysis/experiments`\n    );\n  }\n\n  /**\n   * fetches the text data from the respective column from respective file.\n   * @param projectId\n   * @param featureName\n   * @param fileName\n   * @returns\n   */\n  listFeatureDetails(\n    projectId: string,\n    featureName: string,\n    fileName: string\n  ): Observable<any> {\n    return this._http.get(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/textAnalysis/feature`,\n      {\n        params: { featureName: featureName, fileName: fileName },\n      }\n    );\n  }\n\n  /**\n   * deletes the experiment\n   * @param projectId\n   * @returns\n   */\n  deleteExperiment(projectId: string, experimentId: string): Observable<any> {\n    return this._http.delete(\n      `${this.serverBaseUrl}/api/v2/projects/${projectId}/textAnalysis/experiments`,\n      { params: { experimentId: experimentId } }\n    );\n  }\n\n  /**\n   * Fetches the taexperiment details\n   * @param taExperimentId\n   * @returns\n   */\n  taExperiment(taExperimentId: string): Observable<any> {\n    return this._http.get(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/${taExperimentId}`\n    );\n  }\n\n  textCleaning(inputData: any, taskConfig: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/textCleaning`,\n      {\n        data: inputData,\n        taskConfig: taskConfig,\n      }\n    );\n  }\n\n  pos(inputData: any, taskConfig: any, renderType: any) {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/textAnalysis/pos`, {\n      data: inputData,\n      taskConfig: taskConfig,\n      renderType: renderType,\n    });\n  }\n\n  ner(inputData: any, taskConfig: any, renderType: any) {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/textAnalysis/ner`, {\n      data: inputData,\n      taskConfig: taskConfig,\n      renderType: renderType,\n    });\n  }\n\n  sentimentAnalysis(sentimentAnalysisParams: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/sentimentAnalysis`,\n      {\n        data: sentimentAnalysisParams.data,\n        taskConfig: sentimentAnalysisParams.taskConfig,\n      }\n    );\n  }\n\n  textSummarization(summarizeParam: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/textSummarization`,\n      {\n        data: summarizeParam.data,\n        taskConfig: summarizeParam.taskConfig,\n      }\n    );\n  }\n\n  wordFrequency(configData: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/wordFrequency`,\n      {\n        data: configData,\n      }\n    );\n  }\n\n  wordEmbedding(wordEmbeddingParam: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/wordEmbedding`,\n      {\n        data: wordEmbeddingParam.data,\n        taskConfig: wordEmbeddingParam.taskConfig,\n      }\n    );\n  }\n\n  ruleBasedMatch(inputData: any, taskConfig: any, renderType: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/ruleBasedMatch`,\n      {\n        data: inputData,\n        taskConfig: taskConfig,\n        renderType: renderType,\n      }\n    );\n  }\n\n  saveTextAnalysis(dataConfig: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/saveAnalysis`,\n      { ...dataConfig }\n    );\n  }\n\n  saveApplyTextAnalysis(dataConfig: any) {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/v2/textAnalysis/apply/saveAnalysis`,\n      { ...dataConfig }\n    );\n  }\n}\n"]}