{"version":3,"sources":["webpack:///src/app/routes/data/data-connection/dialog-handler/dialog-handler.component.html","webpack:///src/app/routes/data/data-connection/dialog-handler/dialog-handler.component.ts","webpack:///src/app/routes/data/data-connection/data-connection.component.html","webpack:///src/app/routes/data/data-connection/data-connection.component.ts","webpack:///src/app/routes/data/data-set/data-set-dialog/data-set-dialog.component.html","webpack:///src/app/routes/data/data-set/data-set-dialog/data-set-dialog.component.ts","webpack:///src/app/routes/data/data-set/data-set.component.html","webpack:///src/app/routes/data/data-set/data-set.component.ts","webpack:///src/app/routes/data/data-flow/data-flow.service.ts","webpack:///src/app/routes/data/data-flow/data-flow-stepper/data-flow-stepper.component.html","webpack:///src/app/routes/data/data-flow/data-flow-stepper/data-flow-stepper.component.ts","webpack:///src/app/routes/data/data-flow/data-flow.component.html","webpack:///src/app/routes/data/data-flow/data-flow.component.ts","webpack:///src/app/routes/data/data-connection/file-upload-form/file-upload-form.component.html","webpack:///src/app/routes/data/data-connection/file-upload-form/file-upload-form.component.ts","webpack:///src/app/routes/data/data-connection/database-form/database-form.component.html","webpack:///src/app/routes/data/data-connection/database-form/database-form.component.ts","webpack:///src/app/routes/data/data-connection/sftp-and-url-form/sftp-and-url-form.component.html","webpack:///src/app/routes/data/data-connection/sftp-and-url-form/sftp-and-url-form.component.ts","webpack:///src/app/routes/data/data.module.ts"],"names":["DialogHandlerComponent","dialogData","_fb","_data","_toaster","dialogRef","_localStorage","_utils","renderer","_snackbar","proConnectionList","enterpriseConnectionList","connectionsToRestrict","allConnectionsList","allowedNoOfRows","allowedNoOfColumns","appType","environment","color","mode","diameter","exportProjectDiameter","showSpinner","isEdit","showConnectionTypes","this","user","getItem","psFeatures","fileUploadForm","group","name","required","dataGroupForm","pattern","parentId","project","formType","formUIHandler","dialogHeading","roles","includes","setRestrictions","allowedConnectionsList","sourceType","prefillDataGroupForm","data","allowedConnectionList","filter","item","val","dataGroupData","connectionIdToUpdate","_id","patchValue","get","setValue","currentDataGroup","reset","formValue","updateDataGroupHandler","createDataGroupHandler","reqObj","dataConnection$","updateDataGroup","subscribe","res","success","closeModal","err","error","projectId","createNewDataGroup","type","formHeading","iconType","open","horizontalPosition","verticalPosition","close","unsubscribe","DataConnectionComponent","swal","_spinner","_dialog","_schedular","_window","_snackBar","_socket","_sampleDataset","dataSource","filesDataSource","pageSizeOptions","displayedColumns","displayedColumnsFiles","unsubscribe$","Subject","tempArray","breadcrumbArray","breadArray","dataListArray","isDataFlowFailed","count","callFromStartFlow","flowIdCheck","dataFlowToolTip","urlFlowPlayBtnToolTip","planType","percentDone","allowedFeaturesList","value","paginator","sort","initSocket","getAllConnectionsData","getDataGroupList","getAllSampleDatasets","schedularList","getAllDatasets","pipe","takeUntil","allSampleDatasets","filterSampleDatasets","a","b","Date","createdAt","valueOf","stopSpinner","e","message","fileName","uploadFile","encoding","dataGroupId","dataList","dataFolderName","parentFolderName","file","uploadType","resp","datasetDialog","showSnackBar","fileUpload","dismissSnackBar","dataFilterArray","length","dataGroupsList","datagroupList","connectionsList","connection","rawFilesList","filesdata","filesData","pklfilesdata","concat","temp","Object","keys","filesFilter","datagroup_id","parentFolderData","fArr","_updateChangeSubscription","snackBarRef","getDataGroupsList","getSchedularsList","schedularArray","datasetModal","minWidth","maxWidth","dataGroups","schedulars","afterClosed","pullData","selectedConnToPull","map","doc","isPulling","pullSingleData","serverBaseUrl","id","deleteRawFile","deleteDataConnetion","deleteDataGroup","connId","title","text","icon","buttons","cancel","visible","className","confirm","then","isConfirm","filteredFiles","dataId","rFiles","pFiles","t","push","filterDataGroup","find","docs","datagroup","dataconnection","rawFiles","files","deleteDataConnection","toUpperCase","connectionFilesTemplate","isDataFlowPresent","dataflowId","isDeleted","height","width","fileData","executeDataFlow","dataGroupDetails","isChanged","index","findIndex","splice","d","i","callRecursive","event","tableName","filterValue","target","trim","toLowerCase","firstPage","listen","status","parsed","info","removeListener","next","Window","breadcrumbHandler","openDatasetModal","openModalHandler","DataSetDialogComponent","_dataSetDialogRef","resizeEvent","joinTypeArray","showPreview","showReport","showMergeForm","dataSetList","mergeType","mergeForm","selectedDataset","joinType","nullValidator","commonColumn","columnsToMerge","modalHeading","console","log","previewData","listAllProjectFileList","columnDefs","myFileData","pid","key","preview","headerName","field","gridOptions","headerHeight","defaultColDef","resizable","previewrowData","getAllProjectFileList","parentFile","dataSetId","mergeDataSet","avalialbleColumnsToMerge","fileSchema","commonColumns","colName","setValidators","updateValueAndValidity","clearValidators","originalFilePath","filename","mergeFilePath","parentDatasetTasks","tasks","mergeDatasetTasks","api","setDomLayout","gridApi","setColumnDefs","setRowData","refreshCells","force","DataSetComponent","DataFlowService","_report","_sanitizer","getDataSetList","dataListArrayId","getAllProjectDatas","dataGroupList","filesList","fileSource","content","document","createElement","innerHTML","deleteDataSet","columns","openDialog","minHeight","maxHeight","moduleName","edaReportData","_http","flowData","post","flowId","put","startDate","endDate","DataFlowStepperComponent","_formBuilder","_dataFlow","_router","closeNodeRed","flowFormGroup","flowName","scheduleId","prefillFlowDetails","flowIdToEdit","flowURL","bypassSecurityTrustResourceUrl","stepper","navigateByUrl","emit","isCanceled","findOneFlow","window","frames","contentDocument","getElementsByClassName","iframe","$","btn_deploy","contents","urlString","contentWindow","location","href","position","lastIndexOf","substring","click","alert","flowType","connectionID","updateFlow","createNewFlow","flowResponse","getSingleFlow","closeStepperHandler","onSubmitFlow","$event","DataFlowComponent","moment","_activatedRoute","logsDataSource","logsDisplayedColumns","showStepper","hideDialog","dateRange","directFlowNameCheck","queryParams","connectionId","dataFlowId","dateGroup","start","end","getFlowsList","subtract","getAllFlowsList","uddFlowsList","schedularsList","getNodeRedLogs","selectedFlow","errorLogsTemplate","getErrorLogs","utc","format","errorLogs","inputFlowData","deleteFlow","navigate","err_msg","FileUploadFormComponent","_connectionDialogRef","goBackFlag","allowedPSFileUploadSize","selectFolder","inputFile","ext","split","pop","size","fileToUpload","createConnection","parentFolder","UploadProgress","Math","round","loaded","total","handleFileInput","goBack","DatabaseFormComponent","_connection","hidePassword","dbConnectionForm","connectionName","database","query","parent_id","dataGroupName","validator","validateQuery","getRequiredConnectionList","prefillConnectionForm","dbConns","getConnectionsList","toPromise","getDbConnectionList","source","connectionData","getSingleDataConnection","connectionDetails","databaseConnectionId","databaseName","updateConnectionHandler","createConnectionHandler","formData","statusData","scheduledata","dataschedule","oldScheduleId","updateDataConnection","folderName","selectedFolder","queryString","str","setErrors","queryInvalid","connection$","onSubmitConnection","SftpAndUrlFormComponent","DataModule","options","mouse","contextMenu","tree","node","preventDefault","dblClick","TOGGLE_EXPANDED","shiftKey","TOGGLE_ACTIVE_MULTI","TOGGLE_ACTIVE","ENTER","sftpFileTypes","urlSources","treeControl","children","showSftpSpinner","nodesArray","dataFormat","s3BucketsArray","nodes","hasChild","_","s3Form","bucket","fileExtension","bucketFolderPath","sftpForm","folderpath","urlForm","filetype","url","dynamicForm","sftpGroup","urlGroup","s3Group","s3Conns","sftpConns","getSftpConnectionList","label","expanded","lastword","src","finalRec","m","selectedPath","replace","conn","getSFTPFolders","sftpDetails","urlDetails","s3Details","sftpConnectionId","folderPath","s3ConnectionId","getS3Buckets","getS3BucketsList","isArray","buckets","conId","sftpId","getSftpFolderDetails","slice","toString","join","updateSftpConnection","updateUrlConnection","updateS3Connection","mapSchedular","schedularChanged","routes","path","component","withComponents","forChild","F"],"mappings":"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","file":"x","sourcesContent":["<!-- HEADERS (title) -->\n<h2 *ngIf=\"dialogData.formType === 'dataSource' && showConnectionTypes\" mat-dialog-title>\n  {{ dialogHeading }}\n</h2>\n<h2 *ngIf=\"dialogData.formType === 'dataSource' && !showConnectionTypes\" mat-dialog-title>\n  {{ isEdit ? 'Update Connection' : 'Connection' }}\n</h2>\n<h2 *ngIf=\"dialogData.formType === 'dataGroup' || !dialogData.formType\" mat-dialog-title>\n  {{ isEdit ? 'Update folder' : 'Create folder' }}\n</h2>\n\n<!-- BODY (Data sources) -->\n<mat-dialog-content\n  *ngIf=\"dialogData.formType === 'dataSource' && showConnectionTypes\"\n  class=\"data-sources-container\"\n>\n  <legend style=\"font-size: 20px; margin-top: 10px\">\n    <span [matTooltip]=\"_utils.getTootip('dataSources')\"\n      ><em class=\"far fa-folder\" style=\"margin-right: 15px\"></em>\n      Choose any data source\n    </span>\n    <!-- <small class=\"linkText\" style=\"float: right; font-size: 16px; cursor: pointer\"\n      ><i class=\"fas fa-file-export\"></i>\n      <a\n        target=\"_blank\"\n        href=\"../../../../assets/sample-dataset.zip\"\n        style=\"color: inherit !important\"\n        download=\"sample-dataset.zip\"\n      >\n        Get sample datasets\n      </a>\n    </small> -->\n  </legend>\n  <hr />\n  <!-- CARDS -->\n  <div class=\"row m-1\">\n    <!--Upload file-->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('upload')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        (click)=\"formUIHandler('upload')\"\n        [matTooltip]=\"_utils.getTootip('fileUpload')\"\n        #fileUploadCard\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/icons/upload.svg\"\n              alt=\"File Upload\"\n              style=\"height: 25px\"\n            />\n            <mat-icon\n              id=\"upload\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('upload')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('upload') &&\n                enterpriseConnectionList.includes('upload')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">Upload</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Upload local files (.csv, .pkl, .xlsx)</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n    <!-- this is the icon badges logic -->\n    <!-- <mat-icon\n      id=\"upload\"\n      [ngClass]=\"\n        connectionsToRestrict?.includes('upload')? 'material-icons-outlined pro-flag'\n          : 'd-none'\n      \"\n      [innerText]=\"\n        connectionsToRestrict?.includes('upload') &&\n        enterpriseConnectionList.includes('upload')? 'browser_updated'\n          : 'workspace_premium'\n      \"\n    ></mat-icon> -->\n    <!--Pull data from URL-->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('url')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        (click)=\"formUIHandler('url')\"\n        [matTooltip]=\"_utils.getTootip('pullUrl')\"\n        #pullUrlCard\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/icons/url.svg\"\n              alt=\"URl Upload\"\n              style=\"height: 25px\"\n            />\n            <mat-icon\n              id=\"url\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('url')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('url') && enterpriseConnectionList.includes('url')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">URL</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Pull data from an open URL</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- MS SQL data -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('mssql')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        (click)=\"formUIHandler('mssql')\"\n        [matTooltip]=\"_utils.getTootip('msSql')\"\n        #mssqlCard\n      >\n        <mat-card-content class=\"text-center\">\n          <div class=\"text-right mb-2\">\n            <span class=\"text-muted text-sm\">ver-2019</span>\n          </div>\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/icons/mssql.svg\"\n              alt=\"MSSQL Upload\"\n              style=\"height: 50px\"\n            />\n            <mat-icon\n              id=\"mssql\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('mssql')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('mssql') &&\n                enterpriseConnectionList.includes('mssql')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">MS-SQL</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Query data from mssql</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- My SQL data -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('mysql')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        (click)=\"formUIHandler('mysql')\"\n        [matTooltip]=\"_utils.getTootip('mySql')\"\n        #mysqlCard\n      >\n        <mat-card-content class=\"text-center\">\n          <div class=\"text-right mb-2\">\n            <span class=\"text-muted text-sm\">ver-8.0.27</span>\n          </div>\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/icons/mysql.svg\"\n              alt=\"MYSQL Upload\"\n              style=\"height: 32px\"\n            />\n            <mat-icon\n              id=\"mysql\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('mysql')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('mysql') &&\n                enterpriseConnectionList.includes('mysql')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">MySQL</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Query data from mysql</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- PostgreSQL data -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('postgresql')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        (click)=\"formUIHandler('postgresql')\"\n        [matTooltip]=\"_utils.getTootip('postgre')\"\n        #postgreSqlCard\n      >\n        <mat-card-content class=\"text-center\">\n          <div class=\"text-right mb-2\">\n            <span class=\"text-muted text-sm\">ver-14.1</span>\n          </div>\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/icons/postgresql.svg\"\n              alt=\"PostgreSQL Upload\"\n              style=\"height: 45px\"\n            />\n            <mat-icon\n              id=\"postgresql\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('postgresql')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('postgresql') &&\n                enterpriseConnectionList.includes('postgresql')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">PostgreSQL</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Query data from postgresql</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- SFTP data -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('sftp')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        (click)=\"formUIHandler('sftp')\"\n        [matTooltip]=\"_utils.getTootip('Sftp')\"\n        #sftpCard\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/icons/sftp.svg\"\n              alt=\"SFTP Upload\"\n              style=\"height: 50px\"\n            />\n            <mat-icon\n              id=\"sftp\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('sftp')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('sftp') && enterpriseConnectionList.includes('sftp')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">SFTP</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Pull from SFTP server</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- SNOWFLAKE -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('snowflake')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        [matTooltip]=\"_utils.getTootip('snowflake')\"\n        (click)=\"formUIHandler('snowflake')\"\n        #snowflakeCard\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img src=\"../../../../../assets/img/snow.png\" alt=\"snowflake\" style=\"height: 70px\" />\n            <mat-icon\n              id=\"snowflake\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('snowflake')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('snowflake') &&\n                enterpriseConnectionList.includes('snowflake')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">Snowflake</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Pull from data cloud</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- AMAZON S3 -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('s3')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        [matTooltip]=\"_utils.getTootip('s3')\"\n        (click)=\"formUIHandler('s3')\"\n        #s3Card\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img src=\"../../../../../assets/img/s3.svg\" alt=\"s3\" style=\"height: 70px\" />\n            <mat-icon\n              id=\"s3\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('s3')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('s3') && enterpriseConnectionList.includes('s3')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">Amazon S3</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Pull from cloud object storage</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <!-- BIG QUERY -->\n    <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('bigquery')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        [matTooltip]=\"_utils.getTootip('bigquery')\"\n        (click)=\"formUIHandler('bigquery')\"\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/bigquery.png\"\n              alt=\"bigquery\"\n              style=\"height: 70px\"\n            />\n            <mat-icon\n              id=\"s3\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('bigquery')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('bigquery') &&\n                enterpriseConnectionList.includes('bigquery')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">Google BigQuery</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">\n            Runs query from multicloud data warehouse\n          </p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n    <!-- SAP -->\n    <!-- <div class=\"col-md-4\">\n      <mat-card\n        class=\"source-type-card\"\n        style=\"pointer-events: none\"\n        [matTooltip]=\"_utils.getTootip('saphana')\"\n        #sftpCard\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img src=\"../../../../../assets/img/sap1.svg\" alt=\"saphana\" style=\"height: 43px\" />\n          </picture>\n          <h4 style=\"margin-top: 10px\">SAP S/4HANA</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Coming soon...</p>\n        </mat-card-content>\n      </mat-card>\n    </div> -->\n\n    <!-- IOTSENSE -->\n    <!-- <div class=\"col-md-4\">\n      <mat-card\n        [ngClass]=\"\n          connectionsToRestrict?.includes('iotsense')\n            ? 'source-type-card pro-restrict'\n            : 'source-type-card'\n        \"\n        style=\"pointer-events: none\"\n        [matTooltip]=\"_utils.getTootip('iotsense')\"\n        #sftpCard\n      >\n        <mat-card-content class=\"text-center\">\n          <br />\n          <picture class=\"img-thumbnail circle thumb96\"\n            ><img\n              src=\"../../../../../assets/img/iotsense.svg\"\n              alt=\"iotsense\"\n              style=\"height: 45px\"\n            />\n            <mat-icon\n              id=\"iotsense\"\n              [ngClass]=\"\n                connectionsToRestrict?.includes('iotsense')\n                  ? 'material-icons-outlined pro-flag'\n                  : 'd-none'\n              \"\n              [innerText]=\"\n                connectionsToRestrict?.includes('iotsense') &&\n                enterpriseConnectionList.includes('iotsense')\n                  ? 'ENT'\n                  : 'PRO'\n              \"\n            ></mat-icon>\n          </picture>\n          <h4 style=\"margin-top: 10px\">IoTSense</h4>\n          <p class=\"text-muted\" style=\"margin-top: 16px\">Coming soon...</p>\n        </mat-card-content>\n      </mat-card>\n    </div> -->\n  </div>\n</mat-dialog-content>\n\n<!-- BODY (forms) -->\n<mat-dialog-content\n  *ngIf=\"dialogData.formType === 'dataSource' && !showConnectionTypes\"\n  class=\"connection-form\"\n>\n  <h4 *ngIf=\"!isEdit\" class=\"d-flex align-items-center mt-3 font-weight-normal\">\n    <picture class=\"mr-3 img-thumbnail circle thumb96\">\n      <img [src]=\"iconType\" [alt]=\"sourceType\" [style]=\"getHeadingIconSize()\" />\n    </picture>\n    {{ formHeading }}\n  </h4>\n  <hr *ngIf=\"!isEdit\" />\n  <!-- File upload form selector -->\n  <div class=\"mt-4\" *ngIf=\"sourceType === 'upload'\">\n    <app-file-upload-form\n      (goBackFlag)=\"showConnectionTypes = $event\"\n      [dataGroupsArray]=\"dialogData.dataGroups\"\n      [currentDataGroup]=\"dialogData.currentDataGroup\"\n    ></app-file-upload-form>\n  </div>\n  <!-- Databases (MYSQL, PGSQL, MSSQL), SNOWFLAKE, BIGQUERY form selector -->\n  <div\n    class=\"mt-4\"\n    *ngIf=\"\n      sourceType === 'mysql' ||\n      sourceType === 'mssql' ||\n      sourceType === 'postgresql' ||\n      sourceType === 'snowflake' ||\n      sourceType === 'bigquery'\n    \"\n  >\n    <app-database-form\n      (goBackFlag)=\"showConnectionTypes = $event\"\n      [dataGroupsArray]=\"dialogData.dataGroups\"\n      [schedularsArray]=\"dialogData.schedulars\"\n      [sourceType]=\"sourceType\"\n      [data]=\"dialogData.data\"\n      [currentDataGroup]=\"dialogData.currentDataGroup\"\n    ></app-database-form>\n  </div>\n  <!-- SFTP, URL, S3 form selector -->\n  <div class=\"mt-4\" *ngIf=\"sourceType === 'sftp' || sourceType === 'url' || sourceType === 's3'\">\n    <app-sftp-and-url-form\n      (goBackFlag)=\"showConnectionTypes = $event\"\n      [dataGroupsArray]=\"dialogData.dataGroups\"\n      [schedularsArray]=\"dialogData.schedulars\"\n      [sourceType]=\"sourceType\"\n      [data]=\"dialogData.data\"\n      [currentDataGroup]=\"dialogData.currentDataGroup\"\n    ></app-sftp-and-url-form>\n  </div>\n</mat-dialog-content>\n\n<!-- BODY (data group) -->\n<mat-dialog-content\n  *ngIf=\"dialogData.formType === 'dataGroup' || !dialogData.formType\"\n  class=\"mat-typography\"\n>\n  <mat-progress-spinner\n    *ngIf=\"showSpinner\"\n    class=\"spinner\"\n    [color]=\"color\"\n    [mode]=\"mode\"\n    [diameter]=\"diameter\"\n  >\n  </mat-progress-spinner>\n  <form [formGroup]=\"dataGroupForm\" role=\"form\" class=\"form-validate\" name=\"dataGroupForm\">\n    <!-- Folder name input -->\n    <div class=\"form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label for=\"name\">Folder name</mat-label>\n        <input\n          matInput\n          type=\"text\"\n          name=\"name\"\n          formControlName=\"name\"\n          id=\"name\"\n          placeholder=\"Enter folder name\"\n          autocomplete\n          required\n        />\n        <mat-error\n          *ngIf=\"\n            dataGroupForm.get('name').hasError('required') &&\n            (dataGroupForm.get('name').dirty || dataGroupForm.get('name').touched)\n          \"\n          >Folder name is required.</mat-error\n        >\n        <mat-error *ngIf=\"dataGroupForm.get('name').hasError('pattern')\"\n          >Only alphanumeric characters are allowed.\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <!-- Select parent folder name -->\n    <div class=\"form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select parent folder</mat-label>\n        <mat-select formControlName=\"parentId\" required>\n          <mat-option *ngFor=\"let folder of dialogData.dataGroups\" [value]=\"folder._id\">{{\n            folder.name\n          }}</mat-option>\n        </mat-select>\n        <mat-error\n          *ngIf=\"\n            dataGroupForm.get('parentId').hasError('required') &&\n            (dataGroupForm.get('parentId').dirty || dataGroupForm.get('parentId').touched)\n          \"\n          >Parent name is required.</mat-error\n        >\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<!-- DIVIDERS -->\n<hr *ngIf=\"dialogData.formType === 'dataGroup' || !dialogData.formType\" />\n<hr *ngIf=\"dialogData.formType === 'dataSource' && showConnectionTypes\" />\n\n<!-- FOOTER -->\n<!-- BUTTONS (data sources) -->\n<mat-dialog-actions\n  *ngIf=\"dialogData.formType === 'dataSource' && showConnectionTypes\"\n  class=\"justify-content-end m-auto\"\n>\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n</mat-dialog-actions>\n<!-- BUTTONS (data group) -->\n<mat-dialog-actions\n  *ngIf=\"dialogData.formType === 'dataGroup' || !dialogData.formType\"\n  class=\"justify-content-end m-auto\"\n>\n  <button mat-stroked-button (click)=\"closeModal()\">Cancel</button>\n  <button\n    mat-flat-button\n    [disabled]=\"dataGroupForm.invalid\"\n    class=\"btn-primary\"\n    type=\"submit\"\n    (click)=\"onSubmitDataGroup(dataGroupForm.value)\"\n  >\n    {{ isEdit ? 'Update' : 'Create' }}\n  </button>\n</mat-dialog-actions>\n","import { Component, ElementRef, Inject, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subscription } from 'rxjs';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { DataService } from '../../data.service';\nimport { DataConnectionComponent } from '../data-connection.component';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-dialog-handler',\n  templateUrl: './dialog-handler.component.html',\n  styleUrls: ['./dialog-handler.component.scss'],\n})\nexport class DialogHandlerComponent implements OnInit {\n  // list of the available connection labels\n  proConnectionList: Array<string> = null;\n  enterpriseConnectionList: Array<string> = null;\n  connectionsToRestrict: Array<string> = null;\n  allConnectionsList: Array<string> = null;\n\n  // saas variables\n  allowedNoOfRows: number = 0;\n  allowedNoOfColumns: number = 0;\n  appType: string = environment.appType;\n\n  /** Progress spinner settings */\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n  exportProjectDiameter = 50;\n\n  /** Form Groups */\n  fileUploadForm: FormGroup;\n  dataGroupForm: FormGroup;\n\n  /** Subscription variables */\n  dataConnection$: Subscription;\n\n  showSpinner: boolean = false;\n  isEdit: boolean = false;\n  connectionIdToUpdate: string;\n  showConnectionTypes: boolean = true;\n  formHeading: string;\n  iconType: string;\n  sourceType: string;\n  project: any;\n  dialogHeading: string;\n  user: any;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    _fb: FormBuilder,\n    private _data: DataService,\n    private _toaster: ToastrService,\n    private dialogRef: MatDialogRef<DataConnectionComponent>,\n    private _localStorage: LocalStorageService,\n    public _utils: UtilsService,\n    private renderer: Renderer2,\n    private _snackbar: MatSnackBar\n  ) {\n    this.user = this._localStorage.getItem('user');\n    this.enterpriseConnectionList = this.user?.psFeatures?.enterpriseConnectionList || [];\n    this.allConnectionsList = this.user?.psFeatures?.allConnectionsList || [];\n    this.allowedNoOfColumns = this.user?.psFeatures?.allowedNoOfColumns;\n    this.allowedNoOfRows = this.user?.psFeatures?.allowedNoOfRows;\n    /** Form instances */\n    this.fileUploadForm = _fb.group({\n      name: ['', Validators.required],\n    });\n    this.dataGroupForm = _fb.group({\n      name: ['', [Validators.required, Validators.pattern('^[^\\\\s][A-Za-z0-9_ ]+$')]],\n      parentId: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    this.project = this._localStorage.getItem('project');\n    this.dialogData.formType != 'dataSource' && this.formUIHandler(this.dialogData.formType);\n    switch (this.dialogData.formType) {\n      case 'dataSource':\n        this.dialogHeading = 'Data Source';\n        this.showConnectionTypes = true;\n        // init functions for the data connection dialog.\n        // console.log(\n        //   \"this is connection data : \",\n        //   this.dialogData?.allowedConnectionsList\n        // );\n        environment.appType === 'saas' &&\n          !this.user?.roles?.includes('super_admin') &&\n          !this.user?.roles?.includes('admin') &&\n          this.setRestrictions(this.dialogData?.allowedConnectionsList);\n        break;\n      case 'mysql':\n      case 'mssql':\n      case 'postgresql':\n      case 'sftp':\n      case 'url':\n      case 's3':\n      case 'snowflake':\n      case 'bigquery':\n        this.sourceType = this.dialogData.formType;\n        this.dialogData.formType = 'dataSource';\n        this.showConnectionTypes = false;\n      case 'dataGroup':\n        this.showConnectionTypes = false;\n        this.prefillDataGroupForm(this.dialogData.data);\n        break;\n      default:\n        this.prefillDataGroupForm(this.dialogData.data);\n    }\n  }\n\n  async setRestrictions(allowedConnectionList: Array<string>): Promise<any> {\n    //thinking of it not yet completed\n    this.connectionsToRestrict = this.allConnectionsList.filter(\n      (item) => !allowedConnectionList.includes(item)\n    );\n    this.proConnectionList = this.connectionsToRestrict.filter(\n      (val) => !this.enterpriseConnectionList.includes(val)\n    );\n    // console.log(\n    //   \"hi i m inside connections to restrict : \",\n    //   this.connectionsToRestrict,\n    //   this.proConnectionList,\n    //   this.enterpriseConnectionList\n    // );\n  }\n\n  /**\n   * Prefill the data group form for edit functionality\n   * @param connectionData selected data group details\n   */\n  prefillDataGroupForm(dataGroupData: any): void {\n    if (dataGroupData) {\n      this.isEdit = true;\n      this.connectionIdToUpdate = dataGroupData._id;\n      this.dataGroupForm.patchValue({\n        name: dataGroupData.name,\n        parentId: dataGroupData.parentId,\n      });\n    } else {\n      this.dataGroupForm.get('parentId').setValue(this.dialogData.currentDataGroup);\n      this.dataGroupForm.get('name').reset();\n      this.isEdit = false;\n    }\n  }\n\n  /**\n   * Handles the data group submit functionality as per the operation\n   * @param formValue\n   */\n  onSubmitDataGroup(formValue: any): void {\n    if (this.isEdit) {\n      this.updateDataGroupHandler(formValue);\n    } else {\n      this.createDataGroupHandler(formValue);\n    }\n  }\n\n  /**\n   * Updates the data group details\n   * @param formValue\n   */\n  updateDataGroupHandler(formValue: any): void {\n    delete this.dialogData.data.name;\n    let reqObj: any = { ...this.dialogData.data, name: formValue.name };\n    this.dataConnection$ = this._data.updateDataGroup(reqObj).subscribe(\n      (res: any) => {\n        if (res) {\n          this._toaster.success('Folder name updated successfully', 'Data Connection');\n          this.closeModal(res);\n        }\n      },\n      (err: Error) => {\n        this._toaster.error('Server Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Creates a new folder\n   * @param formValue\n   */\n  createDataGroupHandler(formValue: any): void {\n    let reqObj: any = { ...formValue, projectId: this.project._id };\n    this.dataConnection$ = this._data.createNewDataGroup(reqObj).subscribe(\n      (res: any) => {\n        if (res) {\n          this._toaster.success(`${res.name} folder created successfully`, 'Data Connection');\n          this.closeModal(res);\n        }\n      },\n      (err: Error) => {\n        this._toaster.error('Server Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Headings and icons handler for forms as per the type\n   * @param {*} type - upload, mysql, mssql, postgresql, url, sftp\n   */\n  formUIHandler(type: string): void {\n    if (\n      environment.appType === 'enterprise' ||\n      this.user?.roles?.includes('super_admin') ||\n      this.user?.roles?.includes('admin') ||\n      (this.connectionsToRestrict && !this.connectionsToRestrict.includes(type))\n    ) {\n      this.showConnectionTypes = false;\n      this.sourceType = type;\n      switch (type) {\n        case 'upload':\n          this.formHeading = 'Upload a file';\n          this.iconType = '../../../../../assets/img/icons/upload.svg';\n          break;\n        case 'mysql':\n          this.formHeading = 'Pull data from MYSQL server';\n          this.iconType = '../../../../../assets/img/icons/mysql.svg';\n          break;\n        case 'mssql':\n          this.formHeading = 'Pull data from MSSQL server';\n          this.iconType = '../../../../../assets/img/icons/mssql.svg';\n          break;\n        case 'postgresql':\n          this.formHeading = 'Pull data from PostgreSQl server';\n          this.iconType = '../../../../../assets/img/icons/postgresql.svg';\n          break;\n        case 'snowflake':\n          this.formHeading = 'Pull from data cloud';\n          this.iconType = '../../../../../assets/img/snow.png';\n          break;\n        case 'sftp':\n          this.formHeading = 'Pull data from SFTP server';\n          this.iconType = '../../../../../assets/img/icons/sftp.svg';\n          break;\n        case 'url':\n          this.formHeading = 'Data Downloader (Note: Works for dataset < 2MB)';\n          this.iconType = '../../../../../assets/img/icons/url.svg';\n          break;\n        case 's3':\n          this.formHeading = 'Pull data from Amazon S3 server';\n          this.iconType = '../../../../../assets/img/s3.svg';\n          break;\n        case 'bigquery':\n          this.formHeading = 'Pull data from Google BigQuery';\n          this.iconType = '../../../../../assets/img/bigquery.png';\n          break;\n      }\n    } else {\n      (this.proConnectionList?.includes(type) || this.enterpriseConnectionList?.includes(type)) &&\n        this._snackbar.open('Selected feature is under premium subscription ', 'OK', {\n          horizontalPosition: 'right',\n          verticalPosition: 'bottom',\n        });\n    }\n  }\n\n  /**\n   * Returns the style as per the source type\n   * @returns\n   */\n  getHeadingIconSize(): string {\n    switch (this.sourceType) {\n      case 'upload':\n        return 'height: 20px; width:20px';\n      case 'mysql':\n        return 'height: 20px; width:20px';\n\n      case 'mssql':\n        return 'height: 20px; width:20px';\n\n      case 'postgresql':\n        return 'height: 20px; width:20px';\n\n      case 'snowflake':\n        return 'height: 20px; width:20px';\n\n      case 'sftp':\n        return 'height: 20px; width:20px';\n\n      case 'url':\n        return 'height: 20px; width:20px';\n\n      case 's3':\n        return 'height: 20px; width:20px';\n\n      case 'bigquery':\n        return 'height: 20px; width:20px';\n    }\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this.dialogRef.close(data);\n  }\n\n  /**\n   * Unsubscribes the subscriptions, only if they were subscribed\n   */\n  ngOnDestroy() {\n    if (this.dataConnection$) {\n      this.dataConnection$.unsubscribe();\n    }\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <i class=\"far fa-folder folder-icon\"></i>\n      </div>\n      <mat-card-title>\n        <h3\n          [class]=\"breadcrumbArray.length ? 'heading-with-breadcrumb' : 'heading-title'\"\n          [matTooltip]=\"_utils.getTootip('dataConnections')\"\n          (click)=\"breadcrumbHandler('', true)\"\n          style=\"cursor: pointer\"\n        >\n          Data Connections\n        </h3>\n        <!-- Bread crumbs -->\n        <div *ngFor=\"let crumb of breadcrumbArray; last as last\" class=\"d-flex align-items-center\">\n          <!-- ICON (chevron) -->\n          <mat-icon class=\"align-middle\">chevron_right</mat-icon>\n          <!-- LABEL (breadcrumb name) -->\n          <h3\n            [class]=\"last ? 'breadcrumb-name' : 'heading-with-breadcrumb ml-0'\"\n            (click)=\"breadcrumbHandler(crumb, true)\"\n          >\n            {{ crumb.name }}\n          </h3>\n        </div>\n      </mat-card-title>\n      <!-- Buttons -->\n      <span class=\"ml-auto\">\n        <button\n          type=\"button\"\n          [matTooltip]=\"_utils.getTootip('createDataConnections')\"\n          mat-raised-button\n          *ngIf=\"fArr && fArr.length > 0\"\n          class=\"bg-primary\"\n          (click)=\"openModalHandler('dataSource')\"\n          style=\"float: right\"\n        >\n          Data Sources\n        </button>\n        <button\n          type=\"button\"\n          [matTooltip]=\"'Choose and import sample datasets.'\"\n          mat-raised-button\n          class=\"bg-primary mr-3\"\n          style=\"float: right\"\n          (click)=\"openDatasetModal(importDataset)\"\n        >\n          Sample Datasets\n        </button>\n        <button\n          type=\"button\"\n          [matTooltip]=\"_utils.getTootip('createDataGroup')\"\n          mat-stroked-button\n          (click)=\"openModalHandler('dataGroup')\"\n          style=\"float: right; margin-right: 15px\"\n        >\n          Create Folder\n        </button>\n      </span>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- WIDGET (new user) -->\n  <mat-card *ngIf=\"fArr && fArr.length === 0\" class=\"first-user-widget\">\n    <mat-card-content class=\"px-5 py-3\">\n      <div class=\"row align-items-center\">\n        <div class=\"col-md-7 align-middle p-lg\">\n          <h3 style=\"font-size: 22px\">Hi {{ user.displayName }}!</h3>\n          <p style=\"font-size: 22px; margin: 30px 0\">\n            Data is my fuel, connect with wide variety of data sources to pull data and build a\n            fruitful model.\n          </p>\n          <div>\n            <button\n              type=\"button\"\n              mat-flat-button\n              class=\"btn-primary\"\n              style=\"font-size: 22px; height: 48px\"\n              (click)=\"openModalHandler('dataSource')\"\n            >\n              Data Sources\n            </button>\n          </div>\n        </div>\n        <div class=\"col-md-5 text-right\">\n          <img\n            src=\"../../../../assets/img/data-connection-infographic.svg\"\n            alt=\"Data Connection Types\"\n          />\n        </div>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- LIST (connections) -->\n  <mat-card *ngIf=\"fArr && fArr.length > 0\" class=\"connection-listing mt-5 p-4\">\n    <mat-card-content>\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event, 'connections')\" #input />\n      </mat-form-field>\n      <!-- TABLE -->\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        matSort\n        matSortActive=\"createdAt\"\n        matSortDirection=\"desc\"\n        matSortDisableClear\n        class=\"mt-2\"\n      >\n        <!-- Icons Column -->\n        <ng-container matColumnDef=\"icon\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row\">\n            <i [ngClass]=\"getIcon(row.type)\"></i>\n          </td>\n        </ng-container>\n\n        <!-- Sr. No Column -->\n        <!-- <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Sr. No.</th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 + conListPaginator.pageIndex * conListPaginator.pageSize }}\n          </td>\n        </ng-container> -->\n\n        <!-- Connection name Column -->\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td\n            mat-cell\n            *matCellDef=\"let row\"\n            [class.clickable]=\"!row.type\"\n            (click)=\"breadcrumbHandler(row)\"\n          >\n            {{ row.name }}\n          </td>\n        </ng-container>\n\n        <!-- Source Column -->\n        <ng-container matColumnDef=\"type\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Source</th>\n          <td\n            mat-cell\n            *matCellDef=\"let row\"\n            [class.clickable]=\"row.type !== 'upload' && row.type !== 'notebook'\"\n            (click)=\"openFilesModal(connectionFilesTemplate, row)\"\n          >\n            {{ row.type ? row.type : '-' }}\n          </td>\n        </ng-container>\n        <!--parsed-->\n        <ng-container matColumnDef=\"parsed\">\n          <th mat-header-cell *matHeaderCellDef>Parsed</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"actions-buttons\">\n              <div *ngIf=\"row.parsed == false\">\n                <button mat-icon-button (click)=\"showMessage(row.message)\">\n                  <i class=\"fa fa-times-circle danger-icon\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n              <div *ngIf=\"row.parsed == true\">\n                <button mat-icon-button (click)=\"showMessage(row.message)\">\n                  <i class=\"fa fa-check-circle success-icon\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n              <div *ngIf=\"row.parsed == undefined\">\n                <button mat-icon-button>-</button>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n        <!-- Schedular Column -->\n        <ng-container matColumnDef=\"schedular\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Schedule</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.schedule_id ? row.schedule_id.scheduleName : '-' }}\n          </td>\n        </ng-container>\n\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <div\n                *ngIf=\"\n                  row.type === 'url' ||\n                  row.type === 'mysql' ||\n                  row.type === 'mssql' ||\n                  row.type === 'sftp' ||\n                  row.type === 'postgresql' ||\n                  row.type === 's3' ||\n                  row.type === 'snowflake' ||\n                  row.type === 'bigquery'\n                \"\n              >\n                <!-- Spinner icon -->\n                <button\n                  mat-icon-button\n                  *ngIf=\"row.isPulling\"\n                  style=\"background-color: inherit; font-size: 18px\"\n                >\n                  <i class=\"fa fa-cog fa-spin\"></i>\n                </button>\n\n                <!-- Pull icon -->\n                <button\n                  [hidden]=\"row.isPulling\"\n                  mat-icon-button\n                  [matTooltip]=\"dataFlowToolTip\"\n                  [matTooltipClass]=\"isDataFlowFailed ? 'nodered-error-tooltip-custom' : ''\"\n                  (click)=\"pullConnectionData(row)\"\n                >\n                  <i class=\"fa fa-magnet\"></i>\n                  <i\n                    *ngIf=\"isDataFlowFailed && !callFromStartFlow && flowIdCheck == row.name\"\n                    class=\"nodered-error fas fa-exclamation-circle\"\n                  ></i>\n                </button>\n\n                <!-- Create indirect flow icon -->\n                <button\n                  mat-icon-button\n                  *ngIf=\"!row.dataflowId\"\n                  matTooltip=\"Data flow\"\n                  [routerLink]=\"['/project/data/dataflow']\"\n                  [queryParams]=\"{ connectionId: row._id }\"\n                  [disabled]=\"\n                    appType === 'saas' &&\n                    !user?.roles?.includes('super_admin') &&\n                    !user?.roles?.includes('admin')\n                  \"\n                >\n                  <i\n                    matBadge\n                    [matBadgeIcon]=\"'ENT'\"\n                    matBadgeOverlap=\"false\"\n                    [ngClass]=\"\n                      appType === 'enterprise' ||\n                      (appType === 'saas' &&\n                        (user?.roles?.includes('super_admin') || user?.roles?.includes('admin')))\n                        ? ''\n                        : 'disable-Btn'\n                    \"\n                    class=\"fa fa-random\"\n                  ></i>\n                </button>\n\n                <!-- Open the flow editor to edit -->\n                <button\n                  mat-icon-button\n                  *ngIf=\"row.dataflowId\"\n                  matTooltip=\"Data flow\"\n                  [routerLink]=\"['/project/data/dataflow']\"\n                  [queryParams]=\"{ dataFlowId: row.dataflowId }\"\n                >\n                  <i class=\"fa fa-random\"></i>\n                </button>\n              </div>\n\n              <!-- Download file icon -->\n              <button\n                mat-icon-button\n                *ngIf=\"row.type === 'upload' || row.type === 'notebook'\"\n                matTooltip=\"Download file\"\n                class=\"text-value\"\n                (click)=\"downloadFile(row)\"\n              >\n                <i class=\"fa fa-download\"></i>\n              </button>\n              <!-- Edit connection details -->\n              <div\n                *ngIf=\"\n                  row.type === 'url' ||\n                  row.type === 'mysql' ||\n                  row.type === 'mssql' ||\n                  row.type === 'sftp' ||\n                  row.type === 'postgresql' ||\n                  row.type === 's3' ||\n                  row.type === 'snowflake' ||\n                  row.type === 'bigquery'\n                \"\n              >\n                <!-- Edit connection icon -->\n                <button mat-icon-button matTooltip=\"Edit\" (click)=\"openModalHandler(row.type, row)\">\n                  <i class=\"fa fa-edit\"></i>\n                </button>\n              </div>\n\n              <!-- Delete icon -->\n              <button\n                class=\"delete-button\"\n                matTooltip=\"Delete\"\n                mat-icon-button\n                (click)=\"deleteHandler(row._id, row.type)\"\n              >\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{ input.value }}\"</td>\n        </tr>\n      </table>\n      <!-- Paginator -->\n      <mat-paginator\n        #conListPaginator\n        class=\"mt-2\"\n        [pageSizeOptions]=\"pageSizeOptions\"\n      ></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n<!-- Connection files listing modal -->\n<ng-template #connectionFilesTemplate>\n  <div class=\"connection-listing\">\n    <h2 mat-dialog-title>Files</h2>\n    <mat-dialog-content>\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event, 'connectionFiles')\" #input />\n      </mat-form-field>\n      <table\n        #ConnFilesSort=\"matSort\"\n        mat-table\n        [dataSource]=\"filesDataSource\"\n        matSort\n        matSortActive=\"createdAt\"\n        matSortDirection=\"desc\"\n        matSortDisableClear\n      >\n        <!-- Sr. No Column -->\n        <!-- <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Sr. No.</th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 + ConnFilesPaginator.pageIndex * ConnFilesPaginator.pageSize }}\n          </td>\n        </ng-container> -->\n        <!-- File name Column -->\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"parsed\">\n          <th mat-header-cell *matHeaderCellDef>Parsed</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"actions-buttons\">\n              <div *ngIf=\"row.parsed == false\">\n                <button mat-icon-button (click)=\"showMessage(row.message)\">\n                  <i class=\"fa fa-times-circle danger-icon\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n              <div *ngIf=\"row.parsed == true\">\n                <button mat-icon-button (click)=\"showMessage(row.message)\">\n                  <i class=\"fa fa-check-circle success-icon\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n              <div *ngIf=\"row.parsed == undefined\">\n                <button mat-icon-button>-</button>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <p>{{ row.dataflowId }}</p>\n              <!-- Execute data flow file icon -->\n              <button\n                *ngIf=\"isDataFlowPresent\"\n                [matTooltip]=\"urlFlowPlayBtnToolTip\"\n                [matTooltipClass]=\"\n                  isDataFlowFailed && callFromStartFlow && flowIdCheck == row.name\n                    ? 'nodered-error-tooltip-custom'\n                    : ''\n                \"\n                mat-icon-button\n                class=\"text-value\"\n                (click)=\"executeDataFlow(row)\"\n              >\n                <i class=\"fa fa-play\"></i>\n                <i\n                  *ngIf=\"isDataFlowFailed && callFromStartFlow && flowIdCheck == row.name\"\n                  class=\"nodered-error fas fa-exclamation-circle\"\n                ></i>\n              </button>\n\n              <!-- Download file icon -->\n              <button\n                mat-icon-button\n                class=\"text-value\"\n                matTooltip=\"Download File\"\n                (click)=\"downloadFile(row)\"\n              >\n                <i class=\"fa fa-download\"></i>\n              </button>\n\n              <!-- Delete icon -->\n              <button\n                class=\"delete-button\"\n                mat-icon-button\n                matTooltip=\"Click to remove the file.\"\n                (click)=\"deleteRawFile(row._id, row.connId, 'connectionFile')\"\n              >\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumnsFiles\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumnsFiles\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{ input.value }}\"</td>\n        </tr>\n      </table>\n\n      <!-- Paginator -->\n      <mat-paginator #ConnFilesPaginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n    </mat-dialog-content>\n    <mat-dialog-actions class=\"justify-content-end m-auto\">\n      <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n    </mat-dialog-actions>\n  </div>\n</ng-template>\n\n<!-- Import sample dataset dialog -->\n<ng-template #importDataset>\n  <h1 mat-dialog-title>Sample Dataset</h1>\n  <mat-dialog-content class=\"mat-typography\">\n    <div class=\"d-flex flex-wrap justify-content-start my-4 row\">\n      <div class=\"col-md-4 mb-4 d-flex\" *ngFor=\"let temp of allSampleDatasets\">\n        <mat-card\n          class=\"template-proj-card d-flex flex-column\"\n          style=\"background-color: whitesmoke; width: 350px\"\n        >\n          <mat-card-header>\n            <div mat-card-avatar class=\"example-header-image\">\n              <mat-icon style=\"font-size: 35px; color: orange\">dashboard</mat-icon>\n            </div>\n            <mat-card-title>\n              <h3>{{ temp.name | titlecase }}</h3>\n            </mat-card-title>\n          </mat-card-header>\n          <mat-card-content class=\"flex-grow-1\">\n            <h3>\n              Type :\n              <label>\n                {{\n                  temp.domain === 'predictive_modeling'\n                    ? 'Predictive Modeling'\n                    : (temp.domain | titlecase)\n                }}</label\n              >\n            </h3>\n            <p class=\"font-weight-normal\">{{ temp.description }}</p>\n          </mat-card-content>\n          <mat-card-actions>\n            <button\n              mat-stroked-button\n              class=\"mb-3 mr-3\"\n              matTooltip=\"Click to import dataset\"\n              style=\"float: right; font-size: medium\"\n              (click)=\"importSampleDataset(temp.file)\"\n            >\n              Import&nbsp;<i class=\"fas fa-file-import\"></i>\n            </button>\n          </mat-card-actions>\n        </mat-card>\n      </div>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close color=\"basic\">Close</button>\n  </mat-dialog-actions>\n</ng-template>\n","import { SchedularService } from './../../dashboard/schedular/schedular.service';\nimport { SpinnerService } from './../../../shared/spinner.service';\nimport { Component, OnDestroy, OnInit, ViewChild, TemplateRef } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DialogHandlerComponent } from './dialog-handler/dialog-handler.component';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { DataService } from '../data.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { environment } from 'src/environments/environment';\nimport { SampleDatasetService } from '../../dashboard/sample-dataset/sample-dataset.service';\nimport { HttpErrorResponse, HttpEventType } from '@angular/common/http';\nimport { toasterMsg } from 'src/app/shared/static-data';\n\nconst swal = require('sweetalert');\n\n@Component({\n  selector: 'app-data-connection',\n  templateUrl: './data-connection.component.html',\n  styleUrls: ['./data-connection.component.scss'],\n  // encapsulation: ViewEncapsulation.None,\n})\nexport class DataConnectionComponent implements OnInit, OnDestroy {\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  filesDataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  // fileUploadRef: any;\n  @ViewChild(MatPaginator) set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild(MatSort) set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n  @ViewChild('ConnFilesPaginator') set connFilesPaginator(value: MatPaginator) {\n    this.filesDataSource.paginator = value;\n  }\n  @ViewChild('ConnFilesSort') set connFilesSort(value: MatSort) {\n    this.filesDataSource.sort = value;\n  }\n  snackBarRef: MatSnackBarRef<any>;\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n  displayedColumnsFiles: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  project: any;\n  dataGroupsList: Array<any>;\n  connectionsList: any;\n  rawfilesList: any;\n  rawFilesList: any;\n  filesData: any;\n  fArr: Array<any>;\n  parentFolderData: Array<any>;\n  dataList: Array<any>;\n  schedularArray: Array<any>;\n  tempArray: Array<any> = [];\n  user: any;\n  breadcrumbArray: Array<any> = [];\n  breadArray: Array<any> = [];\n  currentDataGroup: string;\n  dataListArray: Array<any> = [];\n  selectedConnToPull: string;\n  isDataFlowFailed: boolean = false;\n  isDataFlowPresent: string;\n  count: number = 0;\n  callFromStartFlow: boolean = false;\n  flowIdCheck: string = null;\n  dataFlowToolTip: string = 'Pull data';\n  urlFlowPlayBtnToolTip: string = 'Execute data flow';\n  // this is for the restrictions\n  planType: string = null;\n  allowedConnectionsList: Array<string> = null;\n  appType: string = environment.appType;\n  allSampleDatasets: Array<any>;\n  filterSampleDatasets: Array<any>;\n  percentDone: number = 0;\n  datasetDialog: MatDialogRef<DataConnectionComponent>;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dialog: MatDialog,\n    private _schedular: SchedularService,\n    private _window: Window,\n    private _snackBar: MatSnackBar,\n    private _socket: SocketIoService,\n    public _utils: UtilsService,\n    private _sampleDataset: SampleDatasetService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.allowedConnectionsList = this.user?.psFeatures?.allowedFeaturesList || [];\n    this.displayedColumns = [\n      // 'srNo',\n      'icon',\n      'name',\n      'parsed',\n      'type',\n      'schedular',\n      'createdAt',\n      'actions',\n    ];\n    this.displayedColumnsFiles = ['name', 'parsed', 'createdAt', 'actions'];\n  }\n\n  /**\n   * Initializes page with all the required data\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.initSocket();\n    this.getAllConnectionsData();\n    this.getDataGroupList();\n    this.getAllSampleDatasets();\n    this.schedularList();\n  }\n\n  /**\n   * Fetches all sample dataset list from DB by triggering API\n   */\n  getAllSampleDatasets(): void {\n    // API call\n    this._sampleDataset\n      .getAllDatasets()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res.data) {\n            this.allSampleDatasets = res.data;\n            /**\n             * Sorts the sample projects list by data in ascending order\n             */\n            this.filterSampleDatasets = this.allSampleDatasets.sort((a: any, b: any) => {\n              return new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf();\n            });\n            this._spinner.stopSpinner();\n          }\n        },\n        (e: any) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(e.error.message || 'Server Error', 'Project Management');\n        }\n      );\n  }\n\n  /**\n   * Imports the sample dataset\n   * @param fileName\n   */\n  importSampleDataset(fileName: any): void {\n    this._spinner.showSpinner();\n    // API call\n    // creating req object for the file upload.\n    let reqObj = {\n      encoding: 'utf_8',\n      projectId: this.project._id,\n      dataGroupId: this.currentDataGroup || this.dataList[0]._id,\n      dataFolderName: this.currentDataGroup || this.dataList[0]._id,\n      parentFolderName: '',\n      file: fileName,\n      uploadType: 'importDataset',\n    };\n    this._data.uploadFile(reqObj).subscribe(\n      (resp) => {\n        this.datasetDialog.close();\n        this._spinner.stopSpinner();\n        this._utils.showSnackBar(toasterMsg.fileUpload);\n      },\n      (err: HttpErrorResponse) => {\n        this._toaster.error(err.error.message || 'Server Error', 'Data Connection');\n        this._spinner.stopSpinner();\n        this._utils.dismissSnackBar();\n      }\n    );\n  }\n\n  /**\n   * Fetches the connections list from the DB\n   */\n  getAllConnectionsData(): void {\n    let dataFilterArray: Array<any> = [];\n    this.dataListArray.length = 0;\n    this.breadArray.length = 0;\n    this.breadcrumbArray.length = 0;\n    this._data\n      .getAllConnectionsData(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.dataGroupsList = res[0].datagroupList;\n            this.connectionsList = res[0].connection;\n            this.rawFilesList = res[0].filesdata;\n            this.filesData = res[0].pklfilesdata;\n            this.dataListArray = this.dataListArray.concat(this.dataGroupsList, this.connectionsList, this.rawFilesList);\n            dataFilterArray = this.dataListArray.filter(\n              (temp) => !Object.keys(temp).includes('parentId') && !Object.keys(temp).includes('datagroup_id')\n            );\n            dataFilterArray = dataFilterArray[0]._id;\n            let data = this.dataListArray.filter(\n              (temp) => temp.type !== 'upload_retrained' && (temp.parentId === dataFilterArray || temp.datagroup_id === dataFilterArray)\n            );\n            var filesFilter = data.filter((temp) => !Object.keys(temp).includes('connId'));\n            this.parentFolderData = filesFilter;\n            this.fArr = filesFilter;\n            // Assign the data to the dataSource for the table to show records\n            this.dataSource.data = this.fArr;\n            this.dataSource._updateChangeSubscription();\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n            this._toaster.error('Cannot fetch connections list', 'Data Connection');\n          }\n          this._utils.dismissSnackBar();\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  showMessage(message) {\n    this.snackBarRef = this._snackBar.open(message, 'OK', {\n      verticalPosition: 'bottom',\n      horizontalPosition: 'end',\n    });\n  }\n  /**\n   * Fetches all the data groups list\n   */\n  getDataGroupList(): void {\n    this._data\n      .getDataGroupsList(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.dataList = res;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Fetches all the schedulars list\n   */\n  schedularList(): void {\n    this._schedular\n      .getSchedularsList()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.schedularArray = res;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Opens the select dataset dialog\n   * @param datasetModal modal reference\n   */\n  openDatasetModal(datasetModal: TemplateRef<any>) {\n    this.datasetDialog = this._dialog.open(datasetModal, {\n      minWidth: '50vw',\n      maxWidth: '75vw',\n    });\n  }\n\n  /**\n   * Handles the modal opening operation\n   * @param type dataSource/dataGroup\n   */\n  openModalHandler(type: string, data?: any): void {\n    const dialogRef = this._dialog.open(DialogHandlerComponent, {\n      minWidth: '60vw',\n      maxWidth: '60vw',\n      data: {\n        formType: type,\n        dataGroups: this.dataList,\n        schedulars: this.schedularArray,\n        data: data,\n        currentDataGroup: this.currentDataGroup || this.dataList[0]._id,\n        // this is the allowed connection list which we are passing to data connection dialog\n        allowedConnectionsList: this.allowedConnectionsList || [],\n      },\n    });\n    dialogRef.afterClosed().subscribe((data: any) => {\n      if (data) {\n        // this.fileUploadRef = data.fileUploadRef;\n        this.breadArray.length = 0;\n        this.getAllConnectionsData();\n        this.getDataGroupList();\n        this.schedularList();\n      }\n    });\n  }\n\n  /**\n   * Pulls the data for one selected connection at a time\n   * @param item\n   */\n  pullConnectionData(item: any): void {\n    this.isDataFlowFailed = false;\n    this.callFromStartFlow = false;\n    this.flowIdCheck = item.name;\n    this._utils.showSnackBar(toasterMsg.pullData);\n    this.selectedConnToPull = item._id;\n    /** Adds isPulling flag for the selected connection */\n    this.fArr = this.fArr.map((doc) => {\n      doc._id === item._id ? (doc.isPulling = true) : (doc.isPulling = false);\n      return doc;\n    });\n\n    // API call\n    this._data\n      .pullSingleData(item._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            // this.fArr = this.fArr.map((doc) => {\n            //   doc._id === item._id ? (doc.isPulling = false) : '';\n            //   return doc;\n            // });\n          } else {\n            this.fArr = this.fArr.map((doc) => {\n              doc._id === item._id ? (doc.isPulling = false) : '';\n              return doc;\n            });\n          }\n          // this._utils.dismissSnackBar();\n        },\n        (err: Error) => {\n          this._utils.dismissSnackBar();\n          this.fArr = this.fArr.map((doc) => {\n            doc._id === item._id ? (doc.isPulling = false) : '';\n            return doc;\n          });\n        }\n      );\n  }\n\n  /**\n   * Downloads the connection file\n   */\n  downloadFile(item: any): void {\n    this._window.open(`${environment.serverBaseUrl}/api/project/${this.project._id}/download/${item.name}`, '_blank');\n  }\n\n  /**\n   * Handles the delete operation to delete connection or datagroup\n   * @param {connection id} id\n   * @param {connection type} type\n   */\n  deleteHandler(id: string, type: string): void {\n    switch (type) {\n      case 'upload':\n      case 'notebook':\n      case 'connectionFile':\n        this.deleteRawFile(id, '', type);\n        break;\n      case 'mysql':\n      case 'mssql':\n      case 'postgresql':\n      case 'sftp':\n      case 'url':\n      case 's3':\n      case 'snowflake':\n      case 'bigquery':\n        this.deleteDataConnetion(id, type);\n        break;\n      default:\n        this.deleteDataGroup(id);\n    }\n  }\n\n  /**\n   * Deletes the upload and notebook files from DB\n   * @param id\n   * @param type\n   */\n  deleteRawFile(id: string, connId?: string, type?: string) {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this file!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      let filteredFiles: Array<any>;\n      if (isConfirm) {\n        this.breadArray.length = 0;\n        this._data\n          .deleteRawFile(this.project._id, id)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res: any) => {\n              if (res) {\n                this.getAllConnectionsData();\n                this._toaster.success('File deleted successfully', 'Data Connection');\n                if (type === 'connectionFile') {\n                  filteredFiles = this.rawFilesList.filter((item: any) => {\n                    if (item._id !== id && item.connId === connId) {\n                      return item;\n                    }\n                  });\n                  // Assign the data to the dataSource for the table to show records\n                  this.filesDataSource.data = filteredFiles;\n                  this.filesDataSource._updateChangeSubscription();\n                  this.filesDataSource.paginator = this.paginator;\n                  this.filesDataSource.sort = this.sort;\n                } else {\n                  filteredFiles = this.fArr.filter(function (item) {\n                    return item._id !== id;\n                  });\n                  // Assign the data to the dataSource for the table to show records\n                  this.dataSource.data = filteredFiles;\n                  this.dataSource._updateChangeSubscription();\n                  this.dataSource.paginator = this.paginator;\n                  this.dataSource.sort = this.sort;\n                }\n              } else {\n                this._toaster.error('Cannot delete file', 'Data Connection');\n              }\n            },\n            (err: Error) => {\n              this._toaster.error('Server Error', 'Data Connection');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Deletes the folder\n   * @param id\n   */\n  deleteDataGroup(dataId: string): void {\n    this.breadArray.length = 0;\n    let b: Array<any> = [];\n    let rFiles: Array<any> = [];\n    let pFiles: Array<any> = [];\n\n    let t = this.dataGroupsList.filter((item: any) => {\n      if (item.parentId === dataId || item._id === dataId) {\n        this.tempArray.push(item);\n      }\n      return item.parentId === dataId;\n    });\n\n    this.filterDataGroup(t);\n\n    this.connectionsList.map((item: any) => {\n      var itemfound = this.tempArray.find((docs: any) => {\n        return item.datagroup_id === docs._id;\n      });\n      if (itemfound !== undefined) {\n        let j = item;\n        b.push(j);\n      }\n    });\n\n    this.rawFilesList.map((data: any) => {\n      var item = this.tempArray.find((docs: any) => {\n        return data.datagroup_id == docs._id;\n      });\n      if (item !== undefined) {\n        let j = data;\n        rFiles.push(j);\n      }\n    });\n\n    this.filesData.map((data: any) => {\n      var item = this.tempArray.find((docs: any) => {\n        return data.datagroup_id == docs._id;\n      });\n      if (item !== undefined) {\n        var j = data;\n        pFiles.push(j);\n      }\n    });\n\n    /** Alert for confirmation */\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this data!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        let reqObj: any = {\n          projectId: this.project._id,\n          dataId: dataId,\n          datagroup: this.tempArray,\n          dataconnection: b,\n          rawFiles: rFiles,\n          files: pFiles,\n        };\n        this._data\n          .deleteDataGroup(this.project._id, dataId, reqObj)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res: any) => {\n              if (res) {\n                this._toaster.success(`Folder deleted successfully`, 'Data Connection');\n                this.fArr = this.fArr.filter((item: any) => {\n                  return item._id != dataId;\n                });\n                this.dataList = this.dataList.filter((item: any) => {\n                  return item._id != dataId;\n                });\n\n                // Assign the data to the dataSource for the table to show records\n                this.dataSource.data = this.fArr;\n                this.dataSource._updateChangeSubscription();\n                this.dataSource.paginator = this.paginator;\n                this.dataSource.sort = this.sort;\n              } else {\n                this._toaster.error('Cannot delete folder', 'Data Connection');\n              }\n            },\n            (err: Error) => {\n              this._toaster.error('Server Error', 'Data Connection');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Deletes the data connection from DB\n   * @param id\n   * @param type\n   */\n  deleteDataConnetion(id: string, type: string): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this data!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this.breadArray.length = 0;\n        this._data\n          .deleteDataConnection(this.project._id, id)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res: any) => {\n              if (res) {\n                this._toaster.success(`${type.toUpperCase()} connection deleted successfully`, 'Data Connection');\n                this.fArr = this.fArr.filter((item: any) => {\n                  return item._id != id;\n                });\n                // Assign the data to the dataSource for the table to show records\n                this.dataSource.data = this.fArr;\n                this.dataSource._updateChangeSubscription();\n                this.dataSource.paginator = this.paginator;\n                this.dataSource.sort = this.sort;\n              } else {\n                this._toaster.error('Cannot delete file', 'Data Connection');\n              }\n            },\n            (err: Error) => {\n              this._toaster.error('Server Error', 'Data Connection');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Opens the connection files modal pop-up\n   * @param type\n   * @param data\n   */\n  openFilesModal(connectionFilesTemplate: TemplateRef<any>, data: any): void {\n    this.isDataFlowPresent = data.dataflowId;\n    let filteredFiles: Array<any>;\n    if (data.type !== 'upload' && data.type !== 'notebook') {\n      filteredFiles = this.rawFilesList.filter((item: any) => {\n        if (item.connId === data._id && !item.isDeleted) {\n          return item;\n        }\n      });\n      // Assign the data to the dataSource for the table to show records\n      this.filesDataSource.data = filteredFiles;\n      this.filesDataSource._updateChangeSubscription();\n      this._dialog.open(connectionFilesTemplate, {\n        height: 'auto',\n        width: '60%',\n      });\n    }\n  }\n\n  /**\n   * Executes the data flow\n   * @param fileData\n   */\n  executeDataFlow(fileData: any): void {\n    this.callFromStartFlow = true;\n    this.flowIdCheck = fileData.name;\n    this._data\n      .executeDataFlow(this.project._id, fileData.connId, fileData.name)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this._toaster.success('Flow execution started', 'Data Connection');\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Handles the breadcrumbs\n   * @param dataGroupId\n   * @param name\n   * @param isChanged whether any breadcrumb is clicked to navigate\n   */\n  breadcrumbHandler(dataGroupDetails: any, isChanged?: boolean): void {\n    if (!dataGroupDetails.type) {\n      let dataGroupId = dataGroupDetails._id || dataGroupDetails.id;\n      this._spinner.showSpinner();\n      this.currentDataGroup = dataGroupId;\n      let data: Array<any> = [];\n      let filesFilter: Array<any> = [];\n      /** If bread crum is clicked, then navigates to selected folder else create new breadcrumb */\n      if (isChanged) {\n        let index = this.breadArray.findIndex((item) => {\n          return item.id == dataGroupId;\n        });\n        this.breadArray.splice(index + 1);\n        /** If clicked on root breadcrumb */\n        if (!dataGroupDetails) {\n          this.getAllConnectionsData();\n        }\n      } else {\n        this.breadArray.push({\n          id: dataGroupId,\n          name: dataGroupDetails.name,\n        });\n      }\n      this.breadcrumbArray = this.breadArray;\n      data = this.dataListArray.filter((item) => {\n        return item.parentId === dataGroupId || item.datagroup_id === dataGroupId;\n      });\n\n      filesFilter = data.filter((temp) => {\n        return !Object.keys(temp).includes('connId');\n      });\n      this.fArr = filesFilter;\n      // Assign the data to the dataSource for the table to show records\n      this.dataSource.data = filesFilter;\n      this.dataSource._updateChangeSubscription();\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n      this._spinner.stopSpinner();\n    }\n  }\n\n  /**\n   * Filtering required while deleting data group\n   * @param id\n   */\n  filterDataGroup(id: any): void {\n    let d: any;\n    for (var i = 0; i < id.length; i++) {\n      d = this.dataGroupsList.filter((item) => {\n        if (item.parentId == id[i]._id) {\n          this.tempArray.push(item);\n        }\n        return item.parentId == id[i]._id;\n      });\n      this.callRecursive(d);\n    }\n  }\n\n  /**\n   * Recursive function\n   * @param d\n   */\n  callRecursive(d: any): void {\n    if (d.length > 0) {\n      this.filterDataGroup(d);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Returns the icon class as per the connection type\n   * @param type\n   */\n  getIcon(type: string): string {\n    switch (type) {\n      case 'mysql':\n      case 'mssql':\n      case 'postgresql':\n      case 'sftp':\n      case 's3':\n      case 'snowflake':\n      case 'bigquery':\n        return 'fa fa-database icons';\n\n      case 'upload':\n      case 'notebook':\n        return 'fa fa-file-alt icons';\n\n      case 'url':\n        return 'fa fa-link icons';\n\n      default:\n        return 'fa fa-folder icons';\n    }\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event, tableName: string): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    if (tableName === 'connections') {\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n      if (this.dataSource.paginator) {\n        this.dataSource.paginator.firstPage();\n      }\n    } else if (tableName === 'connectionFiles') {\n      this.filesDataSource.filter = filterValue.trim().toLowerCase();\n      if (this.filesDataSource.paginator) {\n        this.filesDataSource.paginator.firstPage();\n      }\n    }\n  }\n\n  /**\n   * Initializes the socket to listen events when emmited\n   */\n  initSocket(): void {\n    // Listens to the pull data event\n    this._socket.listen('pullData').subscribe(\n      (res: any) => {\n        if (res.status === 'pull_success') {\n          this._utils.dismissSnackBar();\n          if (res.data.parsed) {\n            res.data.projectId === this.project._id && this._toaster.success('Data uploaded successfully', 'Data Connection');\n          } else {\n            res.data.projectId === this.project._id && this._toaster.info(res.data.message, 'Data Connection');\n          }\n          this.getAllConnectionsData();\n        } else {\n          // Stops the spinner of selected connection if error\n          this.fArr = this.fArr.map((doc) => {\n            if (doc._id === this.selectedConnToPull) {\n              doc.isPulling = false;\n              (doc.type === 'sftp' || doc.type === 's3') && res.status === 'No updated files'\n                ? this._toaster.info(res.status, 'Data Connection')\n                : this._toaster.error(res.status, 'Data Connection');\n            }\n            return doc;\n          });\n          res.status === 'No updated files'\n            ? this._toaster.info(res.status.message || res.status || 'Could not complete the operation', 'Data Connection')\n            : this._toaster.error(res.status.message || res.status || 'Could not complete the operation', 'Data Connection');\n          this._spinner.stopSpinner();\n          this._utils.dismissSnackBar();\n        }\n        this._utils.dismissSnackBar();\n        this._spinner.stopSpinner();\n      },\n      (err) => {\n        this._spinner.stopSpinner();\n        this._utils.dismissSnackBar();\n        this._toaster.error('Socket Error', 'Data Connection');\n      }\n    );\n\n    // Listens to node-red event\n    this._socket.listen('nodeRedFlowExecution').subscribe(\n      (res: any) => {\n        if (res.status === 'flow_execution_failed') {\n          this.isDataFlowFailed = true;\n          this.dataFlowToolTip = 'Data Flow Execution Failed';\n          this.urlFlowPlayBtnToolTip = 'Data Flow Execution Failed';\n        }\n        if (this.isDataFlowFailed) {\n          if (this.count < 1) {\n            this._toaster.error('Data Flow Execution Failed', 'Data Flow');\n          }\n          this.count++;\n        }\n        this._spinner.stopSpinner();\n      },\n      (err) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('pullData');\n    this._socket.removeListener('nodeRedFlowExecution');\n    this._utils.dismissSnackBar();\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<h2 mat-dialog-title>\n  {{ modalHeading }}\n  <small *ngIf=\"dialogData.type === 'preview'\">(Note: Preview of first 5 records only)</small>\n</h2>\n<!-- Merge form section -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'merge'\" class=\"mat-typography mt-4\">\n  <h4 class=\"selected-dataset\">\n    Selected Data Set :\n    <mat-chip-list class=\"ml-2\">\n      <mat-chip>{{ dialogData.data.name }}</mat-chip>\n    </mat-chip-list>\n  </h4>\n  <mat-progress-spinner *ngIf=\"showSpinner\" class=\"spinner\" [color]=\"color\" [mode]=\"mode\" [diameter]=\"diameter\">\n  </mat-progress-spinner>\n\n  <form [formGroup]=\"mergeForm\" role=\"form\" class=\"form-validate\" name=\"mergeForm\">\n    <!-- Select data set files dropdown -->\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label [matTooltip]=\"_utils.getTootip('selectDataSetEda')\">Select data set to merge</mat-label>\n          <mat-select formControlName=\"selectedDataset\" (selectionChange)=\"dataSetChanged($event.value)\" required>\n            <mat-option *ngFor=\"let file of dataSetList\" [value]=\"file._id\">{{\n              file.filename | dropFileExtension: file.fileSource\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              mergeForm.get('selectedDataset').hasError('required') &&\n              (mergeForm.get('selectedDataset').dirty || mergeForm.get('selectedDataset').touched)\n            \">Data set is required.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <!-- Merge type (radio) -->\n      <div class=\"col-md-5 form-group ml-1\">\n        <label id=\"project-type\">How do you want to merge data ?</label>\n        <mat-radio-group class=\"radio-group\" [(ngModel)]=\"mergeType\" (change)=\"mergeTypeChanged(mergeType)\"\n          [ngModelOptions]=\"{ standalone: true }\">\n          <mat-radio-button value=\"row\" [matTooltip]=\"_utils.getTootip('mergeDatasetRowWise')\">Row wise\n          </mat-radio-button>\n          <mat-radio-button value=\"column\" [matTooltip]=\"_utils.getTootip('mergeDatasetColumnWise')\">Column wise\n          </mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </div>\n\n    <!-- Join type (dropdown) -->\n    <div class=\"row\" *ngIf=\"\n        mergeType === 'column' && mergeForm.get('selectedDataset').value && commonColumns.length\n      \">\n      <div class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select join type</mat-label>\n          <mat-select formControlName=\"joinType\" required>\n            <mat-option *ngFor=\"let type of joinTypeArray\" [value]=\"type\">{{\n              type | titlecase\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              mergeForm.get('joinType').hasError('required') &&\n              (mergeForm.get('joinType').dirty || mergeForm.get('joinType').touched)\n            \">Join type is required.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div *ngIf=\"\n        mergeType === 'column' && mergeForm.get('selectedDataset').value && commonColumns.length\n      \" class=\"row\">\n      <!-- On which column -->\n      <div class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>On which column(s) you want to merge ?</mat-label>\n          <mat-select formControlName=\"commonColumn\" multiple>\n            <mat-option *ngFor=\"let col of commonColumns\" [value]=\"col.colName\">{{\n              col.colName\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              mergeForm.get('commonColumn').hasError('required') &&\n              (mergeForm.get('commonColumn').dirty || mergeForm.get('commonColumn').touched)\n            \">This field is required.</mat-error>\n        </mat-form-field>\n      </div>\n\n      <!-- Columns to merge (multi-select) -->\n      <div class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select column(s) to merge</mat-label>\n          <mat-select formControlName=\"columnsToMerge\" multiple>\n            <mat-option *ngFor=\"let col of avalialbleColumnsToMerge\" [value]=\"col.colName\">{{ col.colName }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              mergeForm.get('columnsToMerge').hasError('required') &&\n              (mergeForm.get('columnsToMerge').dirty || mergeForm.get('columnsToMerge').touched)\n            \">This field is required.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <mat-hint *ngIf=\"commonColumns && commonColumns.length === 0 && mergeType === 'column'\">Note : There are no common\n      columns to merge.</mat-hint>\n  </form>\n</mat-dialog-content>\n\n<!-- Preview data section -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'preview'\" class=\"mat-typography preview-data-section mb-3\">\n  <!-- <mat-form-field class=\"search-input\">\n    <mat-label>Search</mat-label>\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Enter the value\" #input />\n  </mat-form-field> -->\n  <ag-grid-angular #agGrid id=\"myGrid\" *ngIf=\"previewrowData\" class=\"ag-angle my-4\" [rowData]=\"previewrowData\"\n    [gridOptions]=\"gridOptions\" (gridReady)=\"gridReady($event)\">\n  </ag-grid-angular>\n\n  <!-- Paginator -->\n  <!-- <mat-paginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator> -->\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"justify-content-end m-auto\">\n  <button mat-stroked-button (click)=\"closeModal()\">Cancel</button>\n  <button *ngIf=\"dialogData.type === 'merge'\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    [disabled]=\"mergeForm.invalid\" (click)=\"onSubmitMerge(mergeForm.value)\">\n    Merge\n  </button>\n</mat-dialog-actions>","import { DataSetComponent } from '../data-set.component';\nimport { Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { Subscription } from 'rxjs';\nimport { DataService } from '../../data.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { GridOptions } from 'ag-grid-community';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\n\n@Component({\n  selector: 'app-data-set-dialog',\n  templateUrl: './data-set-dialog.component.html',\n  styleUrls: ['./data-set-dialog.component.scss']\n})\nexport class DataSetDialogComponent implements OnInit {\n\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  gridOptions: GridOptions;\n  resizeEvent = 'resize.ag-grid';\n  private gridApi;\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n\n  /** Progress spinner settings */\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n  exportProjectDiameter = 50;\n\n  /** Subscription variables */\n  dataConnection$: Subscription;\n\n  joinTypeArray: Array<string> = ['inner', 'left', 'right', 'outer'];\n  mergeForm: FormGroup;\n  showPreview: boolean = false;\n  showReport: boolean = false;\n  showMergeForm: boolean = false;\n  modalHeading: string;\n  project: any;\n  parentFile: any;\n  showSpinner: boolean = false;\n  dataSetList: Array<any> = [];\n  mergeType: string = 'row';\n  avalialbleColumnsToMerge: Array<any>;\n  commonColumns: Array<any>;\n  mergeDataSet: any;\n  gridColumnApi: any;\n  previewrowData: any;\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _spinner: SpinnerService, private _fb: FormBuilder, private _data: DataService, private _toaster: ToastrService, private _dataSetDialogRef: MatDialogRef<DataSetComponent>, private _localStorage: LocalStorageService, public _utils: UtilsService\n  ) {\n    /** Form instances */\n    this.mergeForm = this._fb.group({\n      selectedDataset: ['', Validators.required],\n      joinType: ['', Validators.nullValidator],\n      commonColumn: ['', Validators.nullValidator],\n      columnsToMerge: ['', Validators.nullValidator]\n    });\n  }\n\n  /**\n   * Assigns the references after the view is initialized\n   */\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Initial settings for the dialog\n   */\n  ngOnInit(): void {\n    if (this.dialogData.type === 'preview') {\n      this.showPreview = true;\n      this.modalHeading = 'Data Preview';\n      console.log(this.dialogData);\n      this.previewData();\n    } else {\n      this.showMergeForm = true;\n      this.modalHeading = 'Merge Data';\n      this.project = this._localStorage.getItem('project');\n      this.listAllProjectFileList(this.dialogData.data);\n    }\n  }\n  previewData() {\n    this._spinner.showSpinner();\n    let columnDefs = [];\n    this._data.myFileData(this.dialogData.reqObj.pid, this.dialogData.dataId, this.dialogData.reqObj, true).subscribe(\n      (res: any) => {\n        if (res) {\n          for (let key in res.preview[0]) {\n            columnDefs.push({\n              headerName: key,\n              field: key,\n            });\n          }\n          console.log(columnDefs);\n          this.gridOptions = {\n            headerHeight: 40,\n            columnDefs: columnDefs,\n            // rowData: res.preview,\n            defaultColDef: { resizable: true },\n          };\n\n          this.previewrowData = res.preview;\n          this._spinner.stopSpinner();\n        } else {\n          this._spinner.stopSpinner();\n          this._toaster.error('Sorry! Cannot preview the files data.', 'Data Set');\n        }\n      },\n      (err: Error) => {\n        this.showSpinner = false;\n        this._toaster.error('Server Error', 'Data Set');\n      }\n    );\n  }\n  /**\n   * Fetches list of all the files associated with a project\n   * @param fileData \n   */\n  listAllProjectFileList(fileData: any): void {\n    this.dataConnection$ = this._data.getAllProjectFileList(this.project._id).subscribe((res: any) => {\n      if (res) {\n        this.parentFile = res.find((data: any) => data._id === fileData._id ? true : false);\n\n        // Filters the files list to remove selected file from response list\n        this.dataSetList = res.filter((item: any) => item._id !== fileData._id);\n      }\n    }, (err: Error) => {\n      this._toaster.error('Server Error', 'Data Sets');\n    });\n  }\n\n  /**\n   * Calls when the data set is changed\n   * @param dataSetId \n   */\n  dataSetChanged(dataSetId: string): void {\n    this.mergeDataSet = this.dataSetList.find((data: any) => data._id === dataSetId ? true : false);\n    this.avalialbleColumnsToMerge = this.mergeDataSet.fileSchema;\n    this.commonColumns = this.parentFile.fileSchema.filter((value: any) => {\n      let found = this.mergeDataSet.fileSchema.find((item: any) => item.colName === value.colName);\n      return found;\n    });\n  }\n\n  /**\n   * Calls when the merge type is changed for form validations\n   * @param type \n   */\n  mergeTypeChanged(type: string): void {\n    if (type === 'column') {\n      this.mergeForm.get('joinType').setValidators(Validators.required);\n      this.mergeForm.get('commonColumn').setValidators(Validators.required);\n      this.mergeForm.get('columnsToMerge').setValidators(Validators.required);\n      this.mergeForm.get('joinType').updateValueAndValidity();\n      this.mergeForm.get('commonColumn').updateValueAndValidity();\n      this.mergeForm.get('columnsToMerge').updateValueAndValidity();\n    } else {\n      this.mergeForm.get('joinType').clearValidators();\n      this.mergeForm.get('commonColumn').clearValidators();\n      this.mergeForm.get('columnsToMerge').clearValidators();\n      this.mergeForm.get('joinType').updateValueAndValidity();\n      this.mergeForm.get('commonColumn').updateValueAndValidity();\n      this.mergeForm.get('columnsToMerge').updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Creates a new merged file\n   * @param formValue \n   */\n  onSubmitMerge(formValue: any): void {\n    this.showSpinner = true;\n    formValue.originalFilePath = this.parentFile.filename;\n    formValue.pid = this.project._id;\n    formValue.dataGroupId = this.dialogData.data.datagroup_id;\n    formValue.mergeFilePath = this.mergeDataSet.filename;\n    formValue.parentDatasetTasks = this.parentFile.tasks;\n    formValue.mergeDatasetTasks = this.mergeDataSet.tasks;\n    formValue.mergeType = this.mergeType;\n\n    if (this.mergeType === 'row') {\n      delete formValue.columnsToMerge;\n      delete formValue.commonColumn;\n      delete formValue.joinType;\n    }\n\n    this.dataConnection$ = this._data.mergeDataSet(this.project._id, formValue).subscribe((res: any) => {\n      if (res) {\n        this.closeModal(res);\n        this.showSpinner = false;\n        this._toaster.info('Data merging started...', 'Data Sets');\n      } else {\n        this.showSpinner = false;\n        this._toaster.error('Sorry! Cannot merge the data set.', 'Data Sets');\n      }\n    }, (err: Error) => {\n      this.closeModal();\n      this.showSpinner = false;\n      this._toaster.error(err.message, 'Data Sets');\n    });\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this._dataSetDialogRef.close(data);\n  }\n  /**\n    * Called when ng-grid is rendered in dom\n    * @param event\n    */\n  gridReady(event: any) {\n    event.api.setDomLayout(\"autoHeight\");\n    this.gridApi = event.api;\n    this.gridApi.setColumnDefs(this.gridOptions.columnDefs);\n    this.gridApi.setRowData(this.previewrowData);\n    this.gridApi.refreshCells({ force: true });\n\n  }\n  /**\n   * Unsubscribes the subscriptions, only if they were subscribed\n   */\n  ngOnDestroy() {\n    if (this.dataConnection$) {\n      this.dataConnection$.unsubscribe();\n    }\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <i class=\"far fa-folder folder-icon\"></i>\n      </div>\n      <mat-card-title>\n        <h3\n          [matTooltip]=\"_utils.getTootip('dataSet')\"\n          [class]=\"breadcrumbArray.length ? 'heading-with-breadcrumb' : 'heading-title'\"\n          (click)=\"breadcrumbHandler('', true)\"\n          style=\"cursor: pointer\"\n        >\n          Data Sets\n        </h3>\n        <!-- Bread crumbs -->\n        <div *ngFor=\"let crumb of breadcrumbArray; last as last\" class=\"d-flex align-items-center\">\n          <!-- ICON (chevron) -->\n          <mat-icon class=\"align-middle\">chevron_right</mat-icon>\n          <!-- LABEL (breadcrumb name) -->\n          <h3\n            [class]=\"last ? 'breadcrumb-name' : 'heading-with-breadcrumb ml-0'\"\n            (click)=\"breadcrumbHandler(crumb, true)\"\n          >\n            {{ crumb.name }}\n          </h3>\n        </div>\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!dataSource.data.length\" class=\"text-center mt-5 font-weight-normal\">\n    You don't have any data set or connection yet,\n    <a class=\"text-decoration-none\" href=\"#\" [routerLink]=\"['/project/data/dataconnection']\"\n      >upload now.</a\n    >\n  </h4>\n\n  <!-- LIST (dataset files) -->\n  <mat-card *ngIf=\"dataSource.data.length\" class=\"files-listing mt-5 p-4\">\n    <mat-form-field class=\"search-input\">\n      <mat-label>Search</mat-label>\n      <input matInput (keyup)=\"applyFilter($event)\" #input />\n    </mat-form-field>\n    <mat-progress-spinner\n      *ngIf=\"showSpinner\"\n      class=\"spinner\"\n      [color]=\"color\"\n      [mode]=\"mode\"\n      [diameter]=\"diameter\"\n    >\n    </mat-progress-spinner>\n    <table\n      mat-table\n      [dataSource]=\"dataSource\"\n      matSort\n      matSortActive=\"createdAt\"\n      matSortDirection=\"desc\"\n      matSortDisableClear\n      class=\"mt-2\"\n    >\n      <!-- Sr. No Column -->\n      <!-- <ng-container matColumnDef=\"srNo\">\n        <th mat-header-cell *matHeaderCellDef>Sr. No.</th>\n        <td mat-cell *matCellDef=\"let row; let i = index\">\n          {{ i + 1 + dataSetPaginator.pageIndex * dataSetPaginator.pageSize }}\n        </td>\n      </ng-container> -->\n      <!-- Icons Column -->\n      <ng-container matColumnDef=\"icon\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let row\">\n          <i [class]=\"row.fileSource ? 'fa fa-file-alt icons mr-3' : 'fa fa-folder icons mr-3'\"></i>\n        </td>\n      </ng-container>\n\n      <!-- File name Column -->\n      <ng-container matColumnDef=\"fileName\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n        <td\n          mat-cell\n          *matCellDef=\"let row\"\n          [class.clickable]=\"!row.fileSource\"\n          (click)=\"breadcrumbHandler(row)\"\n        >\n          {{ row.name | dropFileExtension: row.fileSource }}\n        </td>\n      </ng-container>\n\n      <!-- Created At Column -->\n      <ng-container matColumnDef=\"createdAt\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.createdAt | date: 'medium' }}\n        </td>\n      </ng-container>\n\n      <!-- No. of rows Column -->\n      <ng-container matColumnDef=\"noOfRecords\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>No. of Rows</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.noOfRows ? row.noOfRows : '-' }}\n        </td>\n      </ng-container>\n\n      <!-- No. of cols Column -->\n      <ng-container matColumnDef=\"noOfColumns\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>No. of Columns</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.noOfCols ? row.noOfCols : '-' }}\n        </td>\n      </ng-container>\n\n      <!-- File size Column -->\n      <ng-container matColumnDef=\"fileSize\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>File Size</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.fileSize ? (row.fileSize | fileSizeConverter: 2) : '-' }}\n        </td>\n      </ng-container>\n\n      <!-- Actions Column -->\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef>Actions</th>\n        <td mat-cell *matCellDef=\"let row\">\n          <div *ngIf=\"row.fileSource\" class=\"action-buttons d-flex\">\n            <!-- Data preview button -->\n            <button\n              mat-icon-button\n              class=\"text-value\"\n              matTooltip=\"Preview the data\"\n              (click)=\"openDataPreviewModal(row, 'preview')\"\n            >\n              <i class=\"fa fa-eye\"></i>\n            </button>\n\n            <!-- View detail report button -->\n            <button\n              mat-icon-button\n              class=\"text-value\"\n              matTooltip=\"Preview the detailed report about the data\"\n              (click)=\"openDataReportModal(row, 'report')\"\n              *ngIf=\"\n                user?.roles?.includes('super_admin') ||\n                (user?.planType !== 'basic' && user?.planType !== 'pro')\n              \"\n            >\n              <i class=\"fas fa-file-invoice\"></i>\n            </button>\n\n            <!-- Merge data set button -->\n            <button\n              mat-icon-button\n              class=\"text-value\"\n              matTooltip=\"Merge two datasets\"\n              (click)=\"openMergeDataModal(row, 'merge')\"\n            >\n              <i class=\"fa fa-clone\"></i>\n            </button>\n\n            <!-- Delete button -->\n            <button\n              class=\"delete-button\"\n              mat-icon-button\n              matTooltip=\"Delete\"\n              (click)=\"deleteHandler(row._id)\"\n            >\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n      <!-- Row shown when there is no matching data. -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n          No data matching the filter \"{{ input.value }}\"\n        </td>\n        <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n      </tr>\n    </table>\n    <!-- Paginator -->\n    <mat-paginator\n      #dataSetPaginator\n      class=\"mt-2\"\n      [pageSizeOptions]=\"pageSizeOptions\"\n    ></mat-paginator>\n  </mat-card>\n</div>\n","import { ReportsService } from './../../dashboard/reports/reports.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { EdaReportComponent } from 'src/app/shared/components/eda-report/eda-report.component';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { DataSetDialogComponent } from './data-set-dialog/data-set-dialog.component';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DataService } from '../data.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { GridOptions } from 'ag-grid-community';\n\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-data-set',\n  templateUrl: './data-set.component.html',\n  styleUrls: ['./data-set.component.scss'],\n})\nexport class DataSetComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild(MatPaginator) set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild(MatSort) set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n  gridOptions: GridOptions;\n  resizeEvent = 'resize.ag-grid';\n  /** Progress spinner settings */\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n\n  project: any;\n  user: any;\n  showSpinner: boolean = false;\n  breadcrumbArray: Array<any> = [];\n  breadArray: Array<any> = [];\n  fArr: Array<any> = [];\n  dataFilterArray: Array<any> = [];\n  previewData: any;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dialog: MatDialog,\n    private _report: ReportsService,\n    private _sanitizer: DomSanitizer,\n    private _socket: SocketIoService,\n    public _utils: UtilsService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.displayedColumns = [\n      // 'srNo',\n      'icon',\n      'fileName',\n      'createdAt',\n      'noOfRecords',\n      'noOfColumns',\n      'fileSize',\n      'actions',\n    ];\n  }\n\n  /**\n   * Initializes page with all the required data\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.initSocket();\n    this.getDataSetList();\n  }\n\n  /**\n   * Fetches the data set list\n   */\n  getDataSetList(): void {\n    let dataListArrayId: string;\n    let dataListArray: Array<any> = [];\n    this.breadArray.length = 0;\n    this.breadcrumbArray.length = 0;\n    this._data\n      .getAllProjectDatas(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            let data: Array<any> = [];\n            this.dataFilterArray = [];\n            this.dataFilterArray = this.dataFilterArray.concat(\n              res[0].dataGroupList,\n              res[0].filesList\n            );\n            dataListArray = this.dataFilterArray.filter(\n              (temp) =>\n                !Object.keys(temp).includes('parentId') &&\n                !Object.keys(temp).includes('datagroup_id')\n            );\n            dataListArrayId = dataListArray[0]._id;\n            data = this.dataFilterArray.filter(\n              (temp) =>\n                temp.fileSource != 'upload_retrained' &&\n                (temp.parentId == dataListArrayId || temp.datagroup_id == dataListArrayId)\n            );\n            this.fArr = data;\n            // Assign the data to the dataSource for the table to show records\n            this.dataSource.data = data;\n            this.dataSource._updateChangeSubscription();\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n            this._toaster.error('Cannot fetch data list', 'Data Sets');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Data Sets');\n        }\n      );\n  }\n\n  /**\n   * Handles the delete operation to delete connection or datagroup\n   * @param {connection id} id\n   * @param {connection type} type\n   */\n  deleteHandler(dataSetId: string): void {\n    let content = document.createElement('div');\n    content.innerHTML =\n      'You will not be able to recover <b>' +\n      'Eda, Training and Models ' +\n      '</b> related to this dataset!';\n    swal({\n      title: 'Are you sure?',\n      content: content,\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this.breadArray.length = 0;\n        this._data\n          .deleteDataSet(this.project._id, dataSetId)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res: any) => {\n              if (res) {\n                this.getDataSetList();\n                this._toaster.success('File deleted successfully', 'Data Sets');\n              } else {\n                this._toaster.error('Cannot delete file', 'Data Sets');\n              }\n            },\n            (err: Error) => {\n              this._toaster.error('Server Error', 'Data Sets');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Opens the dialog\n   * @param type preview/report/merge\n   */\n  openDialog(data: any, type: string, columns?: Array<any>): void {\n    let dialogWidth = type === 'preview' ? '80vw' : '50vw';\n    let dialodRef = this._dialog.open(DataSetDialogComponent, {\n      minWidth: dialogWidth,\n      maxWidth: '80vw',\n      data:\n        type === 'preview'\n          ? { type: type, dataId: columns, reqObj: data }\n          : {\n              type: type,\n              columns: columns,\n              data: data,\n            },\n    });\n\n    dialodRef.afterClosed().subscribe((data) => {\n      if (data) {\n        this.getDataSetList();\n      }\n    });\n  }\n\n  /**\n   * Fetches the file data and renders in dialog\n   * @param type\n   * @param data\n   */\n  openDataPreviewModal(data: any, type: string): void {\n    this.showSpinner = true;\n    let reqObj: object = {\n      dataId: data._id,\n      pid: this.project._id,\n    };\n    this.showSpinner = false;\n    this.openDialog(reqObj, 'preview', data._id);\n  }\n\n  /**\n   * Opens the EDA report dialog to render the details\n   * @param fileData\n   * @param type\n   */\n  openDataReportModal(fileData: any, type: string): void {\n    let edaReportData: object = {\n      projectId: this.project._id,\n      dataId: fileData._id,\n    };\n    /** Opens the eda report component modal to render report */\n    this._dialog.open(EdaReportComponent, {\n      minHeight: '90vh',\n      maxHeight: '90vh',\n      minWidth: '90vw',\n      data: {\n        moduleName: 'data-set',\n        edaReportData: edaReportData,\n      },\n    });\n  }\n\n  /**\n   * Opens the dialog with form to merge the data\n   * @param parentDataSetId\n   * @param datagroup\n   */\n  openMergeDataModal(fileData: any, type: string): void {\n    this.openDialog(fileData, type);\n  }\n\n  /**\n   * Handles the breadcrumbs\n   * @param dataGroupId\n   * @param name\n   * @param isChanged whether any breadcrumb is clicked to navigate\n   */\n  breadcrumbHandler(dataGroupDetails: any, isChanged?: boolean): void {\n    if (!dataGroupDetails.fileSource) {\n      let dataGroupId = dataGroupDetails._id || dataGroupDetails.id;\n      this.showSpinner = true;\n      let data: Array<any> = [];\n      let filesFilter: Array<any> = [];\n      /** If bread crum is clicked, then navigates to selected folder else create new breadcrumb */\n      if (isChanged) {\n        let index = this.breadArray.findIndex((item) => {\n          return item.id == dataGroupId;\n        });\n        this.breadArray.splice(index + 1);\n        /** If clicked on root breadcrumb */\n        if (!dataGroupDetails) {\n          this.getDataSetList();\n        }\n      } else {\n        this.breadArray.push({\n          id: dataGroupId,\n          name: dataGroupDetails.name,\n        });\n      }\n      this.breadcrumbArray = this.breadArray;\n      data = this.dataFilterArray.filter((item) => {\n        return item.parentId === dataGroupId || item.datagroup_id === dataGroupId;\n      });\n\n      filesFilter = data.filter((temp) => {\n        return !Object.keys(temp).includes('connId');\n      });\n      this.fArr = filesFilter;\n      // Assign the data to the dataSource for the table to show records\n      this.dataSource.data = filesFilter;\n      this.dataSource._updateChangeSubscription();\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n      this.showSpinner = false;\n    }\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Initializes the socket to listen events when emmited\n   */\n  initSocket(): void {\n    this._socket.listen('merge').subscribe(\n      (res: any) => {\n        if (res.status === 'pull_success') {\n          this.getDataSetList();\n          this._toaster.success('Data merged successfully', 'Data Set');\n        } else {\n          this._toaster.error(res.status, 'Data Set');\n        }\n        this._spinner.stopSpinner();\n      },\n      (err) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Set');\n      }\n    );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('pullData');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFlowService {\n  serverBaseUrl: string = environment.serverBaseUrl;\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches all the flows list from DB\n   * @param projectId \n   * @returns \n   */\n  getAllFlowsList(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/udd?projectId=${projectId}`);\n  }\n\n  /**\n   * Creates a new UDD flow \n   * @param flowData \n   * @returns \n   */\n  createNewFlow(flowData: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/udd`, flowData);\n  }\n\n  /**\n   * Deletes the flow from DB\n   * @param flowId \n   * @returns \n   */\n  deleteFlow(flowId: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/udd/${flowId}`);\n  }\n\n  /**\n   * Fetches the single flow details from DB\n   * @param flowId \n   * @returns \n   */\n  getSingleFlow(flowId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/udd/${flowId}`);\n  }\n\n  /**\n   * Updates the flow\n   * @param flowId \n   * @param flowData \n   * @returns \n   */\n  updateFlow(flowId: string, flowData: any): Observable<any> {\n    return this._http.put(`${this.serverBaseUrl}/api/udd/${flowId}`, flowData);\n  }\n\n  /**\n   * Executes the data flow\n   * @param flowId \n   * @param dataGroupId \n   * @returns \n   */\n  executeDataFlow(projectId: string, flowId: string, dataGroupId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/project/${projectId}/udd/${flowId}/execute?dataGroupId=${dataGroupId}`);\n  }\n\n  /**\n   * Fetches the node-red error log from DB\n   * @param flowId \n   * @returns \n   */\n  getErrorLogs(flowId: string, startDate: string, endDate: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/node-red/errorLog/${flowId}?startDate=${startDate}&endDate=${endDate}`);\n  }\n}\n","<mat-card>\n  <mat-card-content>\n    <mat-horizontal-stepper labelPosition=\"bottom\" #stepper>\n      <!-- STEP - 1 (Fill details) -->\n      <mat-step [stepControl]=\"flowFormGroup\">\n        <form [formGroup]=\"flowFormGroup\">\n          <ng-template matStepLabel>{{\n            isEdit ? 'Update Flow Details' : 'Enter Flow Details'\n            }}</ng-template>\n          <div class=\"row mt-4\">\n            <!-- Flow name input -->\n            <div class=\"col-md-4 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Flow name</mat-label>\n                <input matInput type=\"text\" name=\"flowName\" formControlName=\"flowName\" placeholder=\"Enter flow name\"\n                  autocomplete required />\n                <mat-error *ngIf=\"\n                    flowFormGroup.get('flowName').hasError('required') &&\n                    (flowFormGroup.get('flowName').dirty || flowFormGroup.get('flowName').touched)\n                  \">Flow name is required.</mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Select folder (dropdown) -->\n            <div *ngIf=\"flowData?.flowType === 'direct' || !isEdit\" class=\"col-md-4 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Select folder</mat-label>\n                <mat-select formControlName=\"dataGroupId\" required>\n                  <mat-option *ngFor=\"let folder of dataGroups\" [value]=\"folder._id\">{{\n                    folder.name\n                    }}</mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    flowFormGroup.get('dataGroupId').hasError('required') &&\n                    (flowFormGroup.get('dataGroupId').dirty ||\n                      flowFormGroup.get('dataGroupId').touched)\n                  \">Folder is required.</mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Select schedular (dropdown) -->\n            <div *ngIf=\"flowData?.flowType === 'direct' || !isEdit\" class=\"col-md-4 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Select scheduler</mat-label>\n                <mat-select formControlName=\"scheduleId\">\n                  <mat-option value=\"None\">None</mat-option>\n                  <mat-option *ngFor=\"let schedular of schedulars\" [value]=\"schedular._id\">{{ schedular.scheduleName }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </div>\n          <hr />\n          <div class=\"d-flex justify-content-end mt-4\">\n            <button type=\"button\" mat-stroked-button (click)=\"closeStepperHandler()\">Cancel</button>\n            <button type=\"button\" mat-flat-button [disabled]=\"flowFormGroup.invalid\" class=\"btn-primary ml-3\"\n              matStepperNext>\n              Next\n            </button>\n          </div>\n        </form>\n      </mat-step>\n\n      <!-- STEP - 2 (Create flow in Node-Red) -->\n      <mat-step>\n        <ng-template matStepLabel>Design Data Flow</ng-template>\n        <div class=\"iframe-container mt-4\">\n          <iframe id=\"nodeRedIframe\" [src]=\"flowURL\" allowFullScreen=\"true\"></iframe>\n        </div>\n        <div class=\"d-flex justify-content-end mt-4\">\n          <button mat-stroked-button matStepperPrevious [hidden]=\"connId ? true : false\" class=\"mr-auto\">\n            Back\n          </button>\n          <button type=\"button\" mat-stroked-button (click)=\"closeStepperHandler()\">Cancel</button>\n          <button type=\"submit\" mat-flat-button class=\"btn-primary ml-3\" matStepperNext (click)=\"onSubmitFlow()\">\n            {{ isEdit ? 'Update' : 'Create' }}\n          </button>\n        </div>\n      </mat-step>\n    </mat-horizontal-stepper>\n  </mat-card-content>\n</mat-card>","import { takeUntil } from 'rxjs/operators';\nimport { DataFlowService } from './../data-flow.service';\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { environment } from 'src/environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { MatHorizontalStepper } from '@angular/material/stepper';\nimport { Router } from '@angular/router';\n\ndeclare let $: any;\n\n@Component({\n  selector: 'app-data-flow-stepper',\n  templateUrl: './data-flow-stepper.component.html',\n  styleUrls: ['./data-flow-stepper.component.scss'],\n})\nexport class DataFlowStepperComponent implements OnInit {\n  @Input() flowData: any;\n  @Input() dataGroups: Array<any>;\n  @Input() schedulars: Array<any>;\n  @Input() connId: string;\n  @Input() flowIdToEdit: string;\n  @Output() closeNodeRed = new EventEmitter<object>();\n  @ViewChild('myiframe', { static: false }) iframe: ElementRef;\n  @ViewChild(MatHorizontalStepper) stepper: MatHorizontalStepper;\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  serverBaseUrl: string = environment.serverBaseUrl;\n  flowFormGroup: FormGroup;\n  flowURL: SafeHtml;\n  isEdit: boolean = false;\n  project: any;\n  doc: any;\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _sanitizer: DomSanitizer,\n    private _dataFlow: DataFlowService,\n    private _toaster: ToastrService,\n    private _localStorage: LocalStorageService,\n    private _router: Router\n  ) {\n    this.flowFormGroup = this._formBuilder.group({\n      flowName: ['', Validators.required],\n      dataGroupId: ['', Validators.required],\n      scheduleId: [''],\n    });\n  }\n\n  /**\n   * Initializes the page with required data\n   */\n  ngOnInit() {\n    this.project = this._localStorage.getItem('project');\n    this.prefillFlowDetails(this.flowData, this.flowIdToEdit);\n    this.flowURL = this._sanitizer.bypassSecurityTrustResourceUrl(`${this.serverBaseUrl}/!/`);\n  }\n\n  /**\n   * Initializes the node-red for interceptor flow type\n   */\n  ngAfterViewInit() {\n    if (this.connId) {\n      this.stepper.next();\n    }\n  }\n\n  /**\n   * Handles the operations when the stepper is closed\n   */\n  closeStepperHandler(): void {\n    if (this.connId || this.flowIdToEdit) {\n      this._router.navigateByUrl('/project/data/dataconnection');\n    } else {\n      this.closeNodeRed.emit({ isCanceled: true });\n    }\n  }\n\n  /**\n   * Prefills the flow details form for edit operation\n   * @param flowData\n   */\n  prefillFlowDetails(flowData: any, flowIdToEdit?: string): void {\n    if (flowData || flowIdToEdit) {\n      this.isEdit = true;\n      this.flowFormGroup.patchValue({\n        flowName: flowData ? flowData.flowName : '',\n        dataGroupId: flowData ? flowData.dataGroupId : '',\n        scheduleId: flowData ? flowData.scheduleId : '',\n      });\n      this.findOneFlow(flowData ? flowData._id : flowIdToEdit);\n    } else {\n      this.isEdit = false;\n      this.flowFormGroup.reset();\n    }\n  }\n\n  /**\n   * To prohibit user to save a flow without any node in iframe\n   */\n  validateFlow(): boolean {\n    if (window.frames['myiframe'].contentDocument.getElementsByClassName('red-ui-header-toolbar')) {\n      let iframeHtml =\n        window.frames['myiframe'].contentDocument.getElementsByClassName('red-ui-header-toolbar');\n      if (!iframeHtml[0].innerHTML.includes('red-ui-deploy-button disabled')) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Handles the flow submition as per the functionality - edit/create\n   */\n  onSubmitFlow(): void {\n    // const iframe = document.getElementById(\"myiframe\");\n    // const iframe = document.getElementById('myiframe');\n    // console.log(\"🚀 ~ onSubmitFlow ~ iframe\", iframe[0]);\n\n    // // console.log(\"🚀 ~ onSubmitFlow ~ iframe\", iframe[0].iframe.contentDocument);\n    // // console.log(\"🚀 ~ onSubmitFlow ~ iframe\", iframe[0].contentWindow.document);\n\n    // let btn_deploy = iframe.getElementsByClassName('red-ui-deploy-button-group');\n    // // console.log(\"🚀 ~ createNewFlow ~ btn_deploy\", btn_deploy);\n\n    // let urlString = document.getElementById(\"myiframe\")[0].contentWindow.location.href;\n    // // console.log(\"🚀 ~ createNewFlow ~ urlString\", urlString);\n\n    // let position = urlString.lastIndexOf(\"/\");\n    // let flowId = urlString.substring(position + 1, urlString.length);\n    // // btn_deploy.click();\n\n    // // {\n    // //   \"stack\": \"Error: Blocked a frame with origin \\\"http://localhost:4200\\\" from accessing a cross-origin frame.\\n    at o (<anonymous>:1:83)\"\n    // // }\n    // console.log(iframe.querySelectorAll('#red-ui-header'));\n\n    // let od = $('iframe');\n    // console.log(\"🚀 ~ onSubmitFlow ~ od\", od);\n\n    // $(od)\n    //   .contents()\n    //   .find('*')\n    //   .each(function (i, item) {\n    //     console.log(item);\n\n    //     if ($(item).is('#red-ui-header-button-deploy')) {\n    //       console.log('got button');\n\n    //     }\n    //   })\n\n    let iframe: any = $('#nodeRedIframe');\n    let btn_deploy = iframe.contents().find('#red-ui-header-button-deploy')[0];\n\n    let urlString = iframe[0].contentWindow.location.href;\n\n    let position = urlString.lastIndexOf('/');\n    let flowId = urlString.substring(position + 1, urlString.length);\n    btn_deploy.click();\n    if (flowId == '#' || flowId == '' || undefined) {\n      alert('Something went wrong, please refresh');\n    }\n\n    let reqObj: any = {\n      flowName: this.flowFormGroup.value.flowName,\n      flowId: flowId,\n      flowType: this.connId ? 'interceptor' : 'direct',\n      projectId: this.project._id,\n      connectionID: this.connId ? this.connId : null,\n      dataGroupId: this.flowFormGroup.value.dataGroupId,\n    };\n    //if schedulerId is present add the schedulerId key\n    this.flowFormGroup.value.scheduleId &&\n      (reqObj.scheduleId = this.flowFormGroup.value.scheduleId);\n\n    /** Creates dynamic request object as per the flow types */\n    if (this.connId) {\n      // delete reqObj.flowName;\n      delete reqObj.scheduleId;\n      delete reqObj.dataGroupId;\n    } else {\n      delete reqObj.connectionID;\n    }\n\n    if (this.isEdit) {\n      reqObj.flowType = this.flowData.flowType;\n      if (!this.flowData.dataGroupId) {\n        delete reqObj.dataGroupId;\n      }\n      this.updateFlow(reqObj);\n    } else {\n      this.createNewFlow(reqObj);\n    }\n  }\n\n  /**\n   * Creates a new UDD flow\n   */\n  createNewFlow(flowData: any): void {\n    this._dataFlow\n      .createNewFlow(flowData)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this._toaster.success('Data flow created successfully', 'Data Flows');\n            this.closeNodeRed.emit({ flowResponse: res, isCanceled: true });\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(err.message, 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Updates the flow by triggering API\n   * @param flowData\n   */\n  updateFlow(flowData: any): void {\n    let flowIdToUpdate = this.flowData._id || this.flowIdToEdit;\n    this._dataFlow\n      .updateFlow(flowIdToUpdate, flowData)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this._toaster.success('Data flow updated successfully', 'Data Flows');\n            this.closeNodeRed.emit({ flowResponse: res, isCanceled: true });\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(err.message, 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Fetches the single existing Udd Flow data from DB\n   * @param flowId\n   */\n  findOneFlow(flowId: any): void {\n    this._dataFlow\n      .getSingleFlow(flowId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.flowData = res;\n            this.flowFormGroup.get('flowName').setValue(res.flowName);\n            this.flowFormGroup.get('dataGroupId').clearValidators();\n            this.flowFormGroup.get('dataGroupId').updateValueAndValidity();\n            this.flowURL = this._sanitizer.bypassSecurityTrustResourceUrl(\n              `${this.serverBaseUrl}/!/#flow/${res.flowId}`\n            );\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Cannot fetch flows details', 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">account_tree</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title\">Data Flows</h3>\n      </mat-card-title>\n      <!-- BUTTON (new flow) -->\n      <button\n        *ngIf=\"!showStepper\"\n        mat-raised-button\n        class=\"bg-primary ml-auto\"\n        (click)=\"inputFlowData = null; showStepper = true\"\n      >\n        Create\n      </button>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!showStepper && !dataSource.data.length\" class=\"text-center mt-5 font-weight-normal\">\n    You haven't created any data flow yet,\n    <a class=\"text-decoration-none\" href=\"#\" (click)=\"inputFlowData = null; showStepper = true\">\n      create now.</a\n    >\n  </h4>\n\n  <!-- LIST (data flows) -->\n  <mat-card *ngIf=\"!showStepper && dataSource.data.length\" class=\"flows-listing mt-5 p-4\">\n    <mat-card-content>\n      <!-- Search input -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" #input />\n      </mat-form-field>\n      <table  mat-table [dataSource]=\"dataSource\" class=\"mt-2\" matSort #dataflowSort=\"matSort\" matSortDisableClear>\n        <!-- Sr. No. Column -->\n        <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef>Sr. No.</th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 + flowPaginator.pageIndex * flowPaginator.pageSize }}\n          </td>\n        </ng-container>\n\n        <!-- Flow name Column -->\n        <ng-container matColumnDef=\"flowName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.flowName }}\n          </td>\n        </ng-container>\n\n        <!-- Flow Id Column -->\n        <ng-container matColumnDef=\"flowId\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Flow Id</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.flowId }}\n          </td>\n        </ng-container>\n\n        <!-- Flow type Column -->\n        <ng-container matColumnDef=\"flowType\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Flow Type</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.flowType }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <!-- Start flow button -->\n              <button\n                matTooltip=\"Start data flow\"\n                *ngIf=\"row.flowType === 'direct'\"\n                mat-icon-button\n                class=\"text-value\"\n                (click)=\"startFlow(row)\"\n              >\n                <i class=\"fa fa-play\"></i>\n              </button>\n\n              <!-- Edit flow button -->\n              <button\n                matTooltip=\"Edit data flow\"\n                mat-icon-button\n                class=\"text-value\"\n                (click)=\"editFlow(row)\"\n              >\n                <i class=\"fa fa-edit\"></i>\n              </button>\n\n              <!-- Flow error log file -->\n              <button\n                matTooltip=\"View logs\"\n                [matTooltipClass]=\"\n                  isDataFlowFailed && directFlowNameCheck == row.flowId\n                    ? 'nodered-error-tooltip-custom'\n                    : ''\n                \"\n                mat-icon-button\n                class=\"text-value\"\n                (click)=\"viewNodeRedLogs(row, errorLogsTemplate)\"\n              >\n                <i class=\"fas fa-file-invoice\"></i>\n                <i\n                  *ngIf=\"isDataFlowFailed && directFlowNameCheck == row.flowId\"\n                  class=\"nodered-error fas fa-exclamation-circle\"\n                ></i>\n              </button>\n\n              <!-- Delete button -->\n              <button\n                matTooltip=\"Remove data flow\"\n                class=\"delete-button\"\n                mat-icon-button\n                (click)=\"deleteHandler(row._id)\"\n              >\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n        </tr>\n      </table>\n      <!-- Paginator -->\n      <mat-paginator\n        #flowPaginator\n        class=\"mt-2\"\n        [pageSizeOptions]=\"pageSizeOptions\"\n      ></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Data flow stepper section -->\n  <div *ngIf=\"showStepper\" class=\"mt-5\">\n    <app-data-flow-stepper\n      [flowData]=\"inputFlowData\"\n      [dataGroups]=\"dataGroupList\"\n      [schedulars]=\"schedularsList\"\n      [connId]=\"connId\"\n      [flowIdToEdit]=\"flowIdToEdit\"\n      (closeNodeRed)=\"nodeRedClosed($event)\"\n    ></app-data-flow-stepper>\n  </div>\n</div>\n\n<!-- Error log dialog -->\n<ng-template #errorLogsTemplate>\n  <h2 mat-dialog-title class=\"selected-flow\">\n    Data Flow Error Logs :\n    <mat-chip-list class=\"ml-2\">\n      <mat-chip>{{ selectedFlow.flowName }}</mat-chip>\n    </mat-chip-list>\n  </h2>\n\n  <!-- Date range picker -->\n  <div class=\"row mt-3\">\n    <div class=\"col-md-6\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select date (From and To)</mat-label>\n        <mat-date-range-input [formGroup]=\"dateGroup\" [rangePicker]=\"picker\">\n          <input\n            matStartDate\n            formControlName=\"start\"\n            placeholder=\"Start date\"\n            (dateChange)=\"dateChanged('start', $event.value)\"\n          />\n          <input\n            matEndDate\n            formControlName=\"end\"\n            placeholder=\"End date\"\n            (dateChange)=\"dateChanged('end', $event.value)\"\n          />\n        </mat-date-range-input>\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-date-range-picker #picker></mat-date-range-picker>\n\n        <mat-error\n          *ngIf=\"\n            dateGroup.controls.start.hasError('matStartDateInvalid') ||\n            dateGroup.controls.end.hasError('matEndDateInvalid')\n          \"\n          >Invalid start/end date.</mat-error\n        >\n        <mat-error\n          *ngIf=\"\n            (dateGroup.controls.start.dirty ||\n              dateGroup.controls.end.dirty ||\n              dateGroup.controls.start.touched ||\n              dateGroup.controls.end.touched) &&\n            (!dateGroup.controls.start.hasError('matStartDateInvalid') ||\n              !dateGroup.controls.end.hasError('matEndDateInvalid'))\n          \"\n          >Date range is required.</mat-error\n        >\n      </mat-form-field>\n    </div>\n  </div>\n\n  <mat-dialog-content class=\"mat-typography mt-4\">\n    <!-- Search input -->\n    <mat-form-field class=\"search-input\">\n      <mat-label>Search</mat-label>\n      <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Enter value to search\" #input />\n    </mat-form-field>\n\n    <table mat-table [dataSource]=\"logsDataSource\" matSort matSortDisableClear>\n      <!-- Date Column -->\n      <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.createdAt | date: 'medium' }}\n        </td>\n      </ng-container>\n\n      <!-- Level Column -->\n      <ng-container matColumnDef=\"level\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Level</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.level }}\n        </td>\n      </ng-container>\n\n      <!-- Node Column -->\n      <ng-container matColumnDef=\"node\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Node</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.metaData.nodeType }}\n        </td>\n      </ng-container>\n\n      <!-- Description Column -->\n      <ng-container matColumnDef=\"message\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Message</th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.message }}\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"logsDisplayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: logsDisplayedColumns\"></tr>\n\n      <!-- Row shown when there is no matching data. -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{ input.value }}\"</td>\n      </tr>\n    </table>\n\n    <!-- Paginator -->\n    <mat-paginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Close</button>\n  </mat-dialog-actions>\n</ng-template>\n","import { SchedularService } from './../../dashboard/schedular/schedular.service';\nimport { DataFlowService } from './data-flow.service';\nimport {\n  Component,\n  OnInit,\n  ViewChild,\n  TemplateRef,\n  AfterViewInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../data.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { UtilsService } from 'src/app/shared/utils.service';\n\nconst swal = require('sweetalert');\nconst moment = require('moment');\n@Component({\n  selector: 'app-data-flow',\n  templateUrl: './data-flow.component.html',\n  styleUrls: ['./data-flow.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DataFlowComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  logsDataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild('flowPaginator') set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild('dataflowSort') set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n  logsDisplayedColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  project: any;\n  user: any;\n  showStepper: boolean = false;\n  hideDialog: boolean = true;\n  uddFlowsList: Array<any>;\n  inputFlowData: any;\n  dataGroupList: Array<any>;\n  schedularsList: Array<any>;\n  errorLogs: Array<any>;\n  selectedFlow: any;\n  dateGroup: FormGroup;\n  dateRange: any = {};\n  connId: string;\n  flowIdToEdit: string;\n  isDataFlowFailed: boolean = false;\n  directFlowNameCheck: string = null;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dataFlow: DataFlowService,\n    private _schedular: SchedularService,\n    private _dialog: MatDialog,\n    private _activatedRoute: ActivatedRoute,\n    private _socket: SocketIoService,\n    private _router: Router,\n    public _utils: UtilsService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    /** Handles the stepper when user try to create/update flow from data-connection page */\n    if (this._activatedRoute.queryParams) {\n      this._activatedRoute.queryParams.subscribe((val) => {\n        if (val.connectionId) {\n          this.connId = val.connectionId;\n          this.showStepper = true;\n        } else if (val.dataFlowId) {\n          this.flowIdToEdit = val.dataFlowId;\n          this.showStepper = true;\n        } else {\n          this.showStepper = false;\n        }\n      });\n    }\n    this.displayedColumns = ['srNo', 'flowName', 'flowId', 'flowType', 'actions'];\n    this.logsDisplayedColumns = ['date', 'level', 'node', 'message'];\n    /** Date input form instance */\n    this.dateGroup = new FormGroup({\n      start: new FormControl('', Validators.required),\n      end: new FormControl('', Validators.required),\n    });\n  }\n\n  /**\n   * Assigns the references after the view is initialized\n   */\n  // ngAfterViewInit() {\n  //   this.dataSource.paginator = this.paginator;\n  //   this.dataSource.sort = this.sort;\n  // }\n\n  /**\n   * Initialize page with all the required data\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.initSocket();\n    this.getFlowsList();\n    this.getDataGroupList();\n    this.schedularList();\n    this.dateGroup.get('start').setValue(moment().subtract(3, 'days'));\n    this.dateGroup.get('end').setValue(moment());\n  }\n\n  /**\n   * Fetches all the flows list from DB\n   */\n  getFlowsList(): void {\n    this._dataFlow\n      .getAllFlowsList(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.uddFlowsList = res;\n            this.dataSource.data = res;\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n            this.dataSource._updateChangeSubscription();\n            console.log('🚀 ~ this.dataSource', this.dataSource);\n            this._spinner.stopSpinner();\n          } else {\n            this._spinner.stopSpinner();\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Fetches all the data groups list\n   */\n  getDataGroupList(): void {\n    this._data\n      .getDataGroupsList(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.dataGroupList = res;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Fetches all the schedulars list\n   */\n  schedularList(): void {\n    this._schedular\n      .getSchedularsList()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.schedularsList = res;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Starts the execution of the flow\n   * @param uddFlow\n   */\n  startFlow(flowData: any): void {\n    this.directFlowNameCheck = flowData.flowId;\n    this._dataFlow\n      .executeDataFlow(this.project._id, flowData._id, flowData.dataGroupId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this._toaster.success('Flow execution started', 'Data Flows');\n          }\n        },\n        (err: Error) => {\n          this._toaster.error(err.message, 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Called when the start/end date is changed\n   * @param type\n   * @param value\n   */\n  dateChanged(type: string, value: any): void {\n    if (type === 'start') {\n      this.dateRange.startDate = value;\n    } else {\n      this.dateRange.endDate = value;\n    }\n    if (this.dateRange.endDate) {\n      this.getNodeRedLogs(this.selectedFlow._id, this.dateRange.startDate, this.dateRange.endDate);\n    }\n  }\n\n  /**\n   * Get the list of logs present in the auditlog from DB and renders it in the dialog\n   * @param flowData\n   * @param errorLogsTemplate\n   */\n  viewNodeRedLogs(flowData: any, errorLogsTemplate: TemplateRef<any>): void {\n    this.selectedFlow = flowData;\n    let startDate = this.dateGroup.get('start').value;\n    let endDate = this.dateGroup.get('end').value;\n    this.getNodeRedLogs(flowData._id, startDate, endDate);\n    this.hideDialog = false;\n    this._dialog.open(errorLogsTemplate, {\n      height: 'auto',\n      width: '60%',\n    });\n  }\n\n  /**\n   * Fetches the error logs from DB as per the specified date\n   * @param flowId\n   * @param startDate\n   * @param endDate\n   */\n  getNodeRedLogs(flowId: string, startDate: string, endDate: string): void {\n    this._dataFlow\n      .getErrorLogs(flowId, moment.utc(startDate).format(), moment.utc(endDate).format())\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.errorLogs = res;\n            this.logsDataSource.data = this.errorLogs;\n            this.logsDataSource.paginator = this.paginator;\n            this.logsDataSource.sort = this.sort;\n          } else {\n            this._toaster.error('Cannot fetch error logs', 'Data Flows');\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Opens the stepper to edits the flow\n   * @param flowData\n   */\n  editFlow(flowData: any): void {\n    this.showStepper = true;\n    this.inputFlowData = flowData;\n  }\n\n  /**\n   * Deletes the data flow\n   * @param {connection id} id\n   * @param {connection type} type\n   */\n  deleteHandler(flowId: string): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this data flow!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this._dataFlow\n          .deleteFlow(flowId)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res: any) => {\n              if (res) {\n                this.uddFlowsList = this.uddFlowsList.filter((item: any) => item._id !== flowId);\n                this.dataSource.data = this.uddFlowsList;\n                this.dataSource._updateChangeSubscription();\n                this.dataSource.paginator = this.paginator;\n                this.dataSource.sort = this.sort;\n                this._toaster.success(`${res.flowName} deleted successfully`, 'Data Flows');\n              } else {\n                this._toaster.error('Sorry! Cannot delete the flow', 'Data Flows');\n              }\n            },\n            (err: Error) => {\n              this._toaster.error('Server Error', 'Data Flows');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Function is called when node-red stepper is closed or cancelled\n   * @param event\n   */\n  nodeRedClosed(event: any): void {\n    if (event.flowResponse) {\n      this.showStepper = !event.isCanceled;\n      this.flowIdToEdit = '';\n      this.connId = '';\n      this.inputFlowData = [];\n      this._spinner.stopSpinner();\n      this._router.navigate(['/project/data/dataflow']);\n      this.getFlowsList();\n    } else {\n      this.flowIdToEdit = '';\n      this.connId = '';\n      this.inputFlowData = [];\n      this.showStepper = !event.isCanceled;\n    }\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Initializes the socket to listen events when emmited\n   */\n  initSocket(): void {\n    // Listens to the pull data event\n    this._socket.listen('pullData').subscribe(\n      (res: any) => {\n        this._spinner.stopSpinner();\n        if (res.status === 'pull_success') {\n          (res.data.projectId === this.project._id) && this._toaster.success('Flow execution completed successfully', 'Data Flows');\n          (res.data.projectId === this.project._id) && this._router.navigate(['/project/data/dataset']);\n        } else {\n          (res.data.projectId === this.project._id) && this._toaster.success(res.err_msg, 'Data Flows');\n        }\n      },\n      (err) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Flows');\n      }\n    );\n\n    // Listens to node-red event\n    this._socket.listen('nodeRedFlowExecution').subscribe(\n      (res: any) => {\n        if (res.status === 'flow_execution_failed') {\n          this.isDataFlowFailed = true;\n        }\n        this._spinner.stopSpinner();\n      },\n      (err) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('pullData');\n    this._socket.removeListener('nodeRedFlowExecution');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<div class=\"mat-typography\">\n  <form [formGroup]=\"fileUploadForm\" role=\"form\" class=\"form-validate\" name=\"fileUploadForm\">\n    <div class=\"row\">\n      <!-- Select encoding -->\n      <div class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select encoding</mat-label>\n          <mat-select formControlName=\"encoding\" required>\n            <mat-option value=\"utf_8\">utf_8</mat-option>\n            <mat-option value=\"latin_1\">latin_1</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              fileUploadForm.get('encoding').hasError('required') &&\n              (fileUploadForm.get('encoding').dirty || fileUploadForm.get('encoding').touched)\n            \">Encoding is required.</mat-error>\n        </mat-form-field>\n      </div>\n\n      <!-- Select folder -->\n      <div class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select folder</mat-label>\n          <mat-select formControlName=\"selectFolder\" (selectionChange)=\"selectedFolder = $event.value\" required>\n            <mat-option value=\"Add\">Create new folder</mat-option>\n            <mat-option *ngFor=\"let folder of dataGroupsArray\" [value]=\"folder._id\">{{\n              folder.name\n              }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Add new folder block -->\n    <div *ngIf=\"selectedFolder === 'Add'\">\n      <div class=\"row\">\n        <div class=\"col-md-6 form-group\">\n          <!-- Folder name input -->\n          <mat-form-field appearance=\"outline\">\n            <mat-label for=\"dataFolderName\">Folder name</mat-label>\n            <input matInput type=\"text\" name=\"dataFolderName\" id=\"dataFolderName\" formControlName=\"dataFolderName\"\n              placeholder=\"Enter folder name\" required />\n            <mat-error *ngIf=\"\n                fileUploadForm.get('dataFolderName').hasError('required') &&\n                (fileUploadForm.get('dataFolderName').dirty ||\n                  fileUploadForm.get('dataFolderName').touched)\n              \">Folder name is required.\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-md-6 form-group\">\n          <!-- Parent folder selection -->\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Select parent folder</mat-label>\n            <mat-select formControlName=\"parentFolderName\" required>\n              <mat-option *ngFor=\"let folder of dataGroupsArray\" [value]=\"folder._id\">{{\n                folder.name\n                }}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"\n                fileUploadForm.get('parentFolderName').hasError('required') &&\n                (fileUploadForm.get('parentFolderName').dirty ||\n                  fileUploadForm.get('parentFolderName').touched)\n              \">Parent folder is required.</mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n\n    <!-- Select the input file -->\n    <div class=\"form-group mb-4\">\n      <input type=\"file\" name=\"file\" accept=\".csv,.zip,.xlsx,.xls,.pkl,.pk,.pl,.pickle,.json,.html\"\n        (change)=\"handleFileInput($event.target.files,fileUploadForm.value)\" />\n    </div>\n    <!-- <mat-hint>Note: Only UTF-8 encoding files are allowed.</mat-hint> -->\n  </form>\n  <div class=\"my-3 d-flex align-items-center\" *ngIf=\"percentDone\">\n    <mat-progress-bar *ngIf=\"percentDone\" color=\"#07509d\" [value]=\"percentDone\">\n    </mat-progress-bar> <span class=\"ml-1\">{{percentDone}}%</span>\n    <!-- <div class=\"d-flex\">\n     \n    </div> -->\n  </div>\n\n</div>\n<hr />\n<!-- <div class=\"progress\" *ngIf=\"percentDone\">\n  <div class=\"progress-bar\" [style.width]=\"percentDone + '%'\">{{percentDone}}%</div>\n</div> -->\n<div class=\"d-flex justify-content-end m-auto\">\n  <button mat-stroked-button class=\"mr-auto\" (click)=\"goBack()\">Back</button>\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <!-- <button mat-flat-button [disabled]=\"(fileUploadForm.invalid && selectedFolder === 'Add') || !fileToUpload\"\n    class=\"btn-primary ml-3\" type=\"submit\" (click)=\"createConnection(fileUploadForm.value)\">\n    Create\n  </button> -->\n</div>","import { UtilsService } from 'src/app/shared/utils.service';\nimport { HttpErrorResponse, HttpEventType } from '@angular/common/http';\nimport { SpinnerService } from './../../../../shared/spinner.service';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { DataConnectionComponent } from '../data-connection.component';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject, Subscription } from 'rxjs';\nimport { DataService } from '../../data.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { environment } from 'src/environments/environment';\nimport { toasterMsg } from 'src/app/shared/static-data';\nimport { takeUntil } from 'rxjs/operators';\n@Component({\n  selector: 'app-file-upload-form',\n  templateUrl: './file-upload-form.component.html',\n  styleUrls: ['./file-upload-form.component.scss'],\n})\nexport class FileUploadFormComponent implements OnInit {\n  @Output() goBackFlag = new EventEmitter<boolean>();\n  @Input() dataGroupsArray: Array<any>;\n  @Input() currentDataGroup: string;\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  // Progress spinner settings\n  // color: ThemePalette = \"primary\";\n  //color = 'primary'\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n  exportProjectDiameter = 50;\n\n  fileUploadForm: FormGroup;\n  fileToUpload: any;\n  project: any;\n  selectedFolder: any;\n  fileUploadApi: string;\n  user: any;\n  //configure it to change the file size - this is in mb.\n  allowedPSFileUploadSize: number;\n  progress: number;\n  serverBaseUrl = environment.serverBaseUrl;\n  percentDone;\n  constructor(\n    private _fb: FormBuilder,\n    private _data: DataService,\n    private _localStorage: LocalStorageService,\n    private _connectionDialogRef: MatDialogRef<DataConnectionComponent>,\n    private _toaster: ToastrService,\n    private _snackbar: MatSnackBar,\n    private _spinner: SpinnerService,\n    private _utils: UtilsService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.allowedPSFileUploadSize = this.user?.psFeatures?.allowedPSFileUploadSize || 50;\n    this.fileUploadForm = this._fb.group({\n      encoding: ['utf_8', Validators.required],\n      selectFolder: ['', Validators.required],\n      dataFolderName: ['', Validators.required],\n      parentFolderName: ['', Validators.required],\n    });\n  }\n\n  /**\n   * Sets the default values\n   */\n  ngOnInit(): void {\n    this.fileUploadForm.get('selectFolder').setValue(this.currentDataGroup);\n  }\n\n  /**\n   * Navigates to the data source type selection page\n   */\n  goBack(): void {\n    this.goBackFlag.emit(true);\n  }\n\n  /**\n   * Stores the file data to be uploaded into the variable\n   * @param inputFile files object\n   */\n  handleFileInput(inputFile: any, formValue: any): void {\n    const ext = inputFile[0].name.split('.').pop();\n    if (inputFile && ['csv', 'xlsx', 'xls', 'pkl', 'pk', 'pl', 'pickle'].includes(ext)) {\n      if (inputFile[0].size < this.allowedPSFileUploadSize * 1024 * 1024) {\n        this.fileToUpload = inputFile[0];\n        this.createConnection(formValue);\n      } else {\n        this._snackbar.open(\n          'File size should be less than ' + this.allowedPSFileUploadSize + 'Mb',\n          'OK',\n          {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n          }\n        );\n      }\n    } else {\n      this._snackbar.open(`.${ext} file type is not supported`, 'OK');\n    }\n  }\n\n  /**\n   * Uploads the file and create a connection\n   * @param formValue\n   */\n  createConnection(formValue: any): void {\n    this._spinner.showSpinner();\n    let dataGroupId: string;\n    let parentFolder: string;\n\n    if (formValue.selectFolder === 'Add') {\n      dataGroupId = formValue.dataFolderName;\n      parentFolder = formValue.parentFolderName;\n    } else {\n      dataGroupId = formValue.selectFolder;\n    }\n\n    let reqObj = {\n      encoding: formValue.encoding,\n      projectId: this.project._id,\n      dataGroupId: dataGroupId,\n      dataFolderName: dataGroupId,\n      parentFolderName: parentFolder,\n      file: this.fileToUpload,\n    };\n    this._data\n      .uploadFile(reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (resp) => {\n          if (resp.type === HttpEventType.UploadProgress) {\n            this.percentDone = Math.round((100 * resp.loaded) / resp.total);\n          }\n          if (this.percentDone === 100) {\n            this._utils.showSnackBar(toasterMsg.fileUpload);\n            this._spinner.stopSpinner();\n            resp.type === 4 && resp.status === 200 ? this._connectionDialogRef.close() : null;\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this._toaster.error(err.error.message || 'Server Error', 'Data Connection');\n          this._spinner.stopSpinner();\n          this._utils.dismissSnackBar();\n        }\n      );\n  }\n\n  /**\n   * Unsubscribes the subscriptions, only if they were subscribed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<div class=\"mat-typography\">\n  <form [formGroup]=\"dbConnectionForm\" role=\"form\" class=\"form-validate\" name=\"dbConnectionForm\">\n    <!-- Connection Name -->\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"connectionName\">Connection name</mat-label>\n          <input\n            matInput\n            type=\"text\"\n            name=\"connectionName\"\n            formControlName=\"connectionName\"\n            id=\"connectionName\"\n            placeholder=\"Enter connection name\"\n            autocomplete\n            required\n          />\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('connectionName').hasError('required') &&\n              (dbConnectionForm.get('connectionName').dirty ||\n                dbConnectionForm.get('connectionName').touched)\n            \"\n            >Connection name is required.</mat-error\n          >\n          <mat-error *ngIf=\"dbConnectionForm.get('connectionName').hasError('pattern')\"\n            >Invalid connection name\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <!-- Select connection dropdown -->\n      <div\n        class=\"\n          {{ sourceType === 'sftp' ? 'col-md-12 form-group' : 'col-md-6 form-group' }}\"\n      >\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"inputdatabase\">Select connection</mat-label>\n          <mat-select formControlName=\"connection\" required>\n            <mat-option *ngFor=\"let con of dbConns\" [value]=\"con\">{{ con.name }}</mat-option>\n          </mat-select>\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('connection').hasError('required') &&\n              (dbConnectionForm.get('connection').dirty ||\n                dbConnectionForm.get('connection').touched)\n            \"\n            >Connection is required.</mat-error\n          >\n        </mat-form-field>\n        <!-- <p>Add new</p> -->\n      </div>\n\n      <!-- <div class=\"col-md-2\">\n        <p>Add new</p>\n      </div> -->\n\n      <!-- Database name input -->\n      <div *ngIf=\"sourceType !== 'sftp'\" class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"database\">Database name</mat-label>\n          <input\n            matInput\n            type=\"text\"\n            name=\"database\"\n            formControlName=\"database\"\n            id=\"database\"\n            placeholder=\"Enter database name\"\n            autocomplete\n            required\n          />\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('database').hasError('required') &&\n              (dbConnectionForm.get('database').dirty || dbConnectionForm.get('database').touched)\n            \"\n            >Database name is required.</mat-error\n          >\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Query input -->\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"query\">Query</mat-label>\n          <textarea\n            matInput\n            type=\"text\"\n            name=\"query\"\n            formControlName=\"query\"\n            id=\"query\"\n            placeholder=\"Enter SELECT query\"\n            autocomplete\n            required\n            #queryString\n          ></textarea>\n          <mat-hint>Only SELECT query is allowed.</mat-hint>\n          <mat-hint align=\"end\" *ngIf=\"!(user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))\">Note: Only {{ allowedNoOfRows | rowColValConverter }} rows will be fetched from the data source.</mat-hint>\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('query').hasError('required') &&\n              (dbConnectionForm.get('query').dirty || dbConnectionForm.get('query').touched)\n            \"\n            >Query is required.</mat-error\n          >\n          <mat-error *ngIf=\"dbConnectionForm.get('query').hasError('queryInvalid')\"\n            >Invalid query.\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Password input -->\n    <!-- <div *ngIf=\"!isEdit\" class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"predictsensePwd\">PredictSense password</mat-label>\n          <input\n            matInput\n            [type]=\"hidePassword ? 'password' : 'text'\"\n            name=\"predictsensePwd\"\n            id=\"predictsensePwd\"\n            formControlName=\"predictsensePwd\"\n            placeholder=\"Enter PredictSense password\"\n            required\n          />\n          <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\">\n            <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('predictsensePwd').hasError('required') &&\n              (dbConnectionForm.get('predictsensePwd').dirty ||\n                dbConnectionForm.get('predictsensePwd').touched)\n            \"\n            >Password is required.\n          </mat-error>\n          <mat-error *ngIf=\"dbConnectionForm.get('predictsensePwd').hasError('pattern')\"\n            >Invalid predictsense password\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </div> -->\n\n    <div class=\"row\">\n      <!-- select schedular -->\n      <div\n        class=\"col-md-6\"\n        *ngIf=\"\n          appType === 'enterprise' ||\n          (appType === 'saas' &&\n            (user?.roles?.includes('super_admin') || user?.roles?.includes('admin')))\n        \"\n      >\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"scheduleId\">Select scheduler</mat-label>\n          <mat-select\n            formControlName=\"scheduleId\"\n            (selectionChange)=\"schedularChanged($event.value)\"\n          >\n            <mat-option *ngIf=\"!isEdit\">None</mat-option>\n            <mat-option *ngIf=\"isEdit\" value=\"None\">None</mat-option>\n            <mat-option *ngFor=\"let item of schedularsArray\" [value]=\"item._id\">{{\n              item.scheduleName\n            }}</mat-option>\n          </mat-select>\n          <mat-hint *ngIf=\"!schedularsArray.length\" class=\"redirect-link\">\n            <a class=\"text-decoration-none\" (click)=\"navigateToScheduler()\" style=\"cursor: pointer\"\n              >Add scheduler</a\n            >\n          </mat-hint>\n        </mat-form-field>\n      </div>\n\n      <!-- select folder -->\n      <div *ngIf=\"!isEdit\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select folder</mat-label>\n          <mat-select\n            formControlName=\"dataGroupId\"\n            (selectionChange)=\"onFolderChange($event.value)\"\n            required\n          >\n            <mat-option value=\"Add\">Create new folder</mat-option>\n            <mat-option *ngFor=\"let folder of dataGroupsArray\" [value]=\"folder._id\">{{\n              folder.name\n            }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Add new folder block -->\n    <div *ngIf=\"selectedFolder === 'Add' && !isEdit\" class=\"row my-4\">\n      <!-- Folder name input -->\n      <div class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"dataGroupName\">Folder name</mat-label>\n          <input\n            matInput\n            type=\"text\"\n            name=\"dataGroupName\"\n            id=\"dataGroupName\"\n            formControlName=\"dataGroupName\"\n            placeholder=\"Enter folder name\"\n            required\n          />\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('dataGroupName').hasError('required') &&\n              (dbConnectionForm.get('dataGroupName').dirty ||\n                dbConnectionForm.get('dataGroupName').touched)\n            \"\n            >Folder name is required.\n          </mat-error>\n          <!-- <mat-error *ngIf=\"dbConnectionForm.get('dataGraoupName').hasError('pattern')\">Folder Name can not\n            start with white space</mat-error> -->\n        </mat-form-field>\n      </div>\n\n      <!-- Parent folder selection -->\n      <div class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select parent folder</mat-label>\n          <mat-select formControlName=\"parent_id\" required>\n            <mat-option *ngFor=\"let folder of dataGroupsArray\" [value]=\"folder._id\">{{\n              folder.name\n            }}</mat-option>\n          </mat-select>\n          <mat-error\n            *ngIf=\"\n              dbConnectionForm.get('parent_id').hasError('required') &&\n              (dbConnectionForm.get('parent_id').dirty || dbConnectionForm.get('parent_id').touched)\n            \"\n            >Parent folder is required.</mat-error\n          >\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Pull data checkbox -->\n    <div *ngIf=\"!isEdit\" class=\"mt-5 ml-1\">\n      <mat-checkbox [(ngModel)]=\"isPulling\" [ngModelOptions]=\"{ standalone: true }\"\n        >Pull data</mat-checkbox\n      >\n    </div>\n  </form>\n</div>\n<hr />\n<div class=\"d-flex justify-content-end m-auto\">\n  <button *ngIf=\"!isEdit\" mat-stroked-button class=\"mr-auto\" (click)=\"goBack()\">Back</button>\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button\n    mat-flat-button\n    [disabled]=\"dbConnectionForm.invalid\"\n    class=\"btn-primary ml-3\"\n    type=\"submit\"\n    (click)=\"onSubmitConnection(dbConnectionForm.value)\"\n  >\n    {{ isEdit ? 'Update' : 'Create' }}\n  </button>\n</div>\n","import { SpinnerService } from './../../../../shared/spinner.service';\nimport { Router } from '@angular/router';\nimport { CreateConnectionService } from './../../../dashboard/create-connection/create-connection.service';\nimport { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { DataConnectionComponent } from '../data-connection.component';\nimport { Subject, Subscription } from 'rxjs';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { DataService } from '../../data.service';\nimport { environment } from 'src/environments/environment';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-database-form',\n  templateUrl: './database-form.component.html',\n  styleUrls: ['./database-form.component.scss'],\n})\nexport class DatabaseFormComponent implements OnInit, OnDestroy {\n  @Output() goBackFlag = new EventEmitter<boolean>();\n  @Input() dataGroupsArray: Array<any>;\n  @Input() schedularsArray: Array<any>;\n  @Input() sourceType: string;\n  @Input() data: any;\n  @Input() currentDataGroup: string;\n\n  /** Progress spinner settings */\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n  exportProjectDiameter = 50;\n\n  /** Subscription variables */\n  connection$: Subscription;\n  unsubscribe$ = new Subject<boolean>();\n\n  dbConnectionForm: FormGroup;\n  fileToUpload: any;\n  project: any;\n  selectedFolder: string;\n  fileUploadApi: string;\n  dbConns: Array<any>;\n  hidePassword: boolean = true;\n  isPulling: boolean = true;\n  isEdit: boolean = false;\n  connectionIdToUpdate: string;\n  connectionDetails: any;\n  dataschedule: string;\n  // restriction variables\n  appType: string = environment.appType;\n  user: any;\n  allowedNoOfRows: number = 0;\n\n  constructor(\n    private _fb: FormBuilder,\n    private _connection: CreateConnectionService,\n    private _toaster: ToastrService,\n    private _connectionDialogRef: MatDialogRef<DataConnectionComponent>,\n    private _data: DataService,\n    private _localStorage: LocalStorageService,\n    private _router: Router,\n    private _spinner: SpinnerService\n  ) {\n    this.dbConnectionForm = this._fb.group(\n      {\n        connectionName: [\n          '',\n          [Validators.required, Validators.pattern('^[^\\\\s][A-Za-z0-9_\\\\- ]+$')],\n        ],\n        connection: ['', Validators.required],\n        database: ['', Validators.required],\n        query: ['', Validators.required],\n        //predictsensePwd: ['', Validators.required],\n        dataGroupId: ['', Validators.required],\n        parent_id: ['', Validators.nullValidator],\n        dataGroupName: ['', Validators.nullValidator],\n        scheduleId: [''],\n      },\n      {\n        validator: this.validateQuery,\n      }\n    );\n  }\n\n  /**\n   * Initial settings for this page\n   */\n  async ngOnInit(): Promise<any> {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.allowedNoOfRows = this.user?.psFeatures?.allowedNoOfRows;\n    await this.getRequiredConnectionList();\n    /** Prefills the connection form as per the operation - edit/create */\n    this.prefillConnectionForm(this.data);\n  }\n\n  /**\n   * Fetches all required connections list\n   */\n  async getRequiredConnectionList(): Promise<any> {\n    if (this.sourceType === 'snowflake' || this.sourceType === 'bigquery') {\n      this.dbConns = await this._connection\n        .getConnectionsList(this.sourceType)\n        .pipe(takeUntil(this.unsubscribe$))\n        .toPromise();\n    } else {\n      this.dbConns = await this._connection\n        .getDbConnectionList()\n        .pipe(takeUntil(this.unsubscribe$))\n        .toPromise();\n      this.dbConns = this.dbConns?.filter((item: any) => item.source === this.sourceType);\n    }\n  }\n\n  /**\n   * Prefills the connection form for edit and create functionality\n   * @param connectionData selected connection details\n   */\n  prefillConnectionForm(connectionData: any): void {\n    if (connectionData) {\n      this.isEdit = true;\n      this.connectionIdToUpdate = connectionData._id;\n      this._data.getSingleDataConnection(this.project._id, connectionData._id).subscribe(\n        (res: any) => {\n          if (res) {\n            this.connectionDetails = res;\n            this.dbConnectionForm.patchValue({\n              connectionName: res.connectionName,\n              connection: this.dbConns.filter((item) => item._id === res.databaseConnectionId)[0],\n              database: res.databaseName,\n              query: res.query,\n              scheduleId: res.scheduleId,\n            });\n            this.dbConnectionForm.get('dataGroupId').clearValidators();\n            this.dbConnectionForm.get('dataGroupId').updateValueAndValidity();\n           // this.dbConnectionForm.get('predictsensePwd').clearValidators();\n           // this.dbConnectionForm.get('predictsensePwd').updateValueAndValidity();\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Connection');\n        }\n      );\n    } else {\n      this.dbConnectionForm.reset();\n      this.dbConnectionForm.get('dataGroupId').setValue(this.currentDataGroup);\n      this.isEdit = false;\n    }\n  }\n\n  /**\n   * Handles the connection type whether DB or SFTP connection\n   * @param formValue connection details\n   */\n  onSubmitConnection(formValue: any): void {\n    if (this.isEdit) {\n      this.updateConnectionHandler(formValue);\n    } else {\n      this.createConnectionHandler(formValue);\n    }\n  }\n\n  /**\n   * Updates the connection details in DB\n   * @param formData\n   */\n  updateConnectionHandler(formData: any): void {\n    this.connectionDetails.databaseConnectionId = formData.connection._id;\n    this.connectionDetails.connectionName = formData.connectionName;\n    this.connectionDetails.databaseName = formData.database;\n    this.connectionDetails.query = formData.query;\n    this.connectionDetails.projectId = this.project._id;\n\n    /** Logic to update schedulars when we edit */\n    if (formData.scheduleId == 'None') {\n      this.connectionDetails.statusData = 'None';\n    }\n    if (this.dataschedule === undefined) {\n      this.connectionDetails.scheduledata = 'noupdate';\n    } else {\n      this.connectionDetails.scheduledata = this.dataschedule;\n    }\n    this.connectionDetails.scheduleId\n      ? (this.connectionDetails.oldScheduleId = this.connectionDetails.scheduleId)\n      : null;\n    formData.scheduleId ? (this.connectionDetails.scheduleId = formData.scheduleId) : null;\n\n    this._data\n      .updateDataConnection(this.project._id, this.connectionDetails._id, this.connectionDetails)\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.closeModal(res);\n            this._toaster.success(\n              `${this.sourceType.toUpperCase()} connection updated successfully`,\n              'Data Connection'\n            );\n          }\n        },\n        (err: Error) => {\n          this._toaster.success('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Pull the data from the db\n   */\n  createConnectionHandler(formData: any): void {\n    formData.scheduleId ? formData.scheduleId : delete formData.scheduleId;\n    formData.dataGroupName ? formData.dataGroupName : delete formData.dataGroupName;\n    formData.parent_id ? formData.parent_id : delete formData.parent_id;\n\n    let reqObj: object = {\n      ...formData,\n      source: this.sourceType,\n      isPulling: this.isPulling,\n    };\n    this._data.pullData(this.project._id, reqObj).subscribe(\n      (res: any) => {\n        if (res) {\n          this.closeModal(res);\n          this._toaster.success(\n            `${this.sourceType.toUpperCase()} connection created successfully`,\n            'Data Connection'\n          );\n        }\n      },\n      (err: HttpErrorResponse) => {\n        this._toaster.error(err.error.message || 'Server Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Calls whenever the schedular is changed\n   * @param event\n   */\n  schedularChanged(scheduleId: any): void {\n    if (!this.connectionDetails?.scheduleId) {\n      this.dataschedule = 'new';\n    } else if (this.connectionDetails.scheduleId !== scheduleId) {\n      this.dataschedule = 'update';\n    } else {\n      this.dataschedule = 'noupdate';\n    }\n  }\n\n  /**\n   * Navigates to the data source type selection page\n   */\n  goBack(): void {\n    this.goBackFlag.emit(true);\n  }\n\n  /**\n   * Call when the folder selection is changed\n   */\n  onFolderChange(folderName: string) {\n    this.selectedFolder = folderName;\n    if (this.selectedFolder === 'Add') {\n      this.dbConnectionForm.get('dataGroupName').setValidators(Validators.required);\n      this.dbConnectionForm.get('dataGroupName').updateValueAndValidity();\n      this.dbConnectionForm.get('parent_id').setValidators(Validators.required);\n      this.dbConnectionForm.get('parent_id').updateValueAndValidity();\n    } else {\n      this.dbConnectionForm.get('dataGroupName').clearValidators();\n      this.dbConnectionForm.get('dataGroupName').updateValueAndValidity();\n      this.dbConnectionForm.get('parent_id').clearValidators();\n      this.dbConnectionForm.get('parent_id').updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this._connectionDialogRef.close(data);\n  }\n\n  /**\n   * Navigates the user to the schedular page to create new\n   */\n  navigateToScheduler() {\n    this.closeModal();\n    this._spinner.stopSpinner();\n    this._router.navigateByUrl('/dashboard/scheduler?type=scheduler');\n  }\n\n  /**\n   * Custom validator for query string, it returns boolean value\n   * @param queryString input query string\n   */\n  validateQuery(queryString: AbstractControl): void {\n    let str: string = queryString.get('query').value;\n    if (str?.length) {\n      str = str.toLowerCase();\n      if (!str.includes('select')) {\n        queryString.get('query').setErrors({ queryInvalid: true });\n      }\n    }\n  }\n\n  /**\n   * Unsubscribes the subscriptions, only if they were subscribed\n   */\n  ngOnDestroy() {\n    if (this.connection$) {\n      this.connection$.unsubscribe();\n    }\n  }\n}\n","<div class=\"mat-typography\">\n  <form [formGroup]=\"dynamicForm\" role=\"form\" class=\"form-validate\" name=\"dynamicForm\">\n    <div class=\"row\">\n      <!-- Connection Name -->\n      <div class=\"{{\n          (sourceType === 'sftp' && !isEdit) || sourceType === 's3' ? 'col-md-6' : 'col-md-12 '\n        }}\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"connectionName\">Connection name</mat-label>\n          <input matInput type=\"text\" name=\"connectionName\" formControlName=\"connectionName\" id=\"connectionName\"\n            placeholder=\"Enter connection name\" autocomplete required />\n          <mat-error *ngIf=\"\n              dynamicForm.get('connectionName').hasError('required') &&\n              (dynamicForm.get('connectionName').dirty || dynamicForm.get('connectionName').touched)\n            \">Connection name is required.</mat-error>\n          <mat-error *ngIf=\"dynamicForm.get('connectionName').hasError('pattern')\">Invalid connection name</mat-error>\n        </mat-form-field>\n      </div>\n      <!-- Select connection dropdown (SFTP) -->\n      <div *ngIf=\"sourceType === 'sftp' && !isEdit\" formGroupName=\"sftpGroup\"\n        class=\"{{ sourceType === 'sftp' ? 'col-md-6 ' : 'd-none' }}\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"inputdatabase\">Select connection</mat-label>\n          <mat-select formControlName=\"connection\" (selectionChange)=\"connectionChanged($event)\" required>\n            <mat-option *ngFor=\"let con of sftpConns\" [value]=\"con\">{{ con.name }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('sftpGroup.connection').hasError('required') &&\n              (dynamicForm.get('sftpGroup.connection').dirty ||\n                dynamicForm.get('sftpGroup.connection').touched)\n            \">Connection is required.</mat-error>\n        </mat-form-field>\n      </div>\n      <!-- Select connection dropdown (S3) -->\n      <div *ngIf=\"sourceType === 's3'\" formGroupName=\"s3Group\"\n        class=\"{{ sourceType === 's3' ? 'col-md-6' : 'd-none' }}\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"inputdatabase\">Select connection</mat-label>\n          <mat-select formControlName=\"connection\" (selectionChange)=\"connectionChanged($event)\" required>\n            <mat-option *ngFor=\"let con of s3Conns\" [value]=\"con\">{{ con.name }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('s3Group.connection').hasError('required') &&\n              (dynamicForm.get('s3Group.connection').dirty ||\n                dynamicForm.get('s3Group.connection').touched)\n            \">Connection is required.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div *ngIf=\"sourceType === 's3'\" class=\"row\">\n      <!-- BUCKETS dropdown (S3) -->\n      <div formGroupName=\"s3Group\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"inputdatabase\">Select bucket</mat-label>\n          <mat-select formControlName=\"bucket\" required>\n            <mat-option *ngFor=\"let con of s3BucketsArray\" [value]=\"con\">{{ con }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('s3Group.bucket').hasError('required') &&\n              (dynamicForm.get('s3Group.bucket').dirty || dynamicForm.get('s3Group.bucket').touched)\n            \">Bucket is required.</mat-error>\n        </mat-form-field>\n      </div>\n      <!-- BUCKET folder path (S3) -->\n      <div formGroupName=\"s3Group\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"bucketFolderPath\">Bucket folder path (optional)</mat-label>\n          <input matInput type=\"text\" name=\"bucketFolderPath\" formControlName=\"bucketFolderPath\" id=\"bucketFolderPath\"\n            placeholder=\"Eg: upload or upload/demo\" />\n          <!-- <mat-hint>Note: Will pull all files from the provided path</mat-hint> -->\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div class=\"row mb-5\" *ngIf=\"(isEdit || sourceType === 'sftp')\">\n      <!-- Folder tree structure -->\n      <div *ngIf=\"!isEdit\" class=\"col-md-6 overflow-auto\">\n        <mat-label for=\"folder-path\" class=\"ml-2\">Folder path tree</mat-label>\n        <!-- <i class=\"fa fa-level-up\" (click)=\"previousTree()\"></i> -->\n        <a class=\"text-decoration-none ml-2\" (click)=\"previousTree()\" style=\"cursor: pointer\">Back</a>\n        <!-- <button class=\"mr-1 btn btn-labeled mb-2\" type=\"button\">\n          <span class=\"btn-label\"><i class=\"fa fa-exclamation\"></i>\n          </span>Info</button> -->\n        <tree-root #tree [nodes]=\"nodes\" [focused]=\"true\" [options]=\"options\" [ngClass]=\"'expand_tree'\">\n          <ng-template #treeNodeTemplate let-node>\n            <span title=\"{{node.data.subTitle}}\" (click)=\"treeHandler(node)\">{{ node.data.label }}</span>\n            <!-- <span class=\"float-right\">{{ childrenCount(node) }}</span> -->\n          </ng-template>\n          <ng-template #loadingTemplate>Loading, please hold....</ng-template>\n        </tree-root>\n        <mat-hint class=\"text-sm ml-3 mb-3\">Note: Above tree is supported upto 2 levels only.</mat-hint>\n      </div>\n      <!-- Selected folder path -->\n      <div *ngIf=\"sourceType === 'sftp'\" formGroupName=\"sftpGroup\" class=\"{{ isEdit ? 'col-md-12 ' : 'col-md-6 ' }}\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"folderpath\">Selected folder path</mat-label>\n          <input matInput type=\"text\" name=\"connectionName\" formControlName=\"folderpath\" id=\"folderpath\"\n            placeholder=\"Enter selected folder path\" required [value]=\"selectedPath\" />\n          <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"\n              selectedPath = '';\n              nodesArray = [];\n              dynamicForm.get('sftpGroup.folderpath').setValue('');\n              resetTreeNode();\n            \">\n            <mat-icon>close</mat-icon>\n          </button>\n          <mat-error *ngIf=\"\n              dynamicForm.get('sftpGroup.folderpath').hasError('required') &&\n              (dynamicForm.get('sftpGroup.folderpath').dirty ||\n                dynamicForm.get('sftpGroup.folderpath').touched)\n            \">Folder path is required.</mat-error>\n          <mat-hint>Note: You can use folder path input for more nested structure.</mat-hint>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div class=\"row mt-2\">\n      <!-- select file extentsion (SFTP) -->\n      <div *ngIf=\"sourceType === 'sftp'\" formGroupName=\"sftpGroup\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select file extentsion</mat-label>\n          <mat-select formControlName=\"fileExtension\" required>\n            <mat-option *ngFor=\"let type of sftpFileTypes\" [value]=\"type.value\">{{\n              type.name\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('sftpGroup.fileExtension').hasError('required') &&\n              (dynamicForm.get('sftpGroup.fileExtension').dirty ||\n                dynamicForm.get('sftpGroup.fileExtension').touched)\n            \">File extentsion is required.\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <!-- select file type for (URL connection) -->\n      <div *ngIf=\"sourceType === 'url' && !isEdit\" formGroupName=\"urlGroup\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select resource type</mat-label>\n          <mat-select formControlName=\"filetype\" required>\n            <mat-option *ngFor=\"let type of urlSources\" [value]=\"type.value\">{{\n              type.name\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('urlGroup.filetype').hasError('required') &&\n              (dynamicForm.get('urlGroup.filetype').dirty ||\n                dynamicForm.get('urlGroup.filetype').touched)\n            \">URL resource type is required.\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <!-- select schedular -->\n      <div class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"scheduleId\">Select scheduler</mat-label>\n          <mat-select formControlName=\"scheduleId\" (selectionChange)=\"schedularChanged($event.value)\">\n            <mat-option value=\"None\">None</mat-option>\n            <!-- <mat-option value=\"\">None</mat-option> -->\n            <mat-option *ngFor=\"let item of schedularsArray\" [value]=\"item._id\">{{\n              item.scheduleName\n              }}</mat-option>\n          </mat-select>\n          <mat-hint *ngIf=\"!schedularsArray.length\" class=\"redirect-link\">\n            <a class=\"text-decoration-none\" (click)=\"navigateToScheduler()\" style=\"cursor: pointer\">Add scheduler</a>\n          </mat-hint>\n        </mat-form-field>\n      </div>\n      <!-- select file extentsion (S3) -->\n      <div *ngIf=\"sourceType === 's3'\" formGroupName=\"s3Group\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select file extentsion</mat-label>\n          <mat-select formControlName=\"fileExtension\" required>\n            <mat-option *ngFor=\"let type of sftpFileTypes\" [value]=\"type.value\">{{\n              type.name\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('s3Group.fileExtension').hasError('required') &&\n              (dynamicForm.get('s3Group.fileExtension').dirty ||\n                dynamicForm.get('s3Group.fileExtension').touched)\n            \">File extentsion is required.\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <!-- Select data format radio buttons for URL connection -->\n      <div *ngIf=\"\n          sourceType === 'url' && (dynamicForm.get('urlGroup.filetype').value === 'url' || isEdit)\n        \" class=\"col-md-6\">\n        <label id=\"dataFormat\">Data format</label>\n        <mat-radio-group aria-labelledby=\"dataFormat\" class=\"radio-group my-2 ml-1\" [(ngModel)]=\"dataFormat\"\n          [ngModelOptions]=\"{ standalone: true }\">\n          <mat-radio-button value=\"csv\">CSV</mat-radio-button>\n          <mat-radio-button value=\"json\">JSON</mat-radio-button>\n        </mat-radio-group>\n      </div>\n      <!-- select folder -->\n      <div *ngIf=\"!isEdit\" class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select folder</mat-label>\n          <mat-select formControlName=\"dataGroupId\" (selectionChange)=\"folderChangedHandler($event)\" required>\n            <mat-option value=\"Add\">Create new folder</mat-option>\n            <mat-option *ngFor=\"let folder of dataGroupsArray\" [value]=\"folder._id\">{{\n              folder.name\n              }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Add new folder block -->\n    <div class=\"row\" *ngIf=\"selectedFolder === 'Add' && !isEdit\">\n      <!-- Folder name input -->\n      <div class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"dataGroupName\">Folder name</mat-label>\n          <input matInput type=\"text\" name=\"dataGroupName\" id=\"dataGroupName\" formControlName=\"dataGroupName\"\n            placeholder=\"Enter folder name\" required />\n          <mat-error *ngIf=\"\n              dynamicForm.get('dataGroupName').hasError('required') &&\n              (dynamicForm.get('dataGroupName').dirty || dynamicForm.get('dataGroupName').touched)\n            \">Folder name is required.\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <!-- Parent folder selection -->\n      <div class=\"col-md-6\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select parent folder</mat-label>\n          <mat-select formControlName=\"parent_id\" required>\n            <mat-option *ngFor=\"let folder of dataGroupsArray\" [value]=\"folder._id\">{{\n              folder.name\n              }}</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"\n              dynamicForm.get('parent_id').hasError('required') &&\n              (dynamicForm.get('parent_id').dirty || dynamicForm.get('parent_id').touched)\n            \">Parent folder is required.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- URL input -->\n    <div class=\"row\" *ngIf=\"sourceType === 'url'\">\n      <div formGroupName=\"urlGroup\" class=\"col-md-12\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"url\">URL</mat-label>\n          <input matInput type=\"url\" name=\"url\" formControlName=\"url\" id=\"url\" placeholder=\"Enter URL\" autocomplete\n            required />\n          <mat-error *ngIf=\"\n              dynamicForm.get('urlGroup.url').hasError('required') &&\n              (dynamicForm.get('urlGroup.url').dirty || dynamicForm.get('urlGroup.url').touched)\n            \">URL is required.</mat-error>\n          <mat-error *ngIf=\"dynamicForm.get('urlGroup.url').hasError('url')\">Invalid URL.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Pull data checkbox -->\n    <div *ngIf=\"!isEdit\" class=\"mt-3 ml-1\">\n      <mat-checkbox [(ngModel)]=\"isPulling\" [ngModelOptions]=\"{ standalone: true }\">Pull data</mat-checkbox>\n    </div>\n\n    <!-- HINT -->\n    <div *ngIf=\"sourceType === 'sftp' || sourceType === 's3'\" class=\"mt-3\">\n      <mat-hint>Note:\n        <ul>\n          <li *ngIf=\"sourceType === 's3'\">\n            It will pull all files from selected bucket or folder path (optional)\n          </li>\n          <li *ngIf=\"sourceType === 'sftp'\">It will pull all files from selected folder path</li>\n          <li>Files will be pulled, only if they have been modified or new are added</li>\n        </ul>\n      </mat-hint>\n    </div>\n  </form>\n</div>\n<hr />\n<div class=\"d-flex justify-content-end m-auto\">\n  <button *ngIf=\"!isEdit\" mat-stroked-button class=\"mr-auto\" ccolor=\"basic\" (click)=\"goBack()\">\n    Back\n  </button>\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button mat-flat-button [disabled]=\"dynamicForm.invalid\" class=\"btn-primary ml-3\" type=\"submit\"\n    (click)=\"onSubmitConnection(dynamicForm.value)\">\n    {{ isEdit ? 'Update' : 'Create' }}\n  </button>\n</div>","import { takeUntil } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { SpinnerService } from './../../../../shared/spinner.service';\nimport { NestedTreeControl } from '@angular/cdk/tree';\nimport { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\nimport { MatTreeNestedDataSource, MatTreeModule, MatTree } from '@angular/material/tree';\nimport { CustomValidators } from 'ngx-custom-validators';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject, Subscription } from 'rxjs';\nimport { CreateConnectionService } from 'src/app/routes/dashboard/create-connection/create-connection.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { DataService } from '../../data.service';\nimport { DataConnectionComponent } from '../data-connection.component';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { toasterMsg } from 'src/app/shared/static-data';\nimport { TreeNode, TREE_ACTIONS, KEYS, IActionMapping } from '@circlon/angular-tree-component';\nimport { isArray } from 'rxjs/internal-compatibility';\n\n@Component({\n  selector: 'app-sftp-and-url-form',\n  templateUrl: './sftp-and-url-form.component.html',\n  styleUrls: ['./sftp-and-url-form.component.scss'],\n  providers: [MatTree],\n})\nexport class SftpAndUrlFormComponent implements OnInit, OnDestroy {\n  @Output() goBackFlag = new EventEmitter<boolean>();\n  @Input() dataGroupsArray: Array<any>;\n  @Input() schedularsArray: Array<any>;\n  @Input() sourceType: string;\n  @Input() data: any;\n  @Input() currentDataGroup: string;\n\n  options: IActionMapping = {\n    mouse: {\n      contextMenu: (tree, node, $event) => {\n        $event.preventDefault();\n        alert(`context menu for ${node.data.name}`);\n      },\n      dblClick: TREE_ACTIONS.TOGGLE_EXPANDED,\n      click: (tree, node, $event) => {\n        $event.shiftKey\n          ? TREE_ACTIONS.TOGGLE_ACTIVE_MULTI(tree, node, $event)\n          : TREE_ACTIONS.TOGGLE_ACTIVE(tree, node, $event);\n      },\n    },\n    keys: {\n      [KEYS.ENTER]: (tree, node, $event) => alert(`This is ${node.data.name}`),\n    },\n  };\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** SFTP file extensions */\n  sftpFileTypes: Array<object> = [\n    {\n      name: 'XLS',\n      value: '.xls',\n      type: 'xls',\n    },\n    {\n      name: 'XLSX',\n      value: '.xlsx',\n      type: 'xlsx',\n    },\n    {\n      name: 'CSV',\n      value: '.csv',\n      type: 'csv',\n    },\n    // {\n    //   name: 'PDF',\n    //   value: '.pdf',\n    //   type: 'pdf',\n    // },\n    // {\n    //   name: 'EDI',\n    //   value: '.edi',\n    //   type: 'edi',\n    // },\n    // {\n    //   name: 'HTML',\n    //   value: '.html',\n    //   type: 'html',\n    // },\n  ];\n\n  /** URL source file extensions */\n  urlSources: Array<object> = [\n    {\n      name: 'URL',\n      value: 'url',\n      type: 'url',\n    },\n  ];\n\n  /** Progress spinner settings */\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  diameter = 100;\n  exportProjectDiameter = 50;\n\n  /** Subscription variables */\n  connection$: Subscription;\n  dataConnection$: Subscription;\n\n  /** Tree settings */\n  treeControl = new NestedTreeControl<any>((node) => node.children);\n  dataSource = new MatTreeNestedDataSource<any>();\n\n  sftpForm: FormGroup;\n  s3Form: FormGroup;\n  urlForm: FormGroup;\n  dynamicForm: FormGroup;\n  fileToUpload: any;\n  project: any;\n  selectedFolder: string;\n  sftpConns: Array<any>;\n  s3Conns: Array<any>;\n  hidePassword: boolean = true;\n  isPulling: boolean = true;\n  isEdit: boolean = false;\n  showSftpSpinner: boolean = false;\n  nodesArray: Array<any> = [];\n  sftpId: string;\n  selectedPath: string;\n  dataFormat: string = 'csv';\n  connectionIdToUpdate: string;\n  sftpDetails: any;\n  urlDetails: any;\n  dataschedule: string;\n  s3BucketsArray: Array<any> = [];\n  s3Details: any;\n  nodes: any[] = null;\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _fb: FormBuilder,\n    private _connection: CreateConnectionService,\n    private _toaster: ToastrService,\n    private _connectionDialogRef: MatDialogRef<DataConnectionComponent>,\n    private _data: DataService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _router: Router,\n    private _utils: UtilsService\n  ) {\n    /** Form instances */\n    this.s3Form = this._fb.group({\n      connection: ['', Validators.required],\n      bucket: ['', Validators.required],\n      fileExtension: ['', Validators.required],\n      bucketFolderPath: [''],\n    });\n    this.sftpForm = this._fb.group({\n      connection: ['', this.dialogData.data ? Validators.nullValidator : Validators.required],\n      fileExtension: ['', this.dialogData.data ? Validators.nullValidator : Validators.required],\n      folderpath: ['', this.dialogData.data ? Validators.nullValidator : Validators.required],\n    });\n    this.urlForm = this._fb.group({\n      filetype: ['', this.dialogData.data ? Validators.nullValidator : Validators.required],\n      url: [\n        '',\n        this.dialogData.data\n          ? Validators.nullValidator\n          : [Validators.required, CustomValidators.url],\n      ],\n    });\n  }\n\n  /**\n   * Initial settings for this page\n   */\n  async ngOnInit(): Promise<any> {\n    this.dynamicForm = this._fb.group({\n      connectionName: ['', [Validators.required, Validators.pattern('^[^\\\\s][A-Za-z0-9_\\\\- ]+$')]],\n      dataGroupId: ['', Validators.required],\n      dataGroupName: ['', Validators.nullValidator],\n      parent_id: ['', Validators.nullValidator],\n      scheduleId: [''],\n      sftpGroup: this.sourceType === 'sftp' ? this.sftpForm : '',\n      urlGroup: this.sourceType === 'url' ? this.urlForm : '',\n      s3Group: this.sourceType === 's3' ? this.s3Form : '',\n    });\n\n    this.project = this._localStorage.getItem('project');\n    if (this.sourceType === 's3') {\n      this.s3Conns = await this._connection\n        .getConnectionsList(this.sourceType)\n        .pipe(takeUntil(this.unsubscribe$))\n        .toPromise();\n    } else if (this.sourceType === 'sftp') {\n      this.sftpConns = await this._connection\n        .getSftpConnectionList()\n        .pipe(takeUntil(this.unsubscribe$))\n        .toPromise();\n    }\n\n    /** Prefills the connection form as per the operation - edit/create */\n    this.prefillConnectionForm(this.dialogData.data);\n    this.dataSource.data = [{ label: '/' }];\n    this.nodes = [\n      {\n        expanded: true,\n        label: '/',\n      },\n    ];\n  }\n\n  previousTree() {\n    // console.log(\"m here**************************\", this.selectedPath);\n    var getPath = this.selectedPath;\n    let lastword, src, finalRec, m;\n    src = getPath.replace('//', '/');\n    lastword = src.lastIndexOf('/');\n    //  console.log(\"************************\", lastword);\n    m = src.substring(lastword + 1);\n    if (lastword === -1) {\n      finalRec = undefined;\n      this.selectedPath = '';\n    } else {\n      finalRec = src.replace('/' + m, '');\n      this.selectedPath = finalRec;\n      finalRec = finalRec.replace('//', '/');\n    }\n    // console.log(\"m finalrec*************************\", finalRec);\n    const conn = this.sftpConns.filter(\n      (item) => item.name === this.sftpForm.get('connection').value.name\n    )[0];\n    this.getSFTPFolders(conn._id, finalRec);\n  }\n  /**\n   * Prefill the connection form for edit/create functionality\n   * @param connectionData selected connectio details\n   */\n  prefillConnectionForm(connectionData: any): void {\n    if (connectionData) {\n      this.isEdit = true;\n      this.dynamicForm.get('dataGroupId').clearValidators();\n      this.dynamicForm.get('dataGroupId').updateValueAndValidity();\n      this.connectionIdToUpdate = connectionData._id;\n      this._data.getSingleDataConnection(this.project._id, connectionData._id).subscribe(\n        (res: any) => {\n          if (res) {\n            if (res.source === 'sftp') {\n              this.sftpDetails = res;\n            } else if (res.source === 'url') {\n              this.urlDetails = res;\n            } else if (res.source === 's3') {\n              this.s3Details = res;\n            }\n            this.s3BucketsArray.push(res.bucket);\n            this.dynamicForm.patchValue({\n              connectionName: res.connectionName,\n              scheduleId: res.scheduleId || 'None',\n              sftpGroup: {\n                connection:\n                  this.sourceType === 'sftp'\n                    ? this.sftpConns.filter((item) => item._id === res.sftpConnectionId)[0]\n                    : null,\n                fileExtension: res.fileExtension || res.fileExtension,\n                folderpath: res.folderPath,\n              },\n              urlGroup: { url: res.url },\n              s3Group: {\n                connection:\n                  this.sourceType === 's3'\n                    ? this.s3Conns?.filter((item) => item._id === res.s3ConnectionId)[0]\n                    : null,\n                fileExtension: res.fileExtension,\n                bucketFolderPath: res.bucketFolderPath,\n                bucket: res.bucket,\n              },\n            });\n            this.dynamicForm.updateValueAndValidity();\n            this.dataFormat = res.dataFormat;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Connection');\n        }\n      );\n    } else {\n      // this.dynamicForm.reset();\n      this.dynamicForm.get('dataGroupId').setValue(this.currentDataGroup);\n      this.isEdit = false;\n    }\n  }\n\n  /**\n   * Called when the folder(data group) selection is changed\n   * @param event\n   */\n  folderChangedHandler(event: any): void {\n    this.selectedFolder = event.value;\n    if (this.selectedFolder === 'Add') {\n      this.dynamicForm.get('dataGroupName').setValidators(Validators.required);\n      this.dynamicForm.get('parent_id').setValidators(Validators.required);\n      this.dynamicForm.get('dataGroupName').updateValueAndValidity();\n      this.dynamicForm.get('parent_id').updateValueAndValidity();\n    } else {\n      this.dynamicForm.get('dataGroupName').clearValidators();\n      this.dynamicForm.get('parent_id').clearValidators();\n      this.dynamicForm.get('dataGroupName').updateValueAndValidity();\n      this.dynamicForm.get('parent_id').updateValueAndValidity();\n    }\n  }\n\n  /**\n   *\n   * @param $event\n   */\n  connectionChanged(event: any): void {\n    if (this.sourceType === 's3') {\n      this._spinner.showSpinner();\n      this.getS3Buckets(event);\n    } else {\n      this.getSFTPFolders(event.value._id);\n    }\n  }\n\n  /**\n   * Fetches the selected s3 connection buckets list\n   */\n  getS3Buckets(event: any): void {\n    this._data\n      .getS3BucketsList(event.value._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (isArray(res.buckets)) {\n            this.s3BucketsArray = res.buckets;\n          } else {\n            this._toaster.error(res.buckets || 'Cannot fetch S3 buckets list', 'Data Connection');\n          }\n        },\n        (e: any) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(e.error.message || 'Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Fetches the selected sftp connection folder details (tree)\n   */\n  getSFTPFolders(conId: any, folderName?: string): void {\n    // if (folderName == undefined) {\n    //   console.log(folderName);\n    //   this.nodesArray?.push('/');\n    // }\n    //  console.log(this.nodesArray, folderName);\n    if (!folderName) {\n      this.dataSource.data = [{ label: 'Fetching details from remote server...' }];\n    }\n    this._spinner.showSpinner();\n    this.sftpId = conId;\n    this.dataConnection$ = this._data.getSftpFolderDetails(conId, folderName || 'first').subscribe(\n      (res: any) => {\n        if (res.length) {\n          this.nodes = res;\n          // console.log(this.nodes, folderName);\n          if (folderName !== undefined && folderName !== '') {\n            //   this.dataSource.data.pop();\n            //   this.dataSource.data = res;\n            // } else {\n            // this.nodes[0].map((i: any) => {\n            let label = [];\n            label = folderName.split('/');\n            //  console.log(\"***********************\", label, res[0].label);\n            // if (i.label === res[0].label) {\n            //   i.children = res[0].children;\n            // }\n            this.nodes[0].label = label.slice().pop();\n            // return i;\n            // });\n          }\n          // this.nodes = this.dataSource.data;\n          // this.refreshTreeData();\n          this._spinner.stopSpinner();\n        } else {\n          this._toaster.error('Cannot fetch SFTP folders structure', 'Data Connection');\n          this._spinner.stopSpinner();\n        }\n      },\n      (e: any) => {\n        this.dataSource.data = [{ label: 'Cannot fetch details from remote server' }];\n        this._spinner.stopSpinner();\n        this._toaster.error(e.error.message || 'Server Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Refresh the tree structure to render updated values\n   */\n  refreshTreeData(): void {\n    const data = this.dataSource.data;\n    this.dataSource.data = [];\n    this.dataSource.data = data;\n  }\n\n  /**\n   * Handles the click event on tree nodes and binds the base path, with selected folder name\n   * @param node selected node\n   */\n  treeHandler(node: any): any {\n    this.nodesArray?.push(node.data.label);\n    // console.log(this.nodesArray);\n    this.selectedPath = this.nodesArray.toString().split(',').join('/');\n    const conn = this.sftpConns.filter(\n      (item) => item.name === this.sftpForm.get('connection').value.name\n    )[0];\n    // console.log(this.selectedPath);\n    this.getSFTPFolders(conn._id, this.selectedPath);\n    this.sftpForm.get('folderpath').setValue(this.selectedPath);\n  }\n\n  resetTreeNode() {\n    const conn = this.sftpConns.filter(\n      (item) => item.name === this.sftpForm.get('connection').value.name\n    )[0];\n    // console.log(this.selectedPath);\n    this.getSFTPFolders(conn._id, this.selectedPath);\n  }\n  /** Checks and return true if parent has child nodes */\n  hasChild = (_: number, node: any) => !!node.children && node.children.length > 0;\n\n  /**\n   * Displays the previous node in folder tree structure\n   */\n  showPreviousNode() {\n    // let getPath = this.selectedPath;\n    // let lastword: any;\n    // let src: any;\n    // let finalRec: any;\n    // let m: any;\n    // src = getPath.replace(\"//\", \"/\");\n    // lastword = src.lastIndexOf(\"/\");\n    // m = src.substring(lastword + 1);\n    // if (lastword == 0) {\n    //   finalRec = \"first\";\n    //   this.selectedPath = \"/\";\n    // } else {\n    //   finalRec = src.replace(\"/\" + m, \"\");\n    //   this.selectedPath = finalRec;\n    //   finalRec = finalRec.replace(\"//\", \"/\");\n    // }\n    // this.dataConnection$ = this._data.getSftpFolderDetails(this.sftpId, finalRec).subscribe((res: any) => {\n    //   if (res) {\n    //     this.dataSource.data = res;\n    //   }\n    // }, (err: Error) => {\n    //   this._toaster.error('Server Error', 'Data Connection');\n    // });\n  }\n\n  /**\n   * Navigates to the data source type selection page\n   */\n  goBack(): void {\n    this.goBackFlag.emit(true);\n  }\n\n  /**\n   * Handles the connection type whether DB or SFTP connection\n   * @param formValue connection details\n   */\n  onSubmitConnection(formValue: any): void {\n    this._spinner.showSpinner();\n    if (this.isEdit) {\n      this.updateConnectionHandler(formValue);\n    } else {\n      this.createConnectionHandler(formValue);\n    }\n  }\n\n  /**\n   * Handles the update connection form as per the type - url/sftp\n   * @param formData\n   */\n  updateConnectionHandler(formData: any): void {\n    if (this.sftpDetails) {\n      this.updateSftpConnection(formData);\n    } else if (this.urlDetails) {\n      this.updateUrlConnection(formData);\n    } else if (this.s3Details) {\n      this.updateS3Connection(formData);\n    }\n  }\n\n  /**\n   * Updates the URL data in DB\n   * @param formData\n   */\n  updateUrlConnection(formData: any): void {\n    this.urlDetails.connectionName = formData.connectionName;\n    this.urlDetails.url = formData.urlGroup.url;\n    this.urlDetails.dataFormat = this.dataFormat;\n    this.urlDetails.projectId = this.project._id;\n\n    /** Logic to update schedulars when we edit */\n    if (formData.scheduleId == 'None') {\n      this.urlDetails.statusData = 'None';\n    }\n    if (this.dataschedule === undefined) {\n      this.urlDetails.scheduledata = 'noupdate';\n    } else {\n      this.urlDetails.scheduledata = this.dataschedule;\n    }\n    this.urlDetails.scheduleId\n      ? (this.urlDetails.oldScheduleId = this.urlDetails.scheduleId)\n      : null;\n    formData.scheduleId ? (this.urlDetails.scheduleId = formData.scheduleId) : null;\n\n    this._data\n      .updateDataConnection(this.project._id, this.urlDetails._id, this.urlDetails)\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.closeModal(res);\n            this._toaster.success(\n              `${this.urlDetails.source.toUpperCase()} connection updated successfully`,\n              'Data Connection'\n            );\n          }\n        },\n        (err: Error) => {\n          this._toaster.success('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Updates the SFTP connection details in DB\n   * @param formData\n   */\n  updateSftpConnection(formData: any): void {\n    this.sftpDetails.connectionName = formData.connectionName;\n    this.sftpDetails.folderPath = formData.sftpGroup.folderpath;\n    this.sftpDetails.fileExtension = formData.sftpGroup.fileExtension;\n    this.sftpDetails.projectId = this.project._id;\n\n    /** Logic to update schedulars when we edit */\n    if (formData.scheduleId == 'None') {\n      this.sftpDetails.statusData = 'None';\n    }\n    if (this.dataschedule === undefined) {\n      this.sftpDetails.scheduledata = 'noupdate';\n    } else {\n      this.sftpDetails.scheduledata = this.dataschedule;\n    }\n    this.sftpDetails.scheduleId\n      ? (this.sftpDetails.oldScheduleId = this.sftpDetails.scheduleId)\n      : null;\n    formData.scheduleId ? (this.sftpDetails.scheduleId = formData.scheduleId) : null;\n\n    this._data\n      .updateDataConnection(this.project._id, this.sftpDetails._id, this.sftpDetails)\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.closeModal(res);\n            this._toaster.success(\n              `${this.sftpDetails.source.toUpperCase()} connection updated successfully`,\n              'Data Connection'\n            );\n          }\n        },\n        (err: Error) => {\n          this._toaster.success('Server Error', 'Data Connection');\n        }\n      );\n  }\n\n  /**\n   * Updates the S3 connection details in DB\n   * @param formData\n   */\n  updateS3Connection(formData: any): void {\n    this.s3Details.connectionName = formData.connectionName;\n    this.s3Details.fileExtension = formData.s3Group.fileExtension;\n    this.s3Details.projectId = this.project._id;\n    this.s3Details.s3ConnectionId = this.s3Conns?.filter(\n      (item) => item._id === formData.s3Group.connection._id\n    )[0]._id;\n    this.s3Details.bucket = formData.s3Group.bucket;\n    this.s3Details.bucketFolderPath = formData.s3Group.bucketFolderPath;\n\n    /** Logic to update schedulars when we edit */\n    if (formData.scheduleId == 'None') {\n      this.s3Details.statusData = 'None';\n    }\n    if (this.dataschedule === undefined) {\n      this.s3Details.scheduledata = 'noupdate';\n    } else {\n      this.s3Details.scheduledata = this.dataschedule;\n    }\n    this.s3Details.scheduleId ? (this.s3Details.oldScheduleId = this.s3Details.scheduleId) : null;\n    formData.scheduleId ? (this.s3Details.scheduleId = formData.scheduleId) : null;\n\n    this._data.updateDataConnection(this.project._id, this.s3Details._id, this.s3Details).subscribe(\n      (res: any) => {\n        if (res) {\n          this.closeModal(res);\n          this._toaster.success(\n            `${this.s3Details.source.toUpperCase()} connection updated successfully`,\n            'Data Connection'\n          );\n        }\n      },\n      (err: Error) => {\n        this._toaster.success('Server Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Pulls the data from the sftp connection\n   */\n  createConnectionHandler(formData: any): void {\n    let reqObj: any;\n    formData.scheduleId ? formData.scheduleId : delete formData.scheduleId;\n    formData.dataGroupName ? formData.dataGroupName : delete formData.dataGroupName;\n    formData.parent_id ? formData.parent_id : delete formData.parent_id;\n\n    /** Generates dynamic request data as per the source type */\n    if (this.sourceType === 'sftp') {\n      reqObj = {\n        ...formData,\n        ...formData.sftpGroup,\n        source: this.sourceType,\n        isPulling: this.isPulling,\n      };\n    } else if (this.sourceType === 'url') {\n      reqObj = {\n        ...formData,\n        ...formData.urlGroup,\n        source: this.sourceType,\n        dataFormat: this.dataFormat,\n        isPulling: this.isPulling,\n      };\n    } else if (this.sourceType === 's3') {\n      reqObj = {\n        ...formData,\n        ...formData.s3Group,\n        source: this.sourceType,\n        isPulling: this.isPulling,\n      };\n    }\n    delete reqObj.sftpGroup;\n    delete reqObj.urlGroup;\n    delete reqObj.s3Group;\n    this._data.pullData(this.project._id, reqObj).subscribe(\n      (res: any) => {\n        if (res) {\n          this.closeModal(res);\n          this.isPulling\n            ? this._utils.showSnackBar(toasterMsg.pullData)\n            : this._toaster.success(\n                `${this.sourceType.toUpperCase()} connection created successfully`,\n                'Data Connection'\n              );\n        }\n        this._spinner.stopSpinner();\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Server Error', 'Data Connection');\n      }\n    );\n  }\n\n  /**\n   * Calls whenever the schedular is changed\n   * @param event\n   */\n  schedularChanged(scheduleId: any): void {\n    switch (this.sourceType) {\n      case 'sftp':\n        this.mapSchedular(this.sftpDetails, scheduleId);\n        break;\n      case 'url':\n        this.mapSchedular(this.urlDetails, scheduleId);\n        break;\n      case 's3':\n        this.mapSchedular(this.s3Details, scheduleId);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Maps the scheduler related data\n   * @param data Selected connection details (SFTP/S3/URL)\n   * @param scheduleId\n   */\n  mapSchedular(data: any, scheduleId: string): void {\n    if (data.scheduleId === undefined) {\n      this.dataschedule = 'new';\n    } else if (data.scheduleId !== scheduleId) {\n      this.dataschedule = 'update';\n    } else {\n      this.dataschedule = 'noupdate';\n    }\n  }\n\n  /**\n   * Fetches algorithms list from DB\n   */\n  fetchAlgorithmsList(): Promise<any> {\n    return this._connection.getSftpConnectionList().pipe(takeUntil(this.unsubscribe$)).toPromise();\n  }\n\n  /**\n   * Navigates the user to the schedular page to create new\n   */\n  navigateToScheduler() {\n    this.closeModal();\n    this._spinner.stopSpinner();\n    this._router.navigateByUrl('/dashboard/scheduler?type=scheduler');\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this._connectionDialogRef.close(data);\n  }\n\n  /**\n   * Unsubscribes the subscriptions, only if they were subscribed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n    if (this.connection$) {\n      this.connection$.unsubscribe();\n    }\n    if (this.dataConnection$) {\n      this.dataConnection$.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DataConnectionComponent } from './data-connection/data-connection.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DataSetComponent } from './data-set/data-set.component';\nimport { DataFlowComponent } from './data-flow/data-flow.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DialogHandlerComponent } from './data-connection/dialog-handler/dialog-handler.component';\nimport { FileUploadFormComponent } from './data-connection/file-upload-form/file-upload-form.component';\nimport { DatabaseFormComponent } from './data-connection/database-form/database-form.component';\nimport { SftpAndUrlFormComponent } from './data-connection/sftp-and-url-form/sftp-and-url-form.component';\nimport { DataSetDialogComponent } from './data-set/data-set-dialog/data-set-dialog.component';\nimport { DataFlowStepperComponent } from './data-flow/data-flow-stepper/data-flow-stepper.component';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { GraphsDialogHandlerComponent } from '../models/graphs-dialog-handler/graphs-dialog-handler.component';\nimport { TreeModule } from '@circlon/angular-tree-component';\n\nconst routes: Routes = [\n  {\n    path: 'dataconnection',\n    component: DataConnectionComponent,\n  },\n  {\n    path: 'dataset',\n    component: DataSetComponent,\n  },\n  {\n    path: 'dataflow',\n    component: DataFlowComponent,\n  },\n];\n\n@NgModule({\n  declarations: [DataConnectionComponent, DataSetComponent, DataFlowComponent, DialogHandlerComponent, FileUploadFormComponent, DatabaseFormComponent, SftpAndUrlFormComponent, DataSetDialogComponent, DataFlowStepperComponent],\n  imports: [\n    CommonModule,\n    AgGridModule.withComponents([GraphsDialogHandlerComponent]),\n    RouterModule.forChild(routes),\n    TreeModule,\n    SharedModule,\n    MatBadgeModule\n  ]\n})\nexport class DataModule { }\n"]}