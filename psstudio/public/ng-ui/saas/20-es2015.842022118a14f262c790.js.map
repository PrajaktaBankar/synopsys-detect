{"version":3,"sources":["webpack:///src/app/routes/feature-repo/feature-repo.service.ts","webpack:///src/app/routes/feature-repo/feature-repo.component.html","webpack:///src/app/routes/feature-repo/feature-repo.component.ts","webpack:///src/app/routes/feature-repo/feature-repo.module.ts"],"names":["FeatureRepoService","_http","serverBaseUrl","environment","formData","FormData","projectId","this","get","reqObj","put","featureType","post","sharingForm","swal","FeatureRepoComponent","_toaster","_localStorage","_spinner","_dialog","_feature","_fb","_snackBar","dataSource","pageSizeOptions","displayedColumns","unsubscribe$","Subject","showSpinner","project","getItem","group","sharedFeatures","required","email","value","paginator","sort","getFeaturesList","getAllFeatures","_id","pipe","takeUntil","subscribe","res","stopSpinner","featuresArray","data","_updateChangeSubscription","error","err","formValue","shareFeature","selectedFeature","type","success","featureData","shareFormTemplate","open","minWidth","maxWidth","infoTemplate","isShared","horizontalPosition","verticalPosition","title","text","icon","buttons","cancel","visible","className","confirm","then","isConfirm","deleteFeature","filter","item","name","event","target","trim","toLowerCase","firstPage","next","unsubscribe","FeatureRepoModule","forChild","path","component"],"mappings":"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","file":"x","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureRepoService {\n  serverBaseUrl = environment.serverBaseUrl;\n  formData: FormData = new FormData();\n\n  constructor(private _http: HttpClient) {}\n\n  /**\n   * Fetches all the features from DB\n   */\n  getAllFeatures(projectId: string): Observable<any> {\n    return this._http.get(\n      `${this.serverBaseUrl}/api/projects/${projectId}/feature_repo/share_features`\n    );\n  }\n\n  /**\n   * Deletes the feature repo\n   * @param projectId\n   * @returns\n   */\n  deleteFeature(projectId: string, reqObj: any): Observable<any> {\n    return this._http.put(\n      `${this.serverBaseUrl}/api/projects/${projectId}/feature_repo/share_features`,\n      reqObj\n    );\n  }\n\n  /**\n   * Shares the feature\n   * @param projectId\n   * @param reqObj\n   * @returns\n   */\n  shareFeature(projectId: string, featureType: string, reqObj: any): Observable<any> {\n    return this._http.post(\n      `${this.serverBaseUrl}/api/projects/${projectId}/feature_repo/share_features/share?type=${featureType}`,\n      reqObj\n    );\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">summarize</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title\">Features</h3>\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!dataSource.data.length\" class=\"text-center mt-5 font-weight-normal\">\n    You don't have any feature yet.\n  </h4>\n\n  <!-- Features listing section (table) -->\n  <mat-card *ngIf=\"dataSource.data.length\" class=\"features-listing mt-5 p-4\">\n    <mat-card-content>\n      <!-- Search bar -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" #input />\n      </mat-form-field>\n      <!-- Progress Spinner -->\n      <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        matSort\n        #featureSort=\"matSort\"\n        matSortActive=\"createdAt\"\n        matSortDirection=\"desc\"\n        matSortDisableClear\n        class=\"mt-2\"\n      >\n        <!-- Sr. No Column -->\n        <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 }}\n          </td>\n        </ng-container>\n\n        <!-- Feature name Column -->\n        <ng-container matColumnDef=\"featureName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.name }}\n          </td>\n        </ng-container>\n\n        <!-- Shared Column -->\n        <ng-container matColumnDef=\"shared\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Shared</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.isShared }}\n          </td>\n        </ng-container>\n\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <!-- Info button -->\n              <button mat-icon-button (click)=\"openInfoDialog(row, infoTemplate)\">\n                <i class=\"fas fa-info-circle\"></i>\n              </button>\n              <!-- Share button -->\n              <button mat-icon-button (click)=\"openFormDialog(row, shareFormTemplate)\">\n                <i class=\"fas fa-share-alt\"></i>\n              </button>\n              <!-- Delete button -->\n              <button class=\"delete-button\" mat-icon-button (click)=\"deleteHandler(row)\">\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n        </tr>\n      </table>\n      <!-- Paginator -->\n      <mat-paginator #featurePaginator class=\"mt-2\" [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n<!-- Sharing form dialog template -->\n<ng-template #shareFormTemplate>\n  <h2 mat-dialog-title>Share a Feature</h2>\n  <mat-dialog-content class=\"mat-typography mt-4\">\n    <form [formGroup]=\"sharingForm\" role=\"form\" class=\"form-validate\" name=\"sharingForm\">\n      <!-- Select features -->\n      <div class=\"row\">\n        <div class=\"col-md-12 form-group\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Select feature(s) to share</mat-label>\n            <mat-select formControlName=\"sharedFeatures\" multiple>\n              <mat-option *ngFor=\"let user of featuresArray\" [value]=\"user._id\">{{\n                user.name\n              }}</mat-option>\n            </mat-select>\n            <mat-error\n              *ngIf=\"\n                sharingForm.get('sharedFeatures').hasError('required') &&\n                (sharingForm.get('sharedFeatures').dirty ||\n                  sharingForm.get('sharedFeatures').touched)\n              \"\n              >Feature is required.</mat-error\n            >\n          </mat-form-field>\n        </div>\n      </div>\n      <!-- Email input -->\n      <div class=\"row\">\n        <div class=\"col-md-12 form-group\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label for=\"email\">Email</mat-label>\n            <input\n              matInput\n              type=\"email\"\n              name=\"email\"\n              formControlName=\"email\"\n              id=\"configName\"\n              placeholder=\"Enter email id\"\n              autocomplete\n              required\n            />\n            <mat-error\n              *ngIf=\"\n                sharingForm.get('email').hasError('required') &&\n                (sharingForm.get('email').dirty || sharingForm.get('email').touched)\n              \"\n              >Email id is required.</mat-error\n            >\n            <mat-error *ngIf=\"sharingForm.get('email').hasError('email')\"\n              >Invalid email id.</mat-error\n            >\n          </mat-form-field>\n        </div>\n      </div>\n    </form>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close (click)=\"sharingForm.reset()\">Cancel</button>\n    <button\n      mat-flat-button\n      mat-dialog-close\n      class=\"btn-primary\"\n      type=\"submit\"\n      [disabled]=\"sharingForm.invalid\"\n      (click)=\"onSubmitShare(sharingForm.value)\"\n    >\n      Share\n    </button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!-- Function details dialog template -->\n<ng-template #infoTemplate>\n  <h2 mat-dialog-title>\n    {{ selectedFeature.type === 'function' ? 'Function' : 'Feature' }} Details\n  </h2>\n  <mat-dialog-content class=\"mat-typography\" style=\"overflow: unset\">\n    <h3><b>Feature Name :</b> {{ selectedFeature.name }}</h3>\n    <div *ngIf=\"selectedFeature.type === 'function'\">\n      <h3><b>Description :</b> {{ selectedFeature.description }}</h3>\n      <mat-chip-list>\n        <mat-chip>{{ selectedFeature.functionDefinition }}</mat-chip>\n      </mat-chip-list>\n    </div>\n    <div *ngIf=\"selectedFeature.type === 'feature'\">\n      <h3>Shared features details</h3>\n      <table class=\"table table-bordered table-hover\">\n        <thead>\n          <tr>\n            <th>Feature name</th>\n            <th>Data type</th>\n            <th>Aggregation strategy</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of selectedFeature.sharedFeaturesList\">\n            <td>{{ item.colName }}</td>\n            <td>{{ item.dataType }}</td>\n            <td>{{ item.aggregateStrategy }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <h3><b>Shared index columns :</b>{{ selectedFeature.sharedIndex.toString() }}</h3>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions class=\"justify-content-end m-auto\">\n    <button mat-stroked-button mat-dialog-close>Ok</button>\n  </mat-dialog-actions>\n</ng-template>\n","import { MatSnackBar } from '@angular/material/snack-bar';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { FeatureRepoService } from './feature-repo.service';\nimport { Component, OnInit, ViewChild, TemplateRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\n\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-feature-repo',\n  templateUrl: './feature-repo.component.html',\n  styleUrls: ['./feature-repo.component.scss'],\n})\nexport class FeatureRepoComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild('featurePaginator') set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild('featureSort') set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  sharingForm: FormGroup;\n  showSpinner: boolean = false;\n  project: any;\n  featuresArray: Array<any>;\n  selectedFeature: any;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dialog: MatDialog,\n    private _feature: FeatureRepoService,\n    private _fb: FormBuilder,\n    private _snackBar: MatSnackBar\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.displayedColumns = ['srNo', 'featureName', 'shared', 'createdAt', 'actions'];\n    this.sharingForm = this._fb.group({\n      sharedFeatures: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  /**\n   * Initializes the page with required data\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.getFeaturesList();\n  }\n\n  /**\n   * Fetches all the features from DB\n   */\n  getFeaturesList(): void {\n    this._feature\n      .getAllFeatures(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (res) {\n            this.featuresArray = res;\n            this.dataSource.data = res;\n            this.dataSource._updateChangeSubscription();\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this._toaster.error('Sorry! Cannot fetch features.', 'Features');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Features');\n        }\n      );\n  }\n\n  /**\n   * Handles the form submition\n   * @param formValue\n   */\n  onSubmitShare(formValue: any): void {\n    this._feature\n      .shareFeature(this.project._id, this.selectedFeature.type, formValue)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.getFeaturesList();\n            this._toaster.success('Feature(s) shared successfully.', 'Features');\n          } else {\n            this._toaster.error('Sorry! Cannot shiare features.', 'Features');\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Features');\n        }\n      );\n  }\n\n  /**\n   * Opens the dialog with form\n   * @param featureData\n   * @param shareFormTemplate\n   */\n  openFormDialog(featureData: any, shareFormTemplate: TemplateRef<any>): void {\n    this.selectedFeature = featureData;\n    this._dialog.open(shareFormTemplate, {\n      minWidth: '50vw',\n      maxWidth: '50vw',\n    });\n  }\n\n  /**\n   * Opens the dialog with feature function info\n   * @param featureData\n   * @param shareFormTemplate\n   */\n  openInfoDialog(featureData: any, infoTemplate: TemplateRef<any>): void {\n    this.selectedFeature = featureData;\n    this._dialog.open(infoTemplate, {\n      minWidth: '50vw',\n      maxWidth: '50vw',\n    });\n  }\n\n  /**\n   * Handles the delete operation to delete feature\n   * @param settingData\n   */\n  deleteHandler(featureData: any): void {\n    if (featureData.isShared) {\n      this._snackBar.open('Shared feature cannot be deleted.', 'OK', {\n        horizontalPosition: 'right',\n        verticalPosition: 'bottom',\n      });\n    } else {\n      swal({\n        title: 'Are you sure?',\n        text: 'You will not be able to recover this file!',\n        icon: 'warning',\n        buttons: {\n          cancel: {\n            text: 'Cancel',\n            value: null,\n            visible: true,\n            className: '',\n          },\n          confirm: {\n            text: 'Yes, delete it!',\n            value: true,\n            visible: true,\n            className: 'bg-danger',\n          },\n        },\n      }).then((isConfirm: boolean) => {\n        if (isConfirm) {\n          this.showSpinner = true;\n          this._feature.deleteFeature(this.project._id, featureData).subscribe(\n            (res: any) => {\n              if (res) {\n                this.featuresArray = this.featuresArray.filter(\n                  (item) => item._id !== featureData._id\n                );\n                this.dataSource.data = this.featuresArray;\n                this.dataSource._updateChangeSubscription();\n                this._toaster.success(`${featureData.name} deleted successfully.`, 'Feature Repo');\n              } else {\n                this._toaster.error('Sorry! Cannot delete the feature.', 'Feature Repo');\n              }\n              this.showSpinner = false;\n            },\n            (err: Error) => {\n              this.showSpinner = false;\n              this._toaster.error('Server Error', 'Feature Repo');\n            }\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { SharedModule } from 'src/app/shared/shared.module';\nimport { FeatureRepoComponent } from './feature-repo.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n\n\n@NgModule({\n  declarations: [FeatureRepoComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild([{\n      path: '', component: FeatureRepoComponent,\n    }]),\n  ]\n})\nexport class FeatureRepoModule { }\n"]}