{"version":3,"sources":["webpack:///src/app/routes/notebook/notebook.service.ts","webpack:///src/app/routes/notebook/notebook-dialog/notebook-dialog.component.html","webpack:///src/app/routes/notebook/notebook-dialog/notebook-dialog.component.ts","webpack:///src/app/routes/notebook/notebook.component.html","webpack:///src/app/routes/notebook/notebook.component.ts","webpack:///src/app/routes/notebook/notebook.module.ts","webpack:///src/app/shared/pipes/drop-file-extension.pipe.ts"],"names":["NotebookService","_http","serverBaseUrl","environment","formData","FormData","projectId","this","get","notebookId","notebookName","notebookData","post","NotebookDialogComponent","dialogData","_fb","_data","_toaster","_notebookDialogRef","_localStorage","_notebook","unsubscribe$","Subject","showSpinner","addToPipeline","notebookForm","group","fileName","required","pattern","inputFiles","nullValidator","outputFileDataGroupId","project","getItem","formValue","reqObj","projectPath","Date","now","inputFile","name","notebookInputFileId","_id","createdBy","createNewNotebook","pipe","takeUntil","subscribe","res","success","closeModal","error","err","data","close","next","unsubscribe","onSubmitNotebook","NotebookModule","NotebookComponent","swal","_spinner","_dialog","_sanitizer","_window","_schedular","dataSource","pageSizeOptions","displayedColumns","showOverview","user","value","paginator","sort","getNotebooksList","getDataGroupList","getDataSetList","getAllNotebooks","stopSpinner","notebooksArray","console","log","_updateChangeSubscription","getDataGroupsList","dataGroupList","getAllProjectDatas","dataSetList","filesList","title","text","icon","buttons","cancel","visible","className","confirm","then","isConfirm","deleteNotebook","filter","item","open","minWidth","dataGroups","dataSets","afterClosed","safeUrl","bypassSecurityTrustResourceUrl","url","event","target","trim","toLowerCase","firstPage","Window","forChild","path","component","DropFileExtensionPipe","fileSource","substr","lastIndexOf"],"mappings":"keAQaA,E,gJAAN,IAAMA,EAAN,WAKL,WAAoBC,aAAA,KAAAA,QAHpB,KAAAC,cAAgBC,EAAA,EAAYD,cAC5B,KAAAE,SAAqB,IAAIC,SAHpB,yCAUL,SAAgBC,GACd,OAAOC,KAAKN,MAAMO,IAAXD,UAAkBA,KAAKL,cAAvBK,yBAAqDD,EAArDC,iBAXJ,4BAqBL,SAAeD,EAAmBG,EAAoBC,GACpD,OAAOH,KAAKN,MAALM,iBAAqBA,KAAKL,cAA1BK,yBAAwDD,EAAxDC,qBAA8EE,EAA9EF,mBAAmGG,MAtBvG,+BA+BL,SAAkBJ,EAAmBK,GACnC,OAAOJ,KAAKN,MAAMW,KAAXL,UAAmBA,KAAKL,cAAxBK,yBAAsDD,EAAtDC,kBAAiFI,OAhCrF,M,oCAAMX,GAAe,Y,yBAAfA,EAAe,QAAfA,EAAe,qBAFd,S,oICFZ,kC,sBAkBQ,oBAKG,qCAA0B,Q,sBAC5B,oBACE,oDAAyC,Q,yBAY1C,wBAAoE,Q,4BAElE,Q,uBAFmD,gBAAe,6C,sBAItE,oBAKG,kCAAuB,Q,yBAUxB,wBAA8E,QAE5E,Q,uBAFuD,oBAAqB,sB,sBAIhF,oBAMG,8BAAmB,Q,ICtDnBa,E,oCAAN,IAAMA,EAAN,WAWL,WACkCC,EACxBC,EACAC,EACAC,EACAC,EACAC,EACAC,aANwB,KAAAN,aACxB,KAAAC,MACA,KAAAC,QACA,KAAAC,WACA,KAAAC,qBACA,KAAAC,gBACA,KAAAC,YAbV,KAAAC,aAAe,IAAIC,EAAA,EAEnB,KAAAC,eACA,KAAAC,iBAaEjB,KAAKkB,aAAelB,KAAKQ,IAAIW,MAAM,CACjCC,SAAU,CAAC,GAAI,CAAC,IAAWC,SAAU,IAAWC,QAAQ,4BACxDC,WAAY,CAAC,GAAI,IAAWC,eAC5BC,sBAAuB,CAAC,GAAI,IAAWD,iBAxBtC,kCA4BL,WACExB,KAAK0B,QAAU1B,KAAKY,cAAce,QAAQ,aA7BvC,8BAoCL,SAAiBC,cACf5B,KAAKgB,eACL,IAAIa,EAAc,CAChBC,YAAa,GACbV,SAASA,GAADA,OAAKQ,EAAUR,SAAfA,YAA2BW,KAAKC,MAAhCZ,UACRa,UAAWL,EAAUL,WAAWW,KAChCC,oBAAqBP,EAAUL,WAAWa,IAC1CX,sBAAuBG,EAAUH,sBACjCR,cAAejB,KAAKiB,cACpBlB,UAAWC,KAAK0B,QAAQU,IACxBC,UAAWrC,KAAK0B,QAAQW,WAG1BrC,KAAKa,UACFyB,kBAAkBtC,KAAK0B,QAAQU,IAAKP,GACpCU,KAAK,OAAAC,EAAA,GAAUxC,KAAKc,eACpB2B,WACEC,YACC1C,EAAKgB,eACD0B,GACF1C,EAAKU,SAASiC,QAAQ,gCAAiC,aACvD3C,EAAK4C,WAAWF,IAEhB1C,EAAKU,SAASmC,MAAM,6BAA8B,gBAGrDC,YACC9C,EAAKgB,eACLhB,EAAKU,SAASmC,MAAM,eAAgB,kBAhEvC,wBAwEL,SAAWE,GACT/C,KAAKW,mBAAmBqC,MAAMD,KAzE3B,yBA+EL,WACE/C,KAAKc,aAAamC,MAAKA,GACvBjD,KAAKc,aAAaoC,kBAjFf,M,oCAAM5C,GAAuB,KAYxB,KAAe,4D,uBAZdA,EAAuB,o4BDhBpC,eAAqB,8BAAmB,OAExC,+BAEE,uCAEA,iBAEE,gBACE,gBACE,2BACE,sBAA0B,wBAAa,OACvC,mBAUA,6BAMC,6BAGH,OACF,OACF,OAGA,iBACE,kBACE,4BACE,qBAAW,6BAAiB,OAC5B,yBACE,+BAGF,OACA,6BAOF,OACF,OAGA,kBACE,4BACE,qBAAW,yBAAa,OACxB,yBACE,+BAGF,OACA,6BAQF,OACF,OACF,OAGA,kBACE,2BAAc,8DACX,2BAAe,OAEpB,OACF,OACF,OAEA,iCACE,qBAA2B,gCAAS,EAAAsC,gBAAc,kBAAM,OACxD,qBAKE,gCAAS,EAAAO,iBAAA,yBAET,oBACF,OACF,Q,MA5FwB,mCAEhB,yCAiBI,yJAKU,wEAaE,8CAKZ,+JAcY,gDAKZ,gMAaQ,wCAA2B,6BAa3C,kD,+SE3EI,sBAA+C,wBAAa,Q,yBAE5D,gBAAiD,QAAkB,Q,kBAAlB,8B,qCAEnD,oBAKE,mEAEA,mBACF,Q,qCAKJ,gBAIE,qDACA,eAAyC,mEAA2B,sBAAW,OACjF,Q,gFAEA,gBACE,4DACA,eACG,sBAAW,OAEhB,Q,MAH2C,sC,sBAcvC,kC,sBAcI,gB,0BACA,gBACE,QACF,Q,yCADE,kD,uBAMF,gBAAsD,eAAI,Q,sCAC1D,gBAAqD,qFACnD,QACF,O,0BADE,kC,uBAMF,gBAAsD,qBAAU,Q,0BAChE,gBACE,Q,eACF,Q,uBADE,sD,uBAMF,gBAAsC,kBAAO,Q,sCAC7C,gBACE,iBAEE,oBAIE,sFAEA,eACF,OACF,OACF,Q,sBAGF,gB,sBACA,gB,0BAIE,gBACE,QACF,Q,2BADE,6D,uBAEF,gBAA2D,qCAA0B,Q,0BAJvF,gBACE,uBAGA,uBACF,Q,0BAJmC,iCAGA,kC,sCAtEzC,sBACE,2BAEE,4BACE,oBAAW,iBAAM,OACjB,sBAAgB,kEAAhB,OACF,OAEA,yCAEA,sBAWE,YACE,wBACA,wBAGF,OAGA,YACE,wBACA,wBAGF,OAGA,YACE,wBACA,wBAGF,OAGA,YACE,wBACA,wBAaF,OAEA,wBACA,wBAGA,wBAMF,OAEA,+BAKF,OACF,O,qBAxE0C,mCAIpC,wCAkDmB,oDACP,oDAcZ,mD,0BAMN,sBACE,2BACE,iBACE,oBACF,OACF,OACF,Q,kBAHyC,oCCvH3C,ICCaC,GDKAC,GANPC,GAAO,EAAQ,QAMd,KAAMD,GAAN,WAyBL,WACU3C,EACAE,EACA2C,EACAC,EACAC,EACA5C,EACAJ,EACAiD,EACAC,aARA,KAAAjD,WACA,KAAAE,gBACA,KAAA2C,WACA,KAAAC,UACA,KAAAC,aACA,KAAA5C,YACA,KAAAJ,QACA,KAAAiD,UACA,KAAAC,aAhCV,KAAAC,WAAqC,IAAI,IAQzC,KAAAC,gBAAiC,CAAC,GAAI,GAAI,IAC1C,KAAAC,iBAAkC,GAGlC,KAAAhD,aAAe,IAAIC,EAAA,EAEnB,KAAAC,eAOA,KAAA+C,gBAaE/D,KAAK0B,QAAU1B,KAAKY,cAAce,QAAQ,WAC1C3B,KAAKgE,KAAOhE,KAAKY,cAAce,QAAQ,QACvC3B,KAAK8D,iBAAmB,CAAC,OAAQ,eAAgB,YAAa,WAtC3D,iCAGL,SAA8CG,GAC5CjE,KAAK4D,WAAWM,UAAYD,IAJzB,gBAML,SAAoCA,GAClCjE,KAAK4D,WAAWO,KAAOF,IAPpB,sBA4CL,WACEjE,KAAKuD,SAASvC,cACdhB,KAAKoE,mBACLpE,KAAKqE,mBACLrE,KAAKsE,mBAhDF,8BAsDL,WAAkB,WAChBtE,KAAKa,UACF0D,gBAAgBvE,KAAK0B,QAAQU,KAC7BG,KAAK,OAAAC,EAAA,GAAUxC,KAAKc,eACpB2B,WACEC,YACC1C,EAAKuD,SAASiB,cACV9B,GACF1C,EAAKyE,eAAiB/B,EACtB1C,EAAK4D,WAAWb,KAAOL,EACvB1C,EAAK4D,WAAWM,UAAYlE,EAAKkE,UACjCQ,QAAQC,IAAI,2BAAkB3E,EAAKmE,MACnCnE,EAAK4D,WAAWO,KAAOnE,EAAKmE,KAC5BnE,EAAK4D,WAAWgB,6BAEhB5E,EAAKU,SAASmC,MAAM,yBAA0B,gBAGjDC,YACC9C,EAAKuD,SAASiB,cACdxE,EAAKU,SAASmC,MAAM,eAAgB,kBA1EvC,8BAkFL,WAAkB,WAChB7C,KAAKS,MACFoE,kBAAkB7E,KAAK0B,QAAQU,KAC/BG,KAAK,OAAAC,EAAA,GAAUxC,KAAKc,eACpB2B,WACEC,YACKA,IACF1C,EAAK8E,cAAgBpC,MAGxBI,YACC9C,EAAKU,SAASmC,MAAM,eAAgB,mBA7FvC,4BAqGL,WAAgB,WACd7C,KAAKS,MACFsE,mBAAmB/E,KAAK0B,QAAQU,KAChCG,KAAK,OAAAC,EAAA,GAAUxC,KAAKc,eACpB2B,WACEC,YACKA,IACF1C,EAAKgF,YAActC,EAAI,GAAGuC,cAG7BnC,YACC9C,EAAKU,SAASmC,MAAM,eAAgB,iBAhHvC,2BA0HL,SAAczC,cACZkD,GAAK,CACH4B,MAAO,gBACPC,KAAM,iDACNC,KAAM,UACNC,QAAS,CACPC,OAAQ,CACNH,KAAM,SACNlB,MAAO,KACPsB,SAAQA,EACRC,UAAW,IAEbC,QAAS,CACPN,KAAM,kBACNlB,OAAMA,EACNsB,SAAQA,EACRC,UAAW,gBAGdE,MAAMC,YACHA,IACF3F,EAAKgB,eACLhB,EAAKa,UACF+E,eAAe5F,EAAK0B,QAAQU,IAAKhC,EAAagC,IAAKhC,EAAagB,UAChEqB,WACEC,YACKA,GACF1C,EAAKyE,eAAiBzE,EAAKyE,eAAeoB,QACvCC,YAAIA,OAAKA,EAAK1D,MAAQhC,EAAagC,OAEtCpC,EAAK4D,WAAWb,KAAO/C,EAAKyE,eAC5BzE,EAAK4D,WAAWM,UAAYlE,EAAKkE,UACjClE,EAAK4D,WAAWO,KAAOnE,EAAKmE,KAC5BnE,EAAK4D,WAAWgB,4BAChB5E,EAAKU,SAASiC,QAAWvC,EAAagB,SAAhB,wBAAiD,cAEvEpB,EAAKU,SAASmC,MAAM,6BAA8B,aAEpD7C,EAAKgB,kBAEN8B,YACC9C,EAAKgB,eACLhB,EAAKU,SAASmC,MAAM,eAAgB,sBApK3C,4BA8KL,WAAgB,WACE7C,KAAKwD,QAAQuC,KAAK,EAAyB,CACzDC,SAAU,OACVjD,KAAM,CACJkD,WAAYjG,KAAK8E,cACjBoB,SAAUlG,KAAKgF,eAITmB,cAAc1D,WAAWM,YAC7BA,GACF/C,EAAKoE,wBAzLN,0BAkML,SAAahE,GACXJ,KAAKG,aAAeC,EAAagB,SACjCpB,KAAKuD,SAASvC,cAEdhB,KAAKoG,QAAUpG,KAAKyD,WAAW4C,+BAAhBrG,UADMI,EAAakG,KACnBtG,OADyBI,EAAagB,SACtCpB,gBADsDA,KAAK0B,QAAQW,UACnErC,gBADoFA,KAAK0B,QAAQU,MAEhHpC,KAAK+D,gBACL/D,KAAKuD,SAASiB,gBAxMX,yBA+ML,SAAY+B,GAEVvG,KAAK4D,WAAWiC,OADKU,EAAMC,OAA4BvC,MAClBwC,OAAOC,cACxC1G,KAAK4D,WAAWM,WAClBlE,KAAK4D,WAAWM,UAAUyC,cAnNzB,yBA0NL,WACE3G,KAAKc,aAAamC,MAAKA,GACvBjD,KAAKc,aAAaoC,kBA5Nf,M,oCAAMG,IAAiB,yEAiCTuD,QAAM,Y,wBAjCdvD,GAAiB,qD,MAAA,M,qmEDrB9B,gBAEE,qBACE,0BACE,gBACE,qBAA8B,wBAAa,OAC7C,OACA,2BACE,eAEE,qDAEA,sBACF,OAEA,2BAEA,sBACF,OACA,0BASF,OACF,OAGA,sBAQA,uBAQA,+BAmFA,8BAOF,Q,MAjIU,uEAMQ,oCAEN,oCAGJ,sFAaJ,iHAOE,kEAQM,+DAmFyB,iD,uQEnH9B,KAAMD,GAAN,yB,qBAAMA,K,qDAAAA,KAAc,SARhB,CACP,IACA,IACA,IAAayD,SAAS,CAAC,CACrBC,KAAM,GAAIC,UAAW,U,2FCFpB,iBAAMC,EAAN,qEACL,SAAU/C,EAAegD,GACvB,OAAOA,GAAchD,EAAQA,EAAMiD,OAAO,EAAGjD,EAAMkD,YAAY,MAAQlD,MAFpE,K,6CAAM+C,I,iDAAAA,EAAqB,U,EAA3B,O","file":"x","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotebookService {\n\n  serverBaseUrl = environment.serverBaseUrl;\n  formData: FormData = new FormData();\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Fetches all the notebooks from DB\n   */\n  getAllNotebooks(projectId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/projects/${projectId}/notebooks`);\n  }\n\n  /**\n   * Deletes the notebook from DB\n   * @param projectId \n   * @param notebookId \n   * @param notebookName \n   * @returns \n   */\n  deleteNotebook(projectId: string, notebookId: string, notebookName: string): Observable<any> {\n    return this._http.delete(`${this.serverBaseUrl}/api/projects/${projectId}/notebook/${notebookId}/delete/${notebookName}`);\n  }\n\n  /**\n   * Creates a new notebook\n   * @param projectId \n   * @param notebookData \n   * @returns \n   */\n  createNewNotebook(projectId: string, notebookData: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/projects/${projectId}/notebook/save`, notebookData);\n  }\n}\n","<h2 mat-dialog-title>Create New Notebook</h2>\n\n<mat-dialog-content class=\"mat-typography mt-4\">\n  <!-- Progress Spinner -->\n  <app-progress-spinner *ngIf=\"showSpinner\" class=\"spinner\"> </app-progress-spinner>\n\n  <form [formGroup]=\"notebookForm\" role=\"form\" class=\"form-validate\" name=\"notebookForm\">\n    <!-- Connection Name -->\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"fileName\">Notebook name</mat-label>\n          <input\n            matInput\n            type=\"text\"\n            name=\"fileName\"\n            formControlName=\"fileName\"\n            id=\"fileName\"\n            placeholder=\"Enter notebook name\"\n            autocomplete\n            required\n          />\n          <mat-error\n            *ngIf=\"\n              notebookForm.get('fileName').hasError('required') &&\n              (notebookForm.get('fileName').dirty || notebookForm.get('fileName').touched)\n            \"\n            >Notebook name is required.</mat-error\n          ><mat-error *ngIf=\"notebookForm.get('fileName').hasError('pattern')\"\n            >Only alphanumeric characters are allowed.</mat-error\n          >\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Data set files dropdown -->\n    <div class=\"row\">\n      <div class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select input file</mat-label>\n          <mat-select formControlName=\"inputFiles\" required>\n            <mat-option *ngFor=\"let file of dialogData.dataSets\" [value]=\"file\">{{\n              file.name | dropFileExtension: file.fileSource\n            }}</mat-option>\n          </mat-select>\n          <mat-error\n            *ngIf=\"\n              notebookForm.get('inputFiles').hasError('required') &&\n              (notebookForm.get('inputFiles').dirty || notebookForm.get('inputFiles').touched)\n            \"\n            >Input file is required.</mat-error\n          >\n        </mat-form-field>\n      </div>\n\n      <!-- Select folder -->\n      <div class=\"col-md-6 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select folder</mat-label>\n          <mat-select formControlName=\"outputFileDataGroupId\" required>\n            <mat-option *ngFor=\"let folder of dialogData.dataGroups\" [value]=\"folder._id\">{{\n              folder.name\n            }}</mat-option>\n          </mat-select>\n          <mat-error\n            *ngIf=\"\n              notebookForm.get('outputFileDataGroupId').hasError('required') &&\n              (notebookForm.get('outputFileDataGroupId').dirty ||\n                notebookForm.get('outputFileDataGroupId').touched)\n            \"\n            >Folder is required.</mat-error\n          >\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Add to pipeline checkbox -->\n    <div class=\"mt-3 ml-1\">\n      <mat-checkbox [(ngModel)]=\"addToPipeline\" [ngModelOptions]=\"{ standalone: true }\"\n        >Add to pipeline</mat-checkbox\n      >\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"justify-content-end m-auto\">\n  <button mat-stroked-button (click)=\"closeModal()\">Cancel</button>\n  <button\n    mat-flat-button\n    class=\"btn-primary\"\n    type=\"submit\"\n    [disabled]=\"notebookForm.invalid\"\n    (click)=\"onSubmitNotebook(notebookForm.value)\"\n  >\n    Create\n  </button>\n</mat-dialog-actions>\n","import { NotebookService } from './../notebook.service';\nimport { NotebookComponent } from './../notebook.component';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { DataService } from '../../data/data.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-notebook-dialog',\n  templateUrl: './notebook-dialog.component.html',\n  styleUrls: ['./notebook-dialog.component.scss'],\n})\nexport class NotebookDialogComponent implements OnInit {\n  /** Form group instance */\n  notebookForm: FormGroup;\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  showSpinner: boolean = false;\n  addToPipeline: boolean = false;\n  project: any;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _fb: FormBuilder,\n    private _data: DataService,\n    private _toaster: ToastrService,\n    private _notebookDialogRef: MatDialogRef<NotebookComponent>,\n    private _localStorage: LocalStorageService,\n    private _notebook: NotebookService\n  ) {\n    /** Form instance */\n    this.notebookForm = this._fb.group({\n      fileName: ['', [Validators.required, Validators.pattern('^[^\\\\s][A-Za-z0-9_ ]+$')]],\n      inputFiles: ['', Validators.nullValidator],\n      outputFileDataGroupId: ['', Validators.nullValidator],\n    });\n  }\n\n  ngOnInit(): void {\n    this.project = this._localStorage.getItem('project');\n  }\n\n  /**\n   * Creates a new notebook\n   * @param formValue\n   */\n  onSubmitNotebook(formValue: any): void {\n    this.showSpinner = true;\n    let reqObj: any = {\n      projectPath: '',\n      fileName: `${formValue.fileName}-${Date.now()}.ipynb`,\n      inputFile: formValue.inputFiles.name,\n      notebookInputFileId: formValue.inputFiles._id,\n      outputFileDataGroupId: formValue.outputFileDataGroupId,\n      addToPipeline: this.addToPipeline,\n      projectId: this.project._id,\n      createdBy: this.project.createdBy,\n    };\n\n    this._notebook\n      .createNewNotebook(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this.showSpinner = false;\n          if (res) {\n            this._toaster.success('Notebook created successfully', 'Notebooks');\n            this.closeModal(res);\n          } else {\n            this._toaster.error('Cannot create new notebook', 'Notebooks');\n          }\n        },\n        (err: Error) => {\n          this.showSpinner = false;\n          this._toaster.error('Server Error', 'Notebooks');\n        }\n      );\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this._notebookDialogRef.close(data);\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">library_books</mat-icon>\n      </div>\n      <mat-card-title class=\"align-items-center\">\n        <h3\n          [class]=\"showOverview ? 'heading-with-breadcrumb' : 'heading-title'\"\n          (click)=\"showOverview = false\"\n        >\n          Notebooks\n        </h3>\n        <!-- ICON (chevron) -->\n        <mat-icon *ngIf=\"showOverview\" class=\"my-auto\">chevron_right</mat-icon>\n        <!-- LABEL (breadcrumb name) -->\n        <h3 *ngIf=\"showOverview\" class=\"breadcrumb-name\">{{ notebookName }}</h3>\n      </mat-card-title>\n      <button\n        *ngIf=\"!showOverview && dataSetList?.length\"\n        mat-raised-button\n        matTooltip=\"Create notebook\"\n        class=\"btn-primary ml-auto\"\n        (click)=\"openFormDialog()\"\n      >\n        Create\n      </button>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4\n    *ngIf=\"!dataSource.data.length && !showOverview && dataSetList?.length\"\n    class=\"text-center mt-5 font-weight-normal\"\n  >\n    You don't have any notebook created yet,\n    <a class=\"text-decoration-none\" href=\"#\" (click)=\"openFormDialog()\">create now.</a>\n  </h4>\n  <!-- NOTE -->\n  <h4 *ngIf=\"!dataSetList?.length\" class=\"text-center mt-5 font-weight-normal\">\n    Please upload dataset to create a new notebook,\n    <a class=\"text-decoration-none\" href=\"#\" [routerLink]=\"['/project/data/dataconnection']\"\n      >upload now.</a\n    >\n  </h4>\n\n  <!-- TABLE (notebooks listing) -->\n  <mat-card *ngIf=\"!showOverview && dataSource.data.length\" class=\"notebook-listing mt-5 p-4\">\n    <mat-card-content>\n      <!-- Search bar -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" #input />\n      </mat-form-field>\n      <!-- Progress Spinner -->\n      <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n      <!-- TABLE -->\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        matSort\n        #notebookSort=\"matSort\"\n        matSortActive=\"createdAt\"\n        matSortDirection=\"desc\"\n        matSortDisableClear\n        class=\"mt-2\"\n      >\n        <!-- Sr. No Column -->\n        <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 + notebookPaginator.pageIndex * notebookPaginator.pageSize }}\n          </td>\n        </ng-container>\n\n        <!-- Notebook name Column -->\n        <ng-container matColumnDef=\"notebookName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n          <td mat-cell *matCellDef=\"let row\" class=\"clickable\" (click)=\"openNotebook(row)\">\n            {{ row.fileName }}\n          </td>\n        </ng-container>\n\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <!-- Delete button -->\n              <button\n                class=\"delete-button\"\n                matTooltip=\"Click to remove the notebook.\"\n                mat-icon-button\n                (click)=\"deleteHandler(row)\"\n              >\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n        </tr>\n      </table>\n      <!-- Paginator -->\n      <mat-paginator\n        #notebookPaginator\n        class=\"mt-2\"\n        [pageSizeOptions]=\"pageSizeOptions\"\n      ></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Notebook UI -->\n  <mat-card class=\"notebook-ui mt-5\" *ngIf=\"safeUrl && showOverview\">\n    <mat-card-content>\n      <div style=\"height: 100vh\">\n        <iframe height=\"100%\" width=\"100%\" [src]=\"safeUrl\" frameborder=\"0\"></iframe>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { SchedularService } from './../dashboard/schedular/schedular.service';\nimport { DataService } from './../data/data.service';\nimport { NotebookService } from './notebook.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { ToastrService } from 'ngx-toastr';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NotebookDialogComponent } from './notebook-dialog/notebook-dialog.component';\n\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-notebook',\n  templateUrl: './notebook.component.html',\n  styleUrls: ['./notebook.component.scss'],\n})\nexport class NotebookComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild('notebookPaginator') set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild('notebookSort') set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  showSpinner: boolean = false;\n  user: any;\n  project: any;\n  notebooksArray: Array<any>;\n  dataGroupList: Array<any>;\n  dataSetList: Array<any>;\n  safeUrl: SafeResourceUrl;\n  showOverview: boolean = false;\n  notebookName: string;\n  constructor(\n    private _toaster: ToastrService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dialog: MatDialog,\n    private _sanitizer: DomSanitizer,\n    private _notebook: NotebookService,\n    private _data: DataService,\n    private _window: Window,\n    private _schedular: SchedularService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.displayedColumns = ['srNo', 'notebookName', 'createdAt', 'actions'];\n  }\n\n  /**\n   * Initialize all the required setting/data\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.getNotebooksList();\n    this.getDataGroupList();\n    this.getDataSetList();\n  }\n\n  /**\n   * Fetches all the created notebook from DB\n   */\n  getNotebooksList(): void {\n    this._notebook\n      .getAllNotebooks(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (res) {\n            this.notebooksArray = res;\n            this.dataSource.data = res;\n            this.dataSource.paginator = this.paginator;\n            console.log('🚀 ~ this.sort', this.sort);\n            this.dataSource.sort = this.sort;\n            this.dataSource._updateChangeSubscription();\n          } else {\n            this._toaster.error('Cannot fetch notebooks', 'Notebooks');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Notebooks');\n        }\n      );\n  }\n\n  /**\n   * Fetches all the data groups list\n   */\n  getDataGroupList(): void {\n    this._data\n      .getDataGroupsList(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.dataGroupList = res;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Flows');\n        }\n      );\n  }\n\n  /**\n   * Fetches the data set list\n   */\n  getDataSetList(): void {\n    this._data\n      .getAllProjectDatas(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this.dataSetList = res[0].filesList;\n          }\n        },\n        (err: Error) => {\n          this._toaster.error('Server Error', 'Data Set');\n        }\n      );\n  }\n\n  /**\n   * Handles the delete operation to delete notebook\n   * @param {connection id} id\n   * @param {connection type} type\n   */\n  deleteHandler(notebookData: any): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this notebook!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this.showSpinner = true;\n        this._notebook\n          .deleteNotebook(this.project._id, notebookData._id, notebookData.fileName)\n          .subscribe(\n            (res: any) => {\n              if (res) {\n                this.notebooksArray = this.notebooksArray.filter(\n                  (item) => item._id !== notebookData._id\n                );\n                this.dataSource.data = this.notebooksArray;\n                this.dataSource.paginator = this.paginator;\n                this.dataSource.sort = this.sort;\n                this.dataSource._updateChangeSubscription();\n                this._toaster.success(`${notebookData.fileName} deleted successfully`, 'Notebooks');\n              } else {\n                this._toaster.error('Cannot delete the notebook', 'Notebooks');\n              }\n              this.showSpinner = false;\n            },\n            (err: Error) => {\n              this.showSpinner = false;\n              this._toaster.error('Server Error', 'Notebooks');\n            }\n          );\n      }\n    });\n  }\n\n  /**\n   * Opens the dialog with form\n   */\n  openFormDialog(): void {\n    let dialodRef = this._dialog.open(NotebookDialogComponent, {\n      minWidth: '50vw',\n      data: {\n        dataGroups: this.dataGroupList,\n        dataSets: this.dataSetList,\n      },\n    });\n\n    dialodRef.afterClosed().subscribe((data) => {\n      if (data) {\n        this.getNotebooksList();\n      }\n    });\n  }\n\n  /**\n   * Setups the notebook in service\n   * @param {*} notebookData notebook details\n   */\n  openNotebook(notebookData: any) {\n    this.notebookName = notebookData.fileName;\n    this._spinner.showSpinner();\n    let url: string = `${notebookData.url}${notebookData.fileName}?uid=${this.project.createdBy}&pid=${this.project._id}`;\n    this.safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n    this.showOverview = true;\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { SharedModule } from 'src/app/shared/shared.module';\nimport { NotebookComponent } from './notebook.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NotebookDialogComponent } from './notebook-dialog/notebook-dialog.component';\n\n@NgModule({\n  declarations: [NotebookComponent, NotebookDialogComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild([{\n      path: '', component: NotebookComponent,\n    }]),\n  ]\n})\nexport class NotebookModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n/**\n * Removes the extesion from a filename\n * Accepts file name as a parameter\n * Usage:\n *  value|dropFileExtension\n * Example:\n *  {{ 'example.txt' | dropFileExtension: fileSource }}\n *  formats to example\n */\n@Pipe({ name: 'dropFileExtension' })\nexport class DropFileExtensionPipe implements PipeTransform {\n  transform(value: string, fileSource: string) {\n    return fileSource && value ? value.substr(0, value.lastIndexOf('.')) : value;\n  }\n}\n"]}