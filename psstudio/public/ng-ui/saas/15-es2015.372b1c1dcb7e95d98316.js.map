{"version":3,"sources":["webpack:///src/app/routes/data-drift/drift-overview/drift-overview.component.html","webpack:///src/app/routes/data-drift/drift-overview/drift-overview.component.ts","webpack:///src/app/routes/data-drift/drift-report/drift-report.component.html","webpack:///src/app/routes/data-drift/drift-report/drift-report.component.ts","webpack:///src/app/routes/data-drift/drift-dialog/drift-dialog.component.html","webpack:///src/app/routes/data-drift/drift-dialog/drift-dialog.component.ts","webpack:///src/app/routes/data-drift/drift-settings/drift-settings.component.html","webpack:///src/app/routes/data-drift/drift-settings/drift-settings.component.ts","webpack:///src/app/routes/data-drift/data-drift.module.ts","webpack:///src/app/routes/eda/eda.service.ts"],"names":["Plotly","DriftOverviewComponent","_spinner","_localStorage","_data","_toaster","_dataDrift","_socket","_eda","inputFeature","required","unsubscribe$","Subject","psiThresholdArray","name","value","stdThresholdArray","modelInfo","this","showSpinner","initSocket","project","getItem","reportDetails","incomingFileId","filename","substr","lastIndexOf","text","data","cols","rows","color","icon","modelId","modelMetaData","algoName","depVariable","noOfRows","noOfCols","conceptDrift","distributionPlot","layout","template","plot_bgcolor","xaxis","showgrid","yaxis","showline","linecolor","plot","document","getElementById","performancePlot","stopSpinner","reqObj","algoType","type","stdThreshold","reportName","selectedDataSet","getAllProjectDatas","_id","pipe","takeUntil","toPromise","catch","err","error","filesList","find","item","originalFileWithEdaDetails","getAllChildDatasets","currentEdaId","edaId","incomingFilepath","incomingSchema","fileSchema","map","colName","dataType","getFeaturewiseReport","startDriftAnalysis","trainingId","subscribe","res","info","threshodType","msg","filter","toString","val","hasDrifted","message","metricValue","listen","graphDiv","length","deleteTraces","status","bstats","baselineStats","istats","incomingStats","propName","featureWiseDistribution","featureWiseDistributionPlot","success","removeListener","next","unsubscribe","featurewiseChanged","swal","DriftReportComponent","dataSource","pageSizeOptions","displayedColumns","showOverview","user","paginator","sort","getReportsList","getAllReports","reportsArray","_updateChangeSubscription","reportData","getReportDetails","title","buttons","cancel","visible","className","confirm","then","isConfirm","deleteReport","event","target","trim","toLowerCase","firstPage","DriftDialogComponent","dialogData","_fb","_notebookDialogRef","algoTypeArray","classificationMetricArray","regressionMetricArray","metricArray","addToPipeline","isEdit","isDriftType","isConceptDriftType","isDataDriftType","dataDrift","modelPerformanceType","distributionType","numericFeatures","categoricalFeatures","textFeatures","distributionDriftThreshold","numericFeaturesDriftThreshold","finalMetricArray","finalThresholdArray","settingsForm","group","configName","modelPerformanceMetric","nullValidator","modelPerformanceThreshold","distributionMetric","distributionThreshold","numericFeaturesMetric","numericFeaturesThreshold","categoricalFeaturesMetric","disabled","categoricalFeaturesThreshold","textFeaturesMetric","textFeaturesThreshold","prefillConnectionForm","settingsData","driftType","get","setValidators","updateValueAndValidity","settingIdToUpdate","isSelected","patchValue","modelPerformance","distribution","driftThreshold","metric","threshold","reset","formValue","createRequestObject","updateSettingHandler","createNewSettingHandler","parseInt","newCategories","createdBy","projectId","settingData","createNewSetting","closeModal","updateSetting","conceptDriftChanged","setDriftValidator","setValue","close","algoTypeChanged","driftTypeChanged","onSubmitSettings","DriftSettingsComponent","_dialog","_sanitizer","_schedular","getSettingsList","getAllSettings","settingArray","open","minWidth","dataGroups","dataGroupList","dataSets","dataSetList","afterClosed","deleteSetting","fileName","openFormDialog","routes","path","component","DataDriftModule","forChild","EdaService","_http","serverBaseUrl","post","fileId","responseType"],"mappings":"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","file":"x","sourcesContent":["<mat-accordion>\n  <mat-chip-list>\n    <mat-chip>Report Name : {{ reportDetails.reportName }}</mat-chip>\n  </mat-chip-list>\n  <!-- Dataset/Model Information -->\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>Dataset / Model Information</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-grid-list cols=\"5\" rowHeight=\"100px\" gutterSize=\"10px\">\n      <mat-grid-tile\n        *ngFor=\"let tile of modelInfo\"\n        [colspan]=\"tile.cols\"\n        [rowspan]=\"tile.rows\"\n        [style.background]=\"tile.color\"\n      >\n        <em [class]=\"tile.icon\"></em>\n        <div class=\"d-flex flex-column\">\n          <h4>{{ tile.data }}</h4>\n          <h5>{{ tile.text }}</h5>\n        </div>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-expansion-panel>\n\n  <!-- Concept Drift -->\n  <mat-expansion-panel *ngIf=\"reportDetails.conceptDrift\">\n    <mat-expansion-panel-header>\n      <mat-panel-title>Concept Drift</mat-panel-title>\n    </mat-expansion-panel-header>\n    <!-- Model Performance -->\n    <div\n      class=\"row\"\n      *ngIf=\"\n        reportDetails.conceptDrift.performancePlot || reportDetails.conceptDrift.targetDistribution\n      \"\n    >\n      <!-- MP PLOT -->\n      <div class=\"col-md-7\" *ngIf=\"reportDetails.conceptDrift.performancePlot\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Model Performance Plot</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <div id=\"modelPerformancePlot\"></div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      <!-- MP TARGET DISTRIBUTION -->\n      <div class=\"col-md-5\" *ngIf=\"reportDetails.conceptDrift.targetDistribution\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Target Distribution</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <!-- Target distribution table for REGRESSION -->\n            <div *ngIf=\"reportDetails.algoType === 'regression'\" class=\"table-responsive\">\n              <table class=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Baseline Statistics</th>\n                    <th>Incoming Statistics</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    *ngFor=\"\n                      let item of reportDetails.conceptDrift.targetDistribution.baselineStats\n                        | keyvalue\n                    \"\n                  >\n                    <th>{{ item.key }}</th>\n                    <td>{{ item.value }}</td>\n                    <td>\n                      {{ reportDetails.conceptDrift.targetDistribution.incomingStats[item.key] }}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <!-- Target distribution table for CLASSIFICATION -->\n            <div *ngIf=\"reportDetails.algoType === 'classification'\" class=\"table-responsive\">\n              <table class=\"table table-bordered\">\n                <tbody>\n                  <tr>\n                    <th rowspan=\"2\" style=\"vertical-align: middle\">New Categories</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.targetDistribution.newCategories\n                          ? reportDetails.conceptDrift.targetDistribution.newCategories\n                          : '-'\n                      }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      {{ reportDetails.conceptDrift.targetDistribution.rowsAffected }}% rows in the\n                      incoming data have new categories\n                    </td>\n                  </tr>\n                  <tr>\n                    <th>Absent Categories</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.targetDistribution.absentCategories\n                          ? reportDetails.conceptDrift.targetDistribution.absentCategories\n                          : '-'\n                      }}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n    <!-- Distribution -->\n    <div\n      class=\"row mt-4\"\n      *ngIf=\"reportDetails.conceptDrift.distributionPlot || reportDetails.conceptDrift.distribution\"\n    >\n      <!-- DIST PLOT -->\n      <div class=\"col-md-7\" *ngIf=\"reportDetails.conceptDrift.distributionPlot\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Distribution Plot</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <div id=\"distributionPlot\"></div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      <!-- DIST METRIC TABLE -->\n      <div class=\"col-md-5\" *ngIf=\"reportDetails.conceptDrift.distribution\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Distribution Metric Details</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <div class=\"table-responsive\">\n              <table class=\"table table-striped\">\n                <tbody>\n                  <tr>\n                    <th>Column Name</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.distribution.colName\n                          ? reportDetails.conceptDrift.distribution.colName\n                          : '-'\n                      }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <th>Metric Name</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.distribution.metricName\n                          ? reportDetails.conceptDrift.distribution.metricName\n                          : '-'\n                      }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <th>Threshold</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.distribution.threshold\n                          ? convertToMessage(reportDetails.conceptDrift.distribution.threshold)\n                          : '-'\n                      }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <th>Metric Value</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.distribution.metricValue === null ||\n                        reportDetails.conceptDrift.distribution.metricValue === undefined\n                          ? '-'\n                          : reportDetails.conceptDrift.distribution.metricValue\n                      }}\n                    </td>\n                  </tr>\n                  <tr\n                    *ngIf=\"\n                      reportDetails.conceptDrift.distribution.hasOwnProperty('isCardinalityChanged')\n                    \"\n                  >\n                    <th>Is Cardinality Changed?</th>\n                    <td>\n                      {{ reportDetails.conceptDrift.distribution.isCardinalityChanged }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <th>Message</th>\n                    <td>\n                      {{\n                        reportDetails.conceptDrift.distribution.message\n                          ? reportDetails.conceptDrift.distribution.message\n                          : '-'\n                      }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <th>Status</th>\n                    <td>{{ reportDetails.conceptDrift.distribution.status }}</td>\n                  </tr>\n                </tbody>\n              </table>\n              <!-- <h5 class=\"text-center\" ng-if=\"vm.distributionDetails.status === 'fail'\">No data available.</h5> -->\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n  </mat-expansion-panel>\n\n  <!-- Drift summary -->\n  <mat-expansion-panel *ngIf=\"reportDetails.summary\">\n    <mat-expansion-panel-header>\n      <mat-panel-title>Drift Summary</mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"row\">\n      <!-- Tabs (Numerical/Catrgorical/Text) -->\n      <div class=\"col-md-6\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Types</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <mat-tab-group dynamicHeight>\n              <mat-tab label=\"Numeric Drift\">\n                <p class=\"mt-4\" *ngIf=\"!reportDetails.summary.hasOwnProperty('numericDrift')\">\n                  No Data\n                </p>\n                <div\n                  class=\"table-responsive mt-4\"\n                  *ngIf=\"reportDetails.summary.hasOwnProperty('numericDrift')\"\n                >\n                  <h5 style=\"font-size: 16px\">\n                    Message : <span>{{ reportDetails.summary.numericDrift.message }}</span>\n                  </h5>\n                  <h5 style=\"font-size: 16px\">\n                    Metric Name : <span>{{ reportDetails.summary.numericDrift.metricName }}</span>\n                  </h5>\n                </div>\n              </mat-tab>\n              <mat-tab label=\"Categorical Drift\">\n                <p class=\"mt-4\" *ngIf=\"!reportDetails.summary.hasOwnProperty('categoricalDrift')\">\n                  No Data\n                </p>\n                <div\n                  class=\"table-responsive mt-4\"\n                  *ngIf=\"reportDetails.summary.hasOwnProperty('categoricalDrift')\"\n                >\n                  <h5 style=\"font-size: 16px\">\n                    Message : <span>{{ reportDetails.summary.categoricalDrift.message }}</span>\n                  </h5>\n                  <h5 style=\"font-size: 16px\">\n                    Metric Name :\n                    <span>{{ reportDetails.summary.categoricalDrift.metricName }}</span>\n                  </h5>\n                </div>\n              </mat-tab>\n              <mat-tab label=\"Text Drift\">\n                <p class=\"mt-4\" *ngIf=\"!reportDetails.summary.hasOwnProperty('textDrift')\">\n                  No Data\n                </p>\n                <div\n                  class=\"table-responsive mt-4\"\n                  *ngIf=\"reportDetails.summary.hasOwnProperty('textDrift')\"\n                >\n                  <h5 style=\"font-size: 16px\">\n                    Message :\n                    <span style=\"color: black\">{{ reportDetails.summary.textDrift.message }}</span>\n                  </h5>\n                  <h5 style=\"font-size: 16px\">\n                    Metric Name : <span>{{ reportDetails.summary.textDrift.metricName }}</span>\n                  </h5>\n                </div>\n              </mat-tab>\n            </mat-tab-group>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      <!-- Features Mismatched -->\n      <div class=\"col-md-6\" *ngIf=\"reportDetails.summary.featuresMismatch\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Features Mismatch</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <mat-tab-group dynamicHeight>\n              <mat-tab label=\"Extra Features\">\n                <p\n                  class=\"mt-4\"\n                  *ngIf=\"reportDetails.summary.featuresMismatch.extraFeatures.length === 0\"\n                >\n                  No Data\n                </p>\n                <div\n                  class=\"table-responsive\"\n                  *ngIf=\"reportDetails.summary.featuresMismatch.extraFeatures.length > 0\"\n                >\n                  <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th>Column Name</th>\n                        <th>Data Type</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr\n                        *ngFor=\"\n                          let item of reportDetails.summary.featuresMismatch.extraFeatures;\n                          let i = index\n                        \"\n                      >\n                        <td>{{ i + 1 }}</td>\n                        <td>{{ item.colName }}</td>\n                        <td>{{ item.dataType }}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </mat-tab>\n              <mat-tab label=\"Missing Features\">\n                <p\n                  class=\"mt-4\"\n                  *ngIf=\"reportDetails.summary.featuresMismatch.missingFeatures.length === 0\"\n                >\n                  No Data\n                </p>\n                <div\n                  class=\"table-responsive\"\n                  *ngIf=\"reportDetails.summary.featuresMismatch.missingFeatures.length > 0\"\n                >\n                  <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th>Column Name</th>\n                        <th>Data Type</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr\n                        *ngFor=\"\n                          let item of reportDetails.summary.featuresMismatch.missingFeatures;\n                          let i = index\n                        \"\n                      >\n                        <td>{{ i + 1 }}</td>\n                        <td>{{ item.colName }}</td>\n                        <td>{{ item.dataType }}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </mat-tab>\n            </mat-tab-group>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n  </mat-expansion-panel>\n\n  <!-- Data drift -->\n  <mat-expansion-panel *ngIf=\"reportDetails.dataDrift\">\n    <mat-expansion-panel-header>\n      <mat-panel-title>Data Drift</mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-tab-group dynamicHeight>\n      <!-- NUMERIC TABLE -->\n      <mat-tab label=\"Numeric Drift\">\n        <p class=\"mt-4\" *ngIf=\"!reportDetails.dataDrift.hasOwnProperty('numericDrift')\">No Data</p>\n        <div\n          class=\"table-responsive\"\n          *ngIf=\"\n            reportDetails.dataDrift.numericDrift !== undefined &&\n            reportDetails.dataDrift.hasOwnProperty('numericDrift')\n          \"\n        >\n          <table class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Column Name</th>\n                <th>Has Driftted</th>\n                <th>Metric Value</th>\n                <th>Message</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"\n                  let item of reportDetails.dataDrift?.numericDrift.metricValues;\n                  let i = index\n                \"\n              >\n                <td>{{ i + 1 }}</td>\n                <td>{{ item.colName }}</td>\n                <td>{{ dataFiltering(item) }}</td>\n                <td>{{ metricValue(item) }}</td>\n                <td>{{ item.message ? item.message : '-' }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <h5\n          style=\"font-size: 15px; margin-top: 40px\"\n          *ngIf=\"\n            reportDetails.dataDrift.numericDrift !== undefined &&\n            reportDetails.dataDrift.hasOwnProperty('numericDrift')\n          \"\n        >\n          Metric Name :<span>\n            {{\n              reportDetails.dataDrift?.numericDrift.metricName\n                ? reportDetails.dataDrift?.numericDrift.metricName\n                : '-'\n            }}</span\n          >\n        </h5>\n        <h5\n          *ngIf=\"\n            reportDetails.dataDrift.numericDrift !== undefined &&\n            reportDetails.dataDrift.hasOwnProperty('numericDrift') &&\n            reportDetails.dataDrift?.numericDrift.driftThreshold\n          \"\n          style=\"font-size: 15px; margin-top: 15px\"\n        >\n          Threshold :<span>\n            {{\n              reportDetails.dataDrift?.numericDrift.threshold\n                ? convertToMessage(reportDetails.dataDrift?.numericDrift.threshold)\n                : '-'\n            }}\n          </span>\n        </h5>\n        <h5\n          *ngIf=\"\n            reportDetails.dataDrift.numericDrift !== undefined &&\n            reportDetails.dataDrift.hasOwnProperty('numericDrift') &&\n            reportDetails.dataDrift?.numericDrift.driftThreshold\n          \"\n          style=\"font-size: 15px; margin-top: 15px\"\n        >\n          Drift Threshold :<span>{{ reportDetails.dataDrift?.numericDrift.driftThreshold }}%</span>\n        </h5>\n      </mat-tab>\n      <!-- CATEGORIC TABLE -->\n      <mat-tab label=\"Categorical Drift\">\n        <p class=\"mt-4\" *ngIf=\"!reportDetails.dataDrift.categoricalDrift\">No Data</p>\n        <div class=\"table-responsive\" *ngIf=\"reportDetails.dataDrift.categoricalDrift\">\n          <table class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Column Name</th>\n                <th>Has Cardinality Changed</th>\n                <th>Has Driftted</th>\n                <th>Metric Value</th>\n                <th>Message</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"\n                  let item of reportDetails.dataDrift.categoricalDrift.metricValues;\n                  let i = index\n                \"\n              >\n                <td>{{ i + 1 }}</td>\n                <td>{{ item.colName }}</td>\n                <td>{{ item.isCardinalityChanged }}</td>\n                <td>{{ dataFiltering(item) }}</td>\n                <td>{{ metricValue(item) }}</td>\n                <td>{{ item.message ? item.message : '-' }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </mat-tab>\n      <!-- TEXT TABLE -->\n      <mat-tab label=\"Text Drift\">\n        <p class=\"mt-4\" *ngIf=\"!reportDetails.dataDrift.textDrift\">No Data</p>\n        <div class=\"table-responsive\" *ngIf=\"reportDetails.dataDrift.textDrift\">\n          <table class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Column Name</th>\n                <th>Has Driftted</th>\n                <th>Metric Value</th>\n                <th>Message</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let item of reportDetails.dataDrift.textDrift.metricValues; let i = index\"\n              >\n                <td>{{ i + 1 }}</td>\n                <td>{{ item.colName }}</td>\n                <td>{{ dataFiltering(item) }}</td>\n                <td>{{ metricValue(item) }}</td>\n                <td>{{ item.message ? item.message : '-' }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-expansion-panel>\n\n  <!-- Featurewise drift -->\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>Featurewise Drift Report</mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"row\">\n      <!-- Input feature dropdown -->\n      <div class=\"col-md-4 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Select input feature</mat-label>\n          <mat-select\n            [formControl]=\"inputFeature\"\n            (selectionChange)=\"featurewiseChanged($event.value)\"\n            required\n          >\n            <mat-option *ngFor=\"let feature of reportDetails.featureList\" [value]=\"feature\">{{\n              feature\n            }}</mat-option>\n          </mat-select>\n          <mat-error\n            *ngIf=\"\n              inputFeature.hasError('required') && (inputFeature.dirty || inputFeature.touched)\n            \"\n            >Input feature is required.</mat-error\n          >\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"row mt-3\">\n      <!-- PLOT -->\n      <div class=\"col-md-6\">\n        <div id=\"featureWiseDistribution\"></div>\n      </div>\n      <!-- DETAILS -->\n      <div class=\"col-md-6\" *ngIf=\"baselineStats || incomingStats\">\n        <mat-card class=\"custom-card\">\n          <mat-card-header>\n            <mat-card-title>Statistics</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <div class=\"table-responsive\">\n              <table class=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Baseline Stat</th>\n                    <th>Incoming Stat</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let item of baselineStats | keyvalue\">\n                    <th>{{ item.key }}</th>\n                    <td>{{ item.value }}</td>\n                    <td>{{ incomingStats[item.key] }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n  </mat-expansion-panel>\n</mat-accordion>\n","import { EdaService } from './../../eda/eda.service';\nimport { DataDriftService } from './../data-drift.service';\nimport { DataService } from './../../data/data.service';\nimport { LocalStorageService } from './../../../shared/local-storage.service';\nimport { SpinnerService } from './../../../shared/spinner.service';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\n\nconst Plotly = require('plotly.js-dist');\n\n@Component({\n  selector: 'app-drift-overview',\n  templateUrl: './drift-overview.component.html',\n  styleUrls: ['./drift-overview.component.scss'],\n})\nexport class DriftOverviewComponent implements OnInit {\n  @Input() reportDetails: any;\n\n  /** Form control */\n  inputFeature = new FormControl('', Validators.required);\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Contant arrays */\n  psiThresholdArray: Array<any> = [\n    { name: 'Less than 0.1 (No change in population)', value: '<0.1' },\n    { name: '0.1 – 0.20 (Some minor change in population)', value: '0.1-0.20' },\n    { name: 'Greater than 0.20 (Significant change in population)', value: '>0.20' },\n  ];\n  stdThresholdArray: Array<any> = [\n    { name: '1 STD (covers 68% of data)', value: '1' },\n    { name: '2 STD (covers 95% of data)', value: '2' },\n    { name: '3 STD (covers 99.7% of data)', value: '3' },\n  ];\n\n  project: any;\n  baselineStats: Array<any>;\n  incomingStats: Array<any>;\n  featureWiseDistributionPlot: any;\n  modelInfo: Array<any> = [];\n\n  constructor(\n    private _spinner: SpinnerService,\n    private _localStorage: LocalStorageService,\n    private _data: DataService,\n    private _toaster: ToastrService,\n    private _dataDrift: DataDriftService,\n    private _socket: SocketIoService,\n    private _eda: EdaService\n  ) {}\n\n  /**\n   * Initialize the module with required data\n   */\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.initSocket();\n    this.project = this._localStorage.getItem('project');\n    this.reportDetails.incomingFileId.filename = this.reportDetails.incomingFileId.filename.substr(\n      0,\n      this.reportDetails.incomingFileId.filename.lastIndexOf('.')\n    );\n    this.modelInfo = [\n      {\n        text: 'Incoming Dataset Name',\n        data: this.reportDetails.incomingFileId.filename,\n        cols: 5,\n        rows: 1,\n        // color: '#e6eef5',\n        color: '#cddceb',\n        icon: 'fas fa-database fa-3x mr-3 mb-2',\n      },\n      {\n        text: 'Model Name',\n        data: this.reportDetails.modelId.modelMetaData.algoName,\n        cols: 2,\n        rows: 1,\n        color: '#ffdab4',\n        icon: 'fas fa-cubes fa-3x mr-3 mb-2',\n      },\n      {\n        text: 'Target Name',\n        data: this.reportDetails.depVariable,\n        cols: 1,\n        rows: 1,\n        color: '#ffdab4',\n        icon: 'fas fa-bullseye fa-3x mr-3 mb-2',\n      },\n      {\n        text: 'No. of Rows',\n        data: this.reportDetails.incomingFileId.noOfRows,\n        cols: 1,\n        rows: 1,\n        color: '#ffdab4',\n        icon: 'fas fa-info fa-3x mr-3 mb-2',\n      },\n      {\n        text: 'No. of Cols',\n        data: this.reportDetails.incomingFileId.noOfCols,\n        cols: 1,\n        rows: 1,\n        color: '#ffdab4',\n        icon: 'fas fa-info fa-3x mr-3 mb-2',\n      },\n    ];\n  }\n\n  /**\n   * Plots all the graphs using Plotly.js after view is rendered\n   */\n  ngAfterViewInit() {\n    // Distribution Plot\n    if (this.reportDetails?.conceptDrift?.distributionPlot) {\n      this.reportDetails.conceptDrift.distributionPlot.layout.template.layout.plot_bgcolor =\n        'white';\n      this.reportDetails.conceptDrift.distributionPlot.layout.xaxis.showgrid = false;\n      this.reportDetails.conceptDrift.distributionPlot.layout.yaxis.showgrid = false;\n      this.reportDetails.conceptDrift.distributionPlot.layout.yaxis.showline = true;\n      this.reportDetails.conceptDrift.distributionPlot.layout.yaxis.showline = true;\n      this.reportDetails.conceptDrift.distributionPlot.layout.xaxis.linecolor = 'black';\n      this.reportDetails.conceptDrift.distributionPlot.layout.yaxis.linecolor = 'black';\n      Plotly.plot(\n        document.getElementById('distributionPlot'),\n        this.reportDetails.conceptDrift.distributionPlot.data,\n        this.reportDetails.conceptDrift.distributionPlot.layout\n      );\n    }\n\n    // Model Performance Plot\n    if (this.reportDetails?.conceptDrift?.performancePlot) {\n      this.reportDetails.conceptDrift.performancePlot.layout.template.layout.plot_bgcolor = 'white';\n      (this.reportDetails.conceptDrift.performancePlot.layout.xaxis.showgrid = false),\n        (this.reportDetails.conceptDrift.performancePlot.layout.yaxis.showgrid = false),\n        (this.reportDetails.conceptDrift.performancePlot.layout.yaxis.showline = true),\n        (this.reportDetails.conceptDrift.performancePlot.layout.yaxis.showline = true),\n        (this.reportDetails.conceptDrift.performancePlot.layout.xaxis.linecolor = 'black'),\n        (this.reportDetails.conceptDrift.performancePlot.layout.yaxis.linecolor = 'black');\n      Plotly.plot(\n        document.getElementById('modelPerformancePlot'),\n        this.reportDetails.conceptDrift.performancePlot.data,\n        this.reportDetails.conceptDrift.performancePlot.layout\n      );\n    }\n    this._spinner.stopSpinner();\n  }\n\n  /**\n   * Fetches all the required data and creates API parsing object structure\n   * @param inputFeature selected feature\n   */\n  async featurewiseChanged(inputFeature: string): Promise<any> {\n    this._spinner.showSpinner();\n    // Request parsing object\n    let reqObj: any = {\n      algoType: this.reportDetails.algoType,\n      type: 'feature_wise',\n      stdThreshold: this.project.stdThreshold || 3,\n      reportName: this.reportDetails.reportName,\n      inputFeature: inputFeature,\n      incomingFileId: this.reportDetails.incomingFileId,\n    };\n    // API call\n    let dataSet: any = await this._data\n      .getAllProjectDatas(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise()\n      .catch((err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Cannot generate featurewise drift report', 'Drift Reports');\n      });\n    let selectedDataSet: any = dataSet[0].filesList.find(\n      (item: any) => item._id === this.reportDetails.incomingFileId._id\n    );\n    // API call\n    let originalFileWithEdaDetails: any = await this._data\n      .getAllChildDatasets(this.project._id, selectedDataSet._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .toPromise()\n      .catch((err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Cannot generate featurewise drift report', 'Drift Reports');\n      });\n    if (originalFileWithEdaDetails[0].currentEdaId) {\n      reqObj.edaId = originalFileWithEdaDetails[0].currentEdaId;\n    } else {\n      reqObj.edaId = this.reportDetails.edaId;\n      reqObj.filename = this.reportDetails.incomingFileId.filename;\n    }\n    reqObj.incomingFilepath = selectedDataSet.name;\n    reqObj.incomingSchema = selectedDataSet.fileSchema.map((item: any) => {\n      let obj = { colName: item.colName, dataType: item.dataType };\n      return obj;\n    });\n    this.getFeaturewiseReport(reqObj);\n  }\n\n  /**\n   * Generates a featurewise drift report by API call\n   * @param reqObj\n   */\n  getFeaturewiseReport(reqObj: any): void {\n    this._dataDrift\n      .startDriftAnalysis(this.reportDetails.trainingId._id, this.reportDetails.modelId._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          if (res) {\n            this._toaster.info('Drift analysis started', 'Drift Reports');\n          } else {\n            this._spinner.stopSpinner();\n            this._toaster.error('Cannot generate featurewise drift report', 'Drift Reports');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Drift Settings');\n        }\n      );\n  }\n\n  /**\n   * Converts the value into full message\n   * @param {*} threshodType values\n   */\n  convertToMessage(threshodType: string): string {\n    let msg: string;\n    if (threshodType === '>0.20' || threshodType === '<0.1' || threshodType === '0.1-0.20') {\n      this.psiThresholdArray.filter((item) =>\n        item.value === threshodType ? (msg = item.name) : ''\n      );\n    } else {\n      this.stdThresholdArray.filter((item) =>\n        item.value === threshodType.toString() ? (msg = item.name) : ''\n      );\n    }\n    return msg;\n  }\n\n  /**\n   * Converts the message as per the type of reponse\n   * @param {*} item data\n   */\n  dataFiltering(item: any): string {\n    let val: string;\n    if (item.hasDrifted === 0 || item.hasDrifted === 'false') {\n      val = 'false';\n    } else if (item.hasDrifted === 1 || item.hasDrifted === 'true') {\n      val = 'true';\n    } else {\n      val = '-';\n    }\n    return val;\n  }\n\n  /**\n   * Converts the message as per the type of reponse\n   * @param {*} item data\n   */\n  metricValue(item: any): string {\n    var val = '';\n    if (item.message == null) {\n      val = item.metricValue;\n    } else {\n      val = '-';\n    }\n    return val;\n  }\n\n  /**\n   * Initializes the socket to listen to the events\n   */\n  initSocket(): void {\n    this._socket.listen('dataDrift').subscribe(\n      (res) => {\n        let graphDiv: any = document.getElementById('featureWiseDistribution');\n        while (graphDiv.data && graphDiv.data.length > 0) {\n          Plotly.deleteTraces(graphDiv, [0]);\n        }\n        if (res.status == 'datadrift_failed') {\n          this._toaster.error(res.data, 'Drift Report');\n        } else {\n          let bstats = res.data.baselineStats;\n          let istats = res.data.incomingStats;\n          for (var propName in bstats) {\n            if (bstats[propName] === '') {\n              delete bstats[propName];\n            }\n          }\n          for (var propName in istats) {\n            if (istats[propName] === '') {\n              delete istats[propName];\n            }\n          }\n          this.baselineStats = bstats;\n          this.incomingStats = istats;\n          if (res.data.featureWiseDistribution && res.data.featureWiseDistribution.data.length) {\n            this.featureWiseDistributionPlot = res.data.featureWiseDistribution;\n            this.featureWiseDistributionPlot.layout.template.layout.plot_bgcolor = 'white';\n            this.featureWiseDistributionPlot.layout.xaxis.showgrid = false;\n            this.featureWiseDistributionPlot.layout.yaxis.showgrid = false;\n            this.featureWiseDistributionPlot.layout.yaxis.showline = true;\n            this.featureWiseDistributionPlot.layout.yaxis.showline = true;\n            this.featureWiseDistributionPlot.layout.xaxis.linecolor = 'black';\n            this.featureWiseDistributionPlot.layout.yaxis.linecolor = 'black';\n            Plotly.plot(\n              graphDiv,\n              this.featureWiseDistributionPlot.data,\n              this.featureWiseDistributionPlot.layout\n            );\n          }\n          this._toaster.success('Featurewise drift analysis completed', 'Drift Report');\n        }\n        this._spinner.stopSpinner();\n      },\n      (err) => {\n        this._toaster.error('Socket Error', 'Drift Report');\n      }\n    );\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('dataDrift');\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">library_books</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3\n          [class]=\"showOverview ? 'heading-with-breadcrumb' : 'heading-title'\"\n          (click)=\"showOverview = false\"\n        >\n          Drift Reports\n        </h3>\n        <!-- ICON (chevron) -->\n        <mat-icon *ngIf=\"showOverview\" class=\"my-auto\">chevron_right</mat-icon>\n        <!-- LABEL (breadcrumb name) -->\n        <h3 *ngIf=\"showOverview\" class=\"breadcrumb-name\">Overview</h3>\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!showOverview && !dataSource.data.length\" class=\"text-center mt-5 font-weight-normal\">\n    You haven't created any drift report yet.\n  </h4>\n\n  <!-- Drift settings listing section (table) -->\n  <mat-card *ngIf=\"!showOverview && dataSource.data.length\" class=\"setting-listing mt-5 p-4\">\n    <mat-card-content>\n      <!-- Search bar -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" #input />\n      </mat-form-field>\n      <!-- Progress Spinner -->\n      <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        matSort\n        #driftReportSort=\"matSort\"\n        matSortActive=\"createdAt\"\n        matSortDirection=\"desc\"\n        matSortDisableClear\n        class=\"mt-2\"\n      >\n        <!-- Sr. No Column -->\n        <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 }}\n          </td>\n        </ng-container>\n\n        <!-- Report name Column -->\n        <ng-container matColumnDef=\"reportName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Report Name</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.reportName }}\n          </td>\n        </ng-container>\n\n        <!-- Algo type Column -->\n        <ng-container matColumnDef=\"algoType\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Algorithm Type</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.algoType }}\n          </td>\n        </ng-container>\n\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <!-- Data preview button -->\n              <button mat-icon-button (click)=\"showReportOverview(row)\">\n                <i class=\"fa fa-eye\"></i>\n              </button>\n              <!-- Delete button -->\n              <button class=\"delete-button\" mat-icon-button (click)=\"deleteHandler(row)\">\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n        </tr>\n      </table>\n\n      <!-- Paginator -->\n      <mat-paginator #driftReportPaginator class=\"mt-2\" [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Report overview selector -->\n  <div class=\"mt-4\" *ngIf=\"showOverview\">\n    <app-drift-overview [reportDetails]=\"reportDetails\"></app-drift-overview>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { DataDriftService } from '../data-drift.service';\n\nconst swal = require('sweetalert');\n@Component({\n  selector: 'app-drift-report',\n  templateUrl: './drift-report.component.html',\n  styleUrls: ['./drift-report.component.scss'],\n})\nexport class DriftReportComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild('driftReportPaginator') set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild('driftReportSort') set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  showSpinner: boolean = false;\n  user: any;\n  project: any;\n  reportsArray: Array<any>;\n  showOverview: boolean = false;\n  reportDetails: any;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dataDrift: DataDriftService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.displayedColumns = ['srNo', 'reportName', 'algoType', 'createdAt', 'actions'];\n  }\n\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.getReportsList();\n  }\n\n  /**\n   * Fetches all the drift reports list from DB\n   */\n  getReportsList(): void {\n    this._dataDrift\n      .getAllReports(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (res) {\n            this.reportsArray = res;\n            this.dataSource.data = res;\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n            this.dataSource._updateChangeSubscription();\n          } else {\n            this._toaster.error('Cannot fetch drift reports', 'Drift Reports');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Drift Reports');\n        }\n      );\n  }\n\n  /**\n   * Fetches the report details from DB to show overview\n   * @param reportData\n   */\n  showReportOverview(reportData: any): void {\n    this._spinner.showSpinner();\n    this._dataDrift\n      .getReportDetails(this.project._id, reportData._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (res) {\n            this.reportDetails = res;\n            this.showOverview = true;\n          } else {\n            this._toaster.error('Cannot fetch report overview', 'Drift Reports');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Drift Reports');\n        }\n      );\n  }\n\n  /**\n   * Handles the delete operation to delete report\n   * @param reportData\n   */\n  deleteHandler(reportData: any): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this drift report!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this.showSpinner = true;\n        this._dataDrift.deleteReport(this.project._id, reportData._id).subscribe(\n          (res: any) => {\n            if (res) {\n              this.reportsArray = this.reportsArray.filter((item) => item._id !== reportData._id);\n              this.dataSource.data = this.reportsArray;\n              this.dataSource._updateChangeSubscription();\n              this._toaster.success(\n                `${reportData.reportName} deleted successfully.`,\n                'Drift Reports'\n              );\n            } else {\n              this._toaster.error('Cannot delete the drift report', 'Drift Reports');\n            }\n            this.showSpinner = false;\n          },\n          (err: Error) => {\n            this.showSpinner = false;\n            this._toaster.error('Server Error', 'Drift Reports');\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<h2 mat-dialog-title>\n  {{ isEdit ? 'Update Drift Setting' : 'Create New Drift Setting' }}\n</h2>\n\n<mat-dialog-content class=\"mat-typography mt-4\">\n  <!-- Progress Spinner -->\n  <app-progress-spinner *ngIf=\"showSpinner\" class=\"spinner\"> </app-progress-spinner>\n\n  <form [formGroup]=\"settingsForm\" role=\"form\" class=\"form-validate\" name=\"settingsForm\">\n    <!-- Select algorithm type radio -->\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-label id=\"algorithm-type\">Select Algorithm Type</mat-label>\n        <mat-radio-group aria-labelledby=\"algorithm-type\" id=\"algorithm-type\" class=\"radio-group\" [(ngModel)]=\"algoType\"\n          [ngModelOptions]=\"{ standalone: true }\" (change)=\"algoTypeChanged(algoType)\">\n          <mat-radio-button *ngFor=\"let type of algoTypeArray\" [value]=\"type.val\">{{\n            type.name\n            }}</mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </div>\n\n    <!-- Setting Name -->\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label for=\"configName\">Setting name</mat-label>\n          <input matInput type=\"text\" name=\"fileName\" formControlName=\"configName\" id=\"configName\"\n            placeholder=\"Enter setting name\" autocomplete required />\n          <mat-error *ngIf=\"\n              settingsForm.get('configName').hasError('required') &&\n              (settingsForm.get('configName').dirty || settingsForm.get('configName').touched)\n            \">Setting name is required.</mat-error>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- Drift types checkbox -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <mat-label id=\"drift-type\">Select Drift Type</mat-label>\n        <div aria-labelledby=\"drift-type\" class=\"checkbox-group\">\n          <mat-checkbox [(ngModel)]=\"conceptDrift\" name=\"conceptDrift\" [ngModelOptions]=\"{ standalone: true }\"\n            (change)=\"driftTypeChanged('conceptDrift')\">Concept Drift</mat-checkbox>\n          <mat-checkbox [(ngModel)]=\"dataDrift\" name=\"dataDrift\" [ngModelOptions]=\"{ standalone: true }\"\n            (change)=\"driftTypeChanged('dataDrift')\">Data Drift</mat-checkbox>\n        </div>\n        <mat-hint *ngIf=\"!isDriftType\">Please select atleast one drift type to proceed.</mat-hint>\n      </div>\n    </div>\n\n    <hr *ngIf=\"conceptDrift\" />\n\n    <!-- Concept drift types checkbox -->\n    <div *ngIf=\"conceptDrift\" class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-label id=\"concept-drift-type\">Select Concept Drift Type</mat-label>\n        <div aria-labelledby=\"concept-drift-type\" class=\"checkbox-group\">\n          <!-- MODEL PERFORMANCE -->\n          <mat-checkbox [(ngModel)]=\"modelPerformanceType\" name=\"modelPerformanceType\"\n            [ngModelOptions]=\"{ standalone: true }\" (change)=\"conceptDriftChanged()\">Model Performance</mat-checkbox>\n          <div *ngIf=\"modelPerformanceType && conceptDrift\" class=\"row mt-3 ml-3\">\n            <!-- MP METRIC -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Metric</mat-label>\n                <mat-select formControlName=\"modelPerformanceMetric\" (selectionChange)=\"metricChanged()\"\n                  placeholder=\"Select metric\" required>\n                  <ng-container *ngIf=\"algoType === 'classification'\">\n                    <mat-option *ngFor=\"let metric of classificationMetricArray\" [value]=\"metric.value\">{{ metric.name\n                      }}</mat-option>\n                  </ng-container>\n                  <ng-container *ngIf=\"algoType === 'regression'\">\n                    <mat-option *ngFor=\"let metric of regressionMetricArray\" [value]=\"metric.value\">{{ metric.name }}\n                    </mat-option>\n                  </ng-container>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('modelPerformanceMetric').hasError('required') &&\n                    (settingsForm.get('modelPerformanceMetric').dirty ||\n                      settingsForm.get('modelPerformanceMetric').touched)\n                  \">Metric is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- MP THRESHOLD -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label for=\"modelPerformanceThreshold\">Threshold</mat-label>\n                <input matInput id=\"modelPerformanceThreshold\" type=\"number\" formControlName=\"modelPerformanceThreshold\"\n                  placeholder=\"Enter threshold\" autocomplete required />\n                <mat-error *ngIf=\"\n                    settingsForm.get('modelPerformanceThreshold').hasError('required') &&\n                    (settingsForm.get('modelPerformanceThreshold').dirty ||\n                      settingsForm.get('modelPerformanceThreshold').touched)\n                  \">Threshold is required.</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <!-- DISTRIBUTION -->\n          <mat-checkbox [(ngModel)]=\"distributionType\" name=\"distributionType\" [ngModelOptions]=\"{ standalone: true }\"\n            (change)=\"conceptDriftChanged()\">Distribution</mat-checkbox>\n          <div *ngIf=\"distributionType && conceptDrift\" class=\"row mt-3 ml-3\">\n            <!-- DIST METRIC -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Metric</mat-label>\n                <mat-select formControlName=\"distributionMetric\" (selectionChange)=\"metricChanged()\"\n                  placeholder=\"Select metric\" required>\n                  <mat-option *ngFor=\"let metric of metricArray\" [value]=\"metric.value\">{{\n                    metric.name\n                    }}</mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('distributionMetric').hasError('required') &&\n                    (settingsForm.get('distributionMetric').dirty ||\n                      settingsForm.get('distributionMetric').touched)\n                  \">Metric is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- DIST THRESHOLD -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Threshold</mat-label>\n                <mat-select formControlName=\"distributionThreshold\" placeholder=\"Select threshold\" required>\n                  <ng-container *ngIf=\"settingsForm.get('distributionMetric').value === 'psi'\">\n                    <mat-option *ngFor=\"let item of psiThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                  <ng-container *ngIf=\"this.settingsForm.get('distributionMetric').value === 'std'\">\n                    <mat-option *ngFor=\"let item of stdThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('distributionThreshold').hasError('required') &&\n                    (settingsForm.get('distributionThreshold').dirty ||\n                      settingsForm.get('distributionThreshold').touched)\n                  \">Threshold is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- SLIDER -->\n            <div *ngIf=\"settingsForm.get('distributionMetric').value === 'std'\" class=\"col-md-12 form-group\">\n              <label>Overall Drift Threshold : {{ distributionDriftThreshold }}%</label>\n              <div>\n                <mat-slider thumbLabel [displayWith]=\"formatLabel\" class=\"custom-mat-slider\" color=\"primary\"\n                  [(ngModel)]=\"distributionDriftThreshold\" [ngModelOptions]=\"{ standalone: true }\"></mat-slider>\n              </div>\n            </div>\n          </div>\n        </div>\n        <mat-hint *ngIf=\"!isConceptDriftType\">Please select atleast one concept drift type.</mat-hint>\n      </div>\n    </div>\n\n    <hr *ngIf=\"dataDrift\" />\n\n    <div *ngIf=\"dataDrift\" class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <mat-label id=\"data-drift-type\">Select Data Drift Type</mat-label>\n        <div aria-labelledby=\"data-drift-type\" class=\"checkbox-group\">\n          <!-- NUMERIC FEATURES -->\n          <mat-checkbox [(ngModel)]=\"numericFeatures\" name=\"numericFeatures\" [ngModelOptions]=\"{ standalone: true }\"\n            (change)=\"dataDriftChanged()\">Numerical Features</mat-checkbox>\n          <div *ngIf=\"numericFeatures && dataDrift\" class=\"row mt-3 ml-3\">\n            <!-- NUM METRIC -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Metric</mat-label>\n                <mat-select formControlName=\"numericFeaturesMetric\" (selectionChange)=\"metricChanged()\"\n                  placeholder=\"Select metric\" required>\n                  <mat-option *ngFor=\"let metric of metricArray\" [value]=\"metric.value\">{{\n                    metric.name\n                    }}</mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('numericFeaturesMetric').hasError('required') &&\n                    (settingsForm.get('numericFeaturesMetric').dirty ||\n                      settingsForm.get('numericFeaturesMetric').touched)\n                  \">Metric is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- NUM THRESHOLD -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Threshold</mat-label>\n                <mat-select formControlName=\"numericFeaturesThreshold\" placeholder=\"Select threshold\" required>\n                  <ng-container *ngIf=\"settingsForm.get('numericFeaturesMetric').value === 'psi'\">\n                    <mat-option *ngFor=\"let item of psiThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                  <ng-container *ngIf=\"this.settingsForm.get('numericFeaturesMetric').value === 'std'\">\n                    <mat-option *ngFor=\"let item of stdThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('numericFeaturesThreshold').hasError('required') &&\n                    (settingsForm.get('numericFeaturesThreshold').dirty ||\n                      settingsForm.get('numericFeaturesThreshold').touched)\n                  \">Threshold is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- NUM SLIDER -->\n            <div *ngIf=\"settingsForm.get('numericFeaturesMetric').value === 'std'\" class=\"col-md-12 form-group\">\n              <label>Overall Drift Threshold : {{ numericFeaturesDriftThreshold }}%</label>\n              <div>\n                <mat-slider thumbLabel [displayWith]=\"formatLabel\" class=\"custom-mat-slider\" color=\"primary\"\n                  [(ngModel)]=\"numericFeaturesDriftThreshold\" [ngModelOptions]=\"{ standalone: true }\"></mat-slider>\n              </div>\n            </div>\n          </div>\n\n          <!-- CATEGORICAL FEATURES -->\n          <mat-checkbox [(ngModel)]=\"categoricalFeatures\" name=\"categoricalFeatures\"\n            [ngModelOptions]=\"{ standalone: true }\" (change)=\"dataDriftChanged()\">Categorical Features</mat-checkbox>\n          <div *ngIf=\"categoricalFeatures && dataDrift\" class=\"row mt-3 ml-3\">\n            <!-- CAT METRIC -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Metric</mat-label>\n                <mat-select formControlName=\"categoricalFeaturesMetric\" (selectionChange)=\"metricChanged()\" required>\n                  <mat-option value=\"psi\">Population Stability Index (PSI)</mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('categoricalFeaturesMetric').hasError('required') &&\n                    (settingsForm.get('categoricalFeaturesMetric').dirty ||\n                      settingsForm.get('categoricalFeaturesMetric').touched)\n                  \">Metric is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- CAT THRESHOLD -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Threshold</mat-label>\n                <mat-select formControlName=\"numericFeaturesThreshold\" placeholder=\"Select threshold\" required>\n                  <ng-container *ngIf=\"settingsForm.get('numericFeaturesMetric').value === 'psi'\">\n                    <mat-option *ngFor=\"let item of psiThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                  <ng-container *ngIf=\"this.settingsForm.get('numericFeaturesMetric').value === 'std'\">\n                    <mat-option *ngFor=\"let item of stdThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('numericFeaturesThreshold').hasError('required') &&\n                    (settingsForm.get('numericFeaturesThreshold').dirty ||\n                      settingsForm.get('numericFeaturesThreshold').touched)\n                  \">Threshold is required.</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <!-- TEXT FEATURES -->\n          <mat-checkbox [(ngModel)]=\"textFeatures\" name=\"textFeatures\" [ngModelOptions]=\"{ standalone: true }\"\n            (change)=\"dataDriftChanged()\">Text Features</mat-checkbox>\n          <div *ngIf=\"textFeatures && dataDrift\" class=\"row mt-3 ml-3\">\n            <!-- TEXT METRIC -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Metric</mat-label>\n                <mat-select formControlName=\"textFeaturesMetric\" (selectionChange)=\"metricChanged()\" required>\n                  <mat-option value=\"psi\">Population Stability Index (PSI)</mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('textFeaturesMetric').hasError('required') &&\n                    (settingsForm.get('textFeaturesMetric').dirty ||\n                      settingsForm.get('textFeaturesMetric').touched)\n                  \">Metric is required.</mat-error>\n              </mat-form-field>\n            </div>\n            <!-- TEXT THRESHOLD -->\n            <div class=\"col-md-6 form-group\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Threshold</mat-label>\n                <mat-select formControlName=\"textFeaturesThreshold\" placeholder=\"Select threshold\" required>\n                  <ng-container *ngIf=\"settingsForm.get('textFeaturesMetric').value === 'psi'\">\n                    <mat-option *ngFor=\"let item of psiThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                  <ng-container *ngIf=\"this.settingsForm.get('textFeaturesMetric').value === 'std'\">\n                    <mat-option *ngFor=\"let item of stdThresholdArray\" [value]=\"item.value\">{{\n                      item.name\n                      }}</mat-option>\n                  </ng-container>\n                </mat-select>\n                <mat-error *ngIf=\"\n                    settingsForm.get('textFeaturesThreshold').hasError('required') &&\n                    (settingsForm.get('textFeaturesThreshold').dirty ||\n                      settingsForm.get('textFeaturesThreshold').touched)\n                  \">Threshold is required.</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <mat-hint *ngIf=\"!isDataDriftType\">Please select atleast one data drift type.</mat-hint>\n      </div>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"justify-content-end m-auto\">\n  <button mat-stroked-button (click)=\"closeModal()\">Cancel</button>\n  <button mat-flat-button class=\"btn-primary\" type=\"submit\" [disabled]=\"settingsForm.invalid || !isDriftType\"\n    (click)=\"onSubmitSettings(settingsForm.value)\">\n    {{ isEdit ? 'Update' : 'Create' }}\n  </button>\n</mat-dialog-actions>","import { SpinnerService } from 'src/app/shared/spinner.service';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { NotebookComponent } from '../../notebook/notebook.component';\nimport { DataDriftService } from '../data-drift.service';\n\n@Component({\n  selector: 'app-drift-dialog',\n  templateUrl: './drift-dialog.component.html',\n  styleUrls: ['./drift-dialog.component.scss']\n})\nexport class DriftDialogComponent implements OnInit {\n\n  /** Form group instance */\n  settingsForm: FormGroup;\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Constant arrays */\n  algoTypeArray: Array<any> = [{ name: 'Classification', val: 'classification' }, { name: 'Regression', val: 'regression' }];\n  classificationMetricArray: Array<any> = [{ name: \"Accurracy\", value: \"accuracy\" }, { name: \"F1 score\", value: \"f1_score\" }];\n  regressionMetricArray: Array<any> = [{ name: \"RMSE\", value: 'rmse' }, { name: \"MAE\", value: 'mae' }, { name: \"R2\", value: 'r2' }];\n  metricArray: Array<any> = [{ name: \"Population Stability Index (PSI)\", value: \"psi\" }, { name: \"Standard Deviation\", value: \"std\" }];\n  psiThresholdArray: Array<any> = [{ name: \"Less than 0.1 (No change in population)\", value: \"<0.1\" }, { name: \"0.1 – 0.20 (Some minor change in population)\", value: \"0.1-0.20\" }, { name: \"Greater than 0.20 (Significant change in population)\", value: \">0.20\" }];\n  stdThresholdArray: Array<any> = [{ name: \"1 STD (covers 68% of data)\", value: '1' }, { name: \"2 STD (covers 95% of data)\", value: '2' }, { name: \"3 STD (covers 99.7% of data)\", value: '3' }];\n\n  project: any;\n\n  showSpinner: boolean = false;\n  addToPipeline: boolean = false;\n  isEdit: boolean = false;\n  isDriftType: boolean = false;\n  isConceptDriftType: boolean = false;\n  isDataDriftType: boolean = false;\n  conceptDrift: boolean = false;\n  dataDrift: boolean = false;\n  modelPerformanceType: boolean = false;\n  distributionType: boolean = true;\n  numericFeatures: boolean = true;\n  categoricalFeatures: boolean = false;\n  textFeatures: boolean = false;\n\n  algoType: string = 'classification';\n  modelPerformanceMetric: string;\n  modelPerformanceThreshold: number;\n  distributionMetric: string;\n  distributionThreshold: string;\n  numericFeaturesMetric: string;\n  categoricalFeaturesMetric: string;\n  textFeaturesMetric: string;\n  numericFeaturesThreshold: string;\n  categoricalFeaturesThreshold: string;\n  distributionDriftThreshold: number = 50;\n  numericFeaturesDriftThreshold: number = 50;\n  textFeaturesThreshold: string;\n  finalMetricArray: Array<any> = [];\n  finalThresholdArray: Array<any> = [];\n  settingIdToUpdate: string;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _fb: FormBuilder,\n    private _dataDrift: DataDriftService,\n    private _toaster: ToastrService,\n    private _notebookDialogRef: MatDialogRef<NotebookComponent>,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService) {\n    this.settingsForm = this._fb.group({\n      configName: ['', Validators.required],\n      modelPerformanceMetric: ['', Validators.nullValidator],\n      modelPerformanceThreshold: ['', Validators.nullValidator],\n      distributionMetric: ['psi', Validators.nullValidator],\n      distributionThreshold: ['>0.20', Validators.nullValidator],\n      numericFeaturesMetric: ['psi', Validators.nullValidator],\n      numericFeaturesThreshold: ['>0.20', Validators.nullValidator],\n      categoricalFeaturesMetric: [{ value: 'psi', disabled: true }, Validators.nullValidator],\n      categoricalFeaturesThreshold: ['>0.20', Validators.nullValidator],\n      textFeaturesMetric: [{ value: 'psi', disabled: true }, Validators.nullValidator],\n      textFeaturesThreshold: ['>0.20', Validators.nullValidator]\n    });\n    this.prefillConnectionForm(this.dialogData.settingsData);\n  }\n\n  ngOnInit(): void {\n    this.project = this._localStorage.getItem('project');\n  }\n\n  setDriftValidator(driftType) {\n    if (driftType == 'conceptDrift') {\n      this.settingsForm.get('distributionMetric').setValidators(Validators.required);\n      this.settingsForm.get('distributionMetric').updateValueAndValidity();\n      this.settingsForm.get('distributionThreshold').setValidators(Validators.required);\n      this.settingsForm.get('distributionThreshold').updateValueAndValidity();\n    } else if (driftType == 'dataDrift') {\n      this.settingsForm.get('numericFeaturesMetric').setValidators(Validators.required);\n      this.settingsForm.get('numericFeaturesMetric').updateValueAndValidity();\n      this.settingsForm.get('numericFeaturesThreshold').setValidators(Validators.required);\n      this.settingsForm.get('numericFeaturesThreshold').updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Prefill the settings form for edit functionality\n   * @param settingsData selected drift setting details\n   */\n  prefillConnectionForm(settingsData: any): void {\n    if (settingsData) {\n      this.isEdit = true;\n      this.settingIdToUpdate = settingsData._id;\n      this.algoType = settingsData.algoType;\n      this.conceptDrift = settingsData.conceptDrift.isSelected;\n      this.dataDrift = settingsData.dataDrift.isSelected;\n      this.settingsForm.patchValue({\n        configName: settingsData.configName\n      });\n\n      if (this.conceptDrift) {\n        this.modelPerformanceType = settingsData.conceptDrift.modelPerformance.isSelected;\n        this.distributionType = settingsData.conceptDrift.distribution.isSelected;\n        this.distributionDriftThreshold = settingsData.conceptDrift.distribution.driftThreshold;\n        this.settingsForm.patchValue({\n          modelPerformanceMetric: settingsData.conceptDrift.modelPerformance.metric,\n          modelPerformanceThreshold: settingsData.conceptDrift.modelPerformance.threshold,\n          distributionMetric: settingsData.conceptDrift.distribution.metric,\n          distributionThreshold: settingsData.conceptDrift.distribution.threshold\n        });\n      }\n\n      if (this.dataDrift) {\n        this.numericFeatures = settingsData.dataDrift.numericFeatures.isSelected;\n        this.categoricalFeatures = settingsData.dataDrift.categoricalFeatures.isSelected;\n        this.textFeatures = settingsData.dataDrift.textFeatures.isSelected;\n        this.numericFeaturesDriftThreshold = settingsData.dataDrift.numericFeatures.driftThreshold;\n        this.settingsForm.patchValue({\n          numericFeaturesMetric: settingsData.dataDrift.numericFeatures.metric,\n          numericFeaturesThreshold: settingsData.dataDrift.numericFeatures.threshold,\n          categoricalFeaturesMetric: settingsData.dataDrift.categoricalFeatures.metric,\n          categoricalFeaturesThreshold: settingsData.dataDrift.categoricalFeatures.threshold,\n          textFeaturesMetric: settingsData.dataDrift.textFeatures.metric,\n          textFeaturesThreshold: settingsData.dataDrift.textFeatures.threshold\n        });\n      }\n\n      // Handling hint messages\n      this.conceptDrift || this.dataDrift ? this.isDriftType = true : this.isDriftType = false;\n      this.modelPerformanceType || this.distributionType ? this.isConceptDriftType = true : this.isConceptDriftType = false;\n      this.numericFeatures || this.categoricalFeaturesMetric || this.textFeatures\n        ? this.isDataDriftType = true\n        : this.isDataDriftType = false;\n    } else {\n      this.settingsForm.reset();\n      this.isEdit = false\n    }\n  }\n\n  /**\n   * Handles the on submit click event as per the functionality - create/edit\n   */\n  onSubmitSettings(formValue: any): void {\n    this.showSpinner = true;\n    let reqObj = this.createRequestObject(formValue);\n    if (this.isEdit) {\n      this.updateSettingHandler(reqObj);\n    } else {\n      this.createNewSettingHandler(reqObj);\n    }\n  }\n\n  /**\n   * Creates the request structure to parse in API call\n   * @param formValue \n   */\n  createRequestObject(formValue: any): any {\n    // Concept drift details\n    let conceptDrift: any = {\n      isSelected: this.conceptDrift,\n      modelPerformance: {\n        isSelected: this.modelPerformanceType,\n        metric: formValue.modelPerformanceMetric,\n        threshold: formValue.modelPerformanceThreshold,\n      },\n      distribution: {\n        isSelected: this.distributionType,\n        metric: formValue.distributionMetric,\n        threshold: formValue.distributionThreshold === '1' || formValue.distributionThreshold === '2' || formValue.distributionThreshold === '3' ? parseInt(formValue.distributionThreshold) : formValue.distributionThreshold,\n        driftThreshold: this.distributionDriftThreshold,\n      }\n    }\n\n    // Data drift details\n    let dataDrift: any = {\n      isSelected: this.dataDrift,\n      numericFeatures: {\n        isSelected: this.numericFeatures,\n        metric: formValue.numericFeaturesMetric,\n        threshold: formValue.numericFeaturesThreshold === '1' || formValue.numericFeaturesThreshold === '2' || formValue.numericFeaturesThreshold === '3' ? parseInt(formValue.numericFeaturesThreshold) : formValue.numericFeaturesThreshold,\n        driftThreshold: this.numericFeaturesDriftThreshold,\n      },\n      categoricalFeatures: {\n        isSelected: this.categoricalFeatures,\n        newCategories: true,\n        metric: formValue.categoricalFeaturesMetric ? formValue.categoricalFeaturesMetric : this.settingsForm.get('categoricalFeaturesMetric').value,\n        threshold: formValue.categoricalFeaturesThreshold,\n      },\n      textFeatures: {\n        isSelected: this.textFeatures,\n        metric: formValue.textFeaturesMetric ? formValue.textFeaturesMetric : this.settingsForm.get('textFeaturesMetric').value,\n        threshold: formValue.textFeaturesThreshold,\n      }\n    }\n\n    // Final request object\n    return {\n      configName: formValue.configName,\n      algoType: this.algoType,\n      conceptDrift: conceptDrift,\n      dataDrift: dataDrift,\n      createdBy: this.project.createdBy,\n      projectId: this.project._id,\n    }\n  }\n\n  /**\n   * Creates a new drift setting record into DB\n   * @param formValue \n   */\n  createNewSettingHandler(settingData: any): void {\n    this._dataDrift.createNewSetting(this.project._id, settingData)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((res: any) => {\n        this.showSpinner = false;\n        if (res) {\n          this._toaster.success('Setting created successfully', 'Drift Setting');\n          this.closeModal(res);\n        } else {\n          this._toaster.error('Cannot create new setting', 'Drift Setting');\n        }\n      }, (err: Error) => {\n        this.showSpinner = false;\n        this._toaster.error('Server Error', 'Drift Setting');\n      });\n  }\n\n  /**\n   * Updates the setting details in DB\n   * @param formValue \n   */\n  updateSettingHandler(settingData: any): void {\n    this._dataDrift.updateSetting(this.project._id, this.settingIdToUpdate, settingData)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((res: any) => {\n        this.showSpinner = false;\n        if (res) {\n          this._toaster.success('Setting updated successfully', 'Drift Setting');\n          this.closeModal(res);\n        } else {\n          this._toaster.error('Cannot update setting', 'Drift Setting');\n        }\n      }, (err: Error) => {\n        this.showSpinner = false;\n        this._toaster.error('Server Error', 'Drift Setting');\n      });\n  }\n\n  /**\n   * Function is called when algo type is changed\n   * @param {*} type classification/regression\n   */\n  algoTypeChanged(type: string): void {\n    this.algoType = type;\n    this.conceptDriftChanged();\n  }\n\n  /**\n   * Function is called when drift type is changed - concept drift/data drift\n   * And sets default values as per the selected type\n   */\n  driftTypeChanged(driftType): void {\n    this.setDriftValidator(driftType);\n    // Handling hint messages\n    this.conceptDrift || this.dataDrift ? this.isDriftType = true : this.isDriftType = false;\n    this.modelPerformanceType || this.distributionType ? this.isConceptDriftType = true : this.isConceptDriftType = false;\n    this.numericFeatures || this.categoricalFeaturesMetric || this.textFeatures\n      ? this.isDataDriftType = true\n      : this.isDataDriftType = false;\n\n    if (this.conceptDrift) {\n      this.settingsForm.get('distributionMetric').setValue('psi');\n      this.settingsForm.get('distributionThreshold').setValue('>0.20');\n    }\n    if (this.dataDrift) {\n      this.numericFeatures = true;\n      this.settingsForm.get('numericFeaturesMetric').setValue('psi');\n      this.settingsForm.get('numericFeaturesThreshold').setValue('>0.20');\n      this.settingsForm.get('categoricalFeaturesMetric').setValue('psi');\n      this.settingsForm.get('categoricalFeaturesThreshold').setValue('>0.20');\n      this.settingsForm.get('textFeaturesMetric').setValue('psi');\n      this.settingsForm.get('textFeaturesThreshold').setValue('>0.20');\n    }\n  }\n\n  /**\n   * Function is called when concept drift type is changed - model performance/distribution\n   * And sets default values as per the selected type\n   */\n  conceptDriftChanged(): void {\n    // Handling hint messages\n    this.modelPerformanceType || this.distributionType ? this.isConceptDriftType = true : this.isConceptDriftType = false;\n    if (this.modelPerformanceType) {\n      this.algoType == 'classification'\n        ? this.settingsForm.get('modelPerformanceMetric').setValue('f1_score')\n        : this.settingsForm.get('modelPerformanceMetric').setValue('rmse');\n\n      this.settingsForm.get('modelPerformanceMetric').value === 'rmse' || this.settingsForm.get('modelPerformanceMetric').value === 'mae'\n        ? this.settingsForm.get('modelPerformanceThreshold').setValue(0)\n        : this.settingsForm.get('modelPerformanceThreshold').setValue(50);\n    }\n    if (this.distributionType) {\n      this.settingsForm.get('distributionMetric').setValue('psi');\n      this.settingsForm.get('distributionThreshold').setValue('>0.20');\n    }\n  }\n\n  /**\n   * Function is called when data drift type is changed - numeric/categorical/text\n   * And sets default values as per the selected type\n   */\n  dataDriftChanged() {\n    // Handling hint messages\n    this.numericFeatures || this.categoricalFeaturesMetric || this.textFeatures\n      ? this.isDataDriftType = true\n      : this.isDataDriftType = false;\n  }\n\n  /**\n   * Function is called when metric is changed from drop-down\n   * And sets default values as per the selected type\n   */\n  metricChanged() {\n    this.settingsForm.get('distributionMetric').value === 'psi'\n      ? this.settingsForm.get('distributionThreshold').setValue('>0.20')\n      : this.settingsForm.get('distributionThreshold').setValue('3');\n\n    this.settingsForm.get('numericFeaturesMetric').value === 'psi'\n      ? this.settingsForm.get('numericFeaturesThreshold').setValue('>0.20')\n      : this.settingsForm.get('numericFeaturesThreshold').setValue('3');\n\n    this.settingsForm.get('modelPerformanceMetric').value === 'rmse' || this.settingsForm.get('modelPerformanceMetric').value === 'mae'\n      ? this.settingsForm.get('modelPerformanceThreshold').setValue(0)\n      : this.settingsForm.get('modelPerformanceThreshold').setValue(50);\n  }\n\n  /**\n   * Appends the % symbol to the slider thumb count\n   * @param value \n   * @returns \n   */\n  formatLabel(value: number): string {\n    return `${value}%`;\n  }\n\n  /**\n   * Closes the opened modal by sending the data or without data\n   */\n  closeModal(data?: any): void {\n    this._notebookDialogRef.close(data);\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","<!-- Main container -->\n<div class=\"fluid-container\">\n  <!-- HEADER -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">settings_suggest</mat-icon>\n      </div>\n      <mat-card-title>\n        <h3 class=\"heading-title\">Drift Settings</h3>\n      </mat-card-title>\n      <!-- BUTTON (new setting) -->\n      <button mat-raised-button class=\"btn-primary ml-auto\" (click)=\"openFormDialog()\">\n        Create\n      </button>\n    </mat-card-header>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!dataSource.data.length\" class=\"text-center mt-5 font-weight-normal\">\n    You haven't created any drift setting yet,\n    <a class=\"text-decoration-none\" href=\"#\" (click)=\"openFormDialog()\">create now.</a>\n  </h4>\n\n  <!-- Drift settings listing section (table) -->\n  <mat-card *ngIf=\"dataSource.data.length\" class=\"setting-listing mt-5 p-4\">\n    <mat-card-content>\n      <!-- Search bar -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" #input />\n      </mat-form-field>\n      <!-- Progress Spinner -->\n      <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        matSort\n        #driftSetSort=\"matSort\"\n        matSortActive=\"createdAt\"\n        matSortDirection=\"desc\"\n        matSortDisableClear\n        class=\"mt-2\"\n      >\n        <!-- Sr. No Column -->\n        <ng-container matColumnDef=\"srNo\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">\n            {{ i + 1 }}\n          </td>\n        </ng-container>\n\n        <!-- Config name Column -->\n        <ng-container matColumnDef=\"configName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Config Name</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.configName }}\n          </td>\n        </ng-container>\n\n        <!-- Algo type Column -->\n        <ng-container matColumnDef=\"algoType\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Algorithm Type</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.algoType }}\n          </td>\n        </ng-container>\n\n        <!-- Created At Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Created At</th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.createdAt | date: 'medium' }}\n          </td>\n        </ng-container>\n\n        <!-- Actions Column -->\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-buttons d-flex\">\n              <!-- Edit flow button -->\n              <button mat-icon-button (click)=\"openFormDialog(row)\">\n                <i class=\"fa fa-edit\"></i>\n              </button>\n              <!-- Delete button -->\n              <button class=\"delete-button\" mat-icon-button (click)=\"deleteHandler(row)\">\n                <i class=\"fa fa-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value != ''\">\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n          <td class=\"mat-cell\" colspan=\"4\" *ngIf=\"input.value == ''\">No data available in table</td>\n        </tr>\n      </table>\n      <!-- Paginator -->\n      <mat-paginator #driftSetPaginator class=\"mt-2\" [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { DataDriftService } from './../data-drift.service';\nimport { DriftDialogComponent } from './../drift-dialog/drift-dialog.component';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { SchedularService } from '../../dashboard/schedular/schedular.service';\nimport { DataService } from '../../data/data.service';\nimport { takeUntil } from 'rxjs/operators';\n\nconst swal = require('sweetalert');\n\n@Component({\n  selector: 'app-drift-settings',\n  templateUrl: './drift-settings.component.html',\n  styleUrls: ['./drift-settings.component.scss'],\n})\nexport class DriftSettingsComponent implements OnInit {\n  /** Data table settings */\n  dataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  @ViewChild('driftSetPaginator') set paginator(value: MatPaginator) {\n    this.dataSource.paginator = value;\n  }\n  @ViewChild('driftSetSort') set sort(value: MatSort) {\n    this.dataSource.sort = value;\n  }\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n  displayedColumns: Array<string> = [];\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  showSpinner: boolean = false;\n  user: any;\n  project: any;\n  dataGroupList: Array<any>;\n  dataSetList: Array<any>;\n  safeUrl: SafeResourceUrl;\n  settingArray: Array<any>;\n\n  constructor(\n    private _toaster: ToastrService,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _dialog: MatDialog,\n    private _sanitizer: DomSanitizer,\n    private _dataDrift: DataDriftService,\n    private _data: DataService,\n    private _schedular: SchedularService\n  ) {\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    this.displayedColumns = ['srNo', 'configName', 'algoType', 'createdAt', 'actions'];\n  }\n\n  ngOnInit(): void {\n    this._spinner.showSpinner();\n    this.getSettingsList();\n  }\n\n  /**\n   * Fetches all the drift configurations from DB\n   */\n  getSettingsList(): void {\n    this._dataDrift\n      .getAllSettings(this.project._id)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res: any) => {\n          this._spinner.stopSpinner();\n          if (res) {\n            this.settingArray = res;\n            this.dataSource.data = res;\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n            this.dataSource._updateChangeSubscription();\n          } else {\n            this._toaster.error('Cannot fetch drift settings', 'Drift Settings');\n          }\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Drift Settings');\n        }\n      );\n  }\n\n  /**\n   * Opens the dialog with form\n   */\n  openFormDialog(settingData?: any): void {\n    let dialodRef = this._dialog.open(DriftDialogComponent, {\n      minWidth: '50vw',\n      data: {\n        dataGroups: this.dataGroupList,\n        dataSets: this.dataSetList,\n        settingsData: settingData,\n      },\n    });\n\n    dialodRef.afterClosed().subscribe((data) => {\n      if (data) {\n        this.getSettingsList();\n      }\n    });\n  }\n\n  /**\n   * Handles the delete operation to delete setting\n   * @param settingData\n   */\n  deleteHandler(settingData: any): void {\n    swal({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this drift settings!',\n      icon: 'warning',\n      buttons: {\n        cancel: {\n          text: 'Cancel',\n          value: null,\n          visible: true,\n          className: '',\n        },\n        confirm: {\n          text: 'Yes, delete it!',\n          value: true,\n          visible: true,\n          className: 'bg-danger',\n        },\n      },\n    }).then((isConfirm: boolean) => {\n      if (isConfirm) {\n        this.showSpinner = true;\n        this._dataDrift.deleteSetting(this.project._id, settingData._id).subscribe(\n          (res: any) => {\n            if (res) {\n              this.settingArray = this.settingArray.filter((item) => item._id !== settingData._id);\n              this.dataSource.data = this.settingArray;\n              this.dataSource._updateChangeSubscription();\n              this._toaster.success(\n                `${settingData.fileName} deleted successfully`,\n                'Drift Settings'\n              );\n            } else {\n              this._toaster.error('Cannot delete the drift setting', 'Drift Settings');\n            }\n            this.showSpinner = false;\n          },\n          (err: Error) => {\n            this.showSpinner = false;\n            this._toaster.error('Server Error', 'Drift Settings');\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /**\n   * Unsubscribes the subscriptions after destroy\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DriftReportComponent } from './drift-report/drift-report.component';\nimport { DriftSettingsComponent } from './drift-settings/drift-settings.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DriftDialogComponent } from './drift-dialog/drift-dialog.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DriftOverviewComponent } from './drift-overview/drift-overview.component';\n\nconst routes: Routes = [\n  {\n    path: 'report',\n    component: DriftReportComponent,\n  },\n  {\n    path: 'settings',\n    component: DriftSettingsComponent,\n  },\n];\n\n@NgModule({\n  declarations: [DriftReportComponent, DriftSettingsComponent, DriftDialogComponent, DriftOverviewComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n  ]\n})\nexport class DataDriftModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EdaService {\n  serverBaseUrl: string = environment.serverBaseUrl;\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Does the multi uni variate analysis and generates plot\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  generateMultiUniVariatePlot(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/report/trainmodel/multiunivariate`, reqObj);\n  }\n\n  /**\n   * Shares the report\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  shareReport(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/output`, reqObj);\n  }\n\n  /**\n   * Starts the EDA execution process\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  startEda(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/projects/${projectId}/eda`, reqObj);\n  }\n\n  /**\n   * Get the details about a specific EDA\n   * @param edaId \n   * @returns \n   */\n  getEdaData(edaId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/eda/${edaId}/info`);\n  }\n\n  /**\n   * Reads the uploaded EDA data (summary/features)\n   * @param projectId \n   * @param reqObj \n   * @returns \n   */\n  readUploadedData(projectId: string, reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/projects/${projectId}/data/read`, reqObj);\n  }\n\n  /**\n   * Reads Class for the categorical feature\n   * @param reqObj \n   * @returns \n   */\n  getUniqueClass(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/training/feature/unique_categories`, reqObj);\n  }\n\n  /**\n   * Reads conditional filtering data\n   * @param reqObj \n   * @returns \n   */\n  getConditionalFilter(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/conditionalFiltering`, reqObj);\n  }\n\n  /**\n   * Gets List of target\n   * @param reqObj \n   * @returns \n   */\n  getTargetList(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/targetList`, reqObj);\n  }\n\n  /**\n   * Function to find previous Eda details\n   * @param projectId \n   * @param fileId \n   * @returns \n   */\n  getEdaByFileId(projectId: string, fileId: string): Observable<any> {\n    return this._http.get(`${this.serverBaseUrl}/api/v2/projects/${projectId}/eda/edaByFile?fileId=${fileId}`);\n  }\n\n  /**\n   * Function to validate the date format\n   * @param reqObj \n   * @returns \n   */\n  dateFormatValidator(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/dateFormat`, reqObj, { responseType: 'text' });\n  }\n\n  multiTimeseriesCheck(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/multiTimeseries`, reqObj, { responseType: 'text' });\n  }\n\n  /**\n   * Reads conditional filtering data\n   * @param reqObj \n   * @returns \n   */\n  getresamplingPreview(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/resamplingPreview`, reqObj);\n  }\n\n  /**\n   * Reads conditional filtering data\n   * @param reqObj \n   * @returns \n   */\n  calculateTimeseriesFrequency(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/multiple/calculateFrequency`, reqObj);\n  }\n\n  /**\n   * find timeseriesGroup\n   */\n  getTimeseriesGroup(reqObj: any): Observable<any> {\n    return this._http.post(`${this.serverBaseUrl}/api/v2/eda/timeseriesGroupList`, reqObj);\n  }\n}\n"]}