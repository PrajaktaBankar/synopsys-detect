{"version":3,"sources":["webpack:///src/app/shared/pipes/drop-file-extension.pipe.ts","webpack:///src/app/routes/training/dialog-handler/dialog-handler.component.html","webpack:///src/app/routes/training/dialog-handler/dialog-handler.component.ts","webpack:///src/app/routes/training/training.component.html","webpack:///src/app/routes/training/training.component.ts","webpack:///src/app/routes/training/training.module.ts"],"names":["DropFileExtensionPipe","value","fileSource","substr","lastIndexOf","DialogHandlerComponent","swal","Plotly","dialogData","_localStorage","_spinner","_training","_toaster","_utils","_snackBar","_sanitizer","_dialog","_trainingDialogRef","fb","hyperParaAlgoControl","required","clusterAlgorithm","unsubscribe$","Subject","nGramOptions","name","showNgramSlider","showSpinner","appType","environment","modelAlgorithmArray","nlpConfigs","mySelections","selectionArray","isDuplicate","isValid","showFaq","affinity","linkageOptions","option_label","linkage","hptForm","this","group","project","getItem","type","clusterAlgo","modelAlgorithms","filter","item","status","dialogHeading","algo","includes","indexNlp","findIndex","x","colName","selectedFeature","nlpFeatureExt","nlpFeatureConfig","nlpFeatureExtractionMethod","decodeError","nFeatureCount","nGram","nlpLanguage","stripAccents","ngramSliderVal","nlpDefaultConfigData","partialClusterData","clusterReqObj","ordinalEncoderData","oeMapData","itemFound","mapping","Array","from","length","mapperDatas","_","i","selected","selectedAlgoName","hptPreference","prefillForm","newPreference","dynamicFields","algoName","createFormAndAddValidation","fields","dynamicFormFields","getOriginalFormFields","projectStatus","prevTrainingData","data","showSnackBar","addPreference","saveFeatureConfiguration","maxNoClusters","getOptimalClusters","Object","keys","saveOrdinalEncoder","message","button","snackBarRef","open","horizontalPosition","verticalPosition","element","map","push","closeModal","title","text","icon","className","stopSpinner","trigram","undefined","find","ngram","newConfig","checkNgramSettings","forEach","config","cluster","Number","isInteger","optimiseClusterGraph","baseImg","plotType","findOptimalClusters","_id","pipe","takeUntil","subscribe","res","document","getElementById","deleteTraces","graphContent","layout","template","xanchor","y","yanchor","xaxis","linecolor","yaxis","plot","base64","safeUrl","bypassSecurityTrustResourceUrl","dendogramImage","error","err","a","createElement","href","download","click","featureName","featureConfig","val","dupArr","key","Set","size","ordinalEncMap","col","ordinalEncoder","algorithm","JSON","parse","stringify","item1","item2","close","controls","control","validatorsToAdd","entries","validators","min","requiredTrue","email","minLength","maxLength","pattern","String","nullValidator","max","addControl","next","unsubscribe","dismiss","ondownload","$event","stopPropagation","selection","TrainingModule","TrainingComponent","_data","_socket","_textAnalysis","_router","_fb","_cdr","colors","sparkOptions1","barColor","height","width","barSpacing","featureDataSource","stationaryDataSource","displayedColumns","stationaryDisplayedColumns","pageSizeOptions","dataSetControl","algorithmControl","pairwiseLinearOption","pairwisePolynomialOption","univariatePolynomialOption","explicitPairWiseOption","operation","typeOfAutoFeatureGen","epwMethods","decomposition","normalizationMethod","fsMethod","stationarityMethod","sampling","backGround","foreGround","pacfMethod","stationarityTestMethod","showClass","estimatorRegAlgo","estimatorClassAlgo","categoricalEncoders","dateOperations","normalizationOptions","componentGraphTypes","componentsTabs","nlpLanguages","nFeatureCounts","methodConstants","tsFrequencies","showAdvanceOptions","explicitPairwise","isNlp","correlationIsMultilabel","showTSTabs","testSize","scale","nFeaturesToSelect","timesteps","nlags","components","featurePercentage","uploadFileSize","kfold","deafultTestSize","clusters","agglomerativeCluster","selectedTabIndex","period","scalar","featureStep","nSteps","cv","dataSetsList","prevTrainingInfo","catEnc","featureList","indepVariables","dateComponent","tempfeat","autoFeatureGenTasks","featuresToTransform","samplingData","tempSelected","tempFeatures","tableData","textOrCategoricalFeatures","scoringFunctionArray","samplingdat","stationaryTestData","periodFreq","isTargetChanged","applyToTarget","allowedTrainingAdvanceOptions","algoCount","paginator","sort","ALGORITHMS_ARRAY","initSocket","getAlgorithms","user","psFeatures","allowedFeaturesList","trainingAlgoCount","featureScalingOption","getAllFiles","selectedFrequency","generateNumericArray","detectChanges","getAllProjectDatas","getPreviousTraining","getPreviousTrainingDetails","setValue","algorithms","timeseriesInfo","exogVariables","indepVariable","edaData","edaId","originalFileId","updateValueAndValidity","targetVarDetails","edaSummary","feature","depVariable","maxnStep","lenLongGrp","onChangeDataset","dataSetId","fdropMethod","targetList","univariatePolynomial","pairwisePolynomial","pairwiseLinear","split","pcaFeatures","clusterPcaFeatures","showAdvancedOptions","showlog","selectedDataSet","metaInfo","fileName","filename","generateScoringFunctionArray","getAllChildDatasets","resp","taFeatureConfig","childFileData","currentEdaId","algoType","isMultilabel","test","result","constantFeature","highCardinalityFeature","mostlyMissing","dataType","o1","some","o2","isMultipleTimeseries","timeseriesIds","getModelAlgorithms","taExperimentId","taExperiment","newFeature","flat","isHighDimensional","setNlpFeatureDefaults","buildTrainingTable","onClusteringAlgoChange","setModelData","onTsAlgoChange","predictiveModelingInfo","hasOwnProperty","showTrainingTable","tempEdaData","featureScores","isSelected","score","reset","onTargetChange","targetFeature","getTargetDetails","projectId","afterEdaDataFilePath","dependentFeaturetype","targetDetails","targetResponse","classNames","targetDistribution","targetLength","getOwnPropertyNames","dateColumnSelected","preprocessedFilepath","methodSelected","method","stationaryMethod","featureScaling","stationaryColumns","stationaryPaginator","stationarySort","featureTemp","ordinalEncoderMap","exogVariable","estimatorAlgo","kFold","featureSelectionMethod","featureSelectionCV","featureSelectionStep","scoringFunction","estimator","featureSelectionEstimator","customFeatureChecked","customFeatures","scalarValue","showscalar","samplingPercentage","showButton","output","record","initValue","row","select","dropOriginal","exponent","delimiter","featureSplitCount","generateIndepVariableList","clusteringInfo","numericFeatures","target","tSelected","k","clear","dateExcludedFeatures","_updateChangeSubscription","featureVal","featureExists","nlpFeature","option","model","getEPCFeatures","problemType","featureScore","encoder","dateComponentList","indep","splice","indexOf","featureSort","featurePaginator","encoderData","reqObj","openDialog","getUniqueCategories","body","index","toLowerCase","multilabel","useGPU","temp","getAFGoptions","categoricalColNames","featureScoreData","isError","fileData","getFeatures","noOfCols","scaleValue","parentFileId","parentPipelineFilename","tasks","currentPipelineFilename","fileSchema","pId","originalFileName","indexPath","noOfCol","paragraphColNames","dimReductionFitSize","datetimeColumnName","isImbalanced","rootFileName","step","calculateFeatureScore","calculatePercentage","calculateSamplingPercentage","s","assign","operator","percenatge","doc","intColNames","allFeatures","dataTypes","extFeatures","foundFeatureData","tempFeature","usingGPU","finalOrdinalEncoderMap","featureSelected","found","trainClusteringProject","trainTimeseriesProject","trainPredictiveProject","createTimeseriesReqData","startTimeseriesTraining","info","trainingReqData","sData","stationarity","filterOridinalEncoderMap","dataSetInfo","validateClusteringTrainingData","createClusteringReqData","startClusteringTraining","validatePredictiveTrainingData","createPredictiveReqData","startPredictiveTraining","samplingPer","samplingdict","targetType","selectedGraphType","frequency","tab","visualizationModel","getVisualizeComponentPlot","stationarityTest","startStationarityTest","getAutoCorrelationGraph","autoCorrelationGraph","generateConfigureData","roles","generateClusterData","minWidth","maxWidth","afterClosed","obj","parseFloat","isAllSelected","colname","filterFeatures","arr","event","tableName","filterValue","trim","firstPage","listen","success","navigate","removeListener","forChild","path","component"],"mappings":"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","file":"x","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n/**\n * Removes the extesion from a filename\n * Accepts file name as a parameter\n * Usage:\n *  value|dropFileExtension\n * Example:\n *  {{ 'example.txt' | dropFileExtension: fileSource }}\n *  formats to example\n */\n@Pipe({ name: 'dropFileExtension' })\nexport class DropFileExtensionPipe implements PipeTransform {\n  transform(value: string, fileSource: string) {\n    return fileSource && value ? value.substr(0, value.lastIndexOf('.')) : value;\n  }\n}\n","<!-- HEADING -->\n<h2 mat-dialog-title>\n  {{ dialogHeading }}\n</h2>\n<div class=\"col-md-12\">\n  <div style=\"margin-left: 85%\">\n    <mat-icon class=\"fa-solid fa-arrow-down-to-line\" (click)=\"ondownload()\" #tooltip=\"matTooltip\" matTooltip=\"\"\n      matTooltipPosition=\"above\" matTooltipHideDelay=\"1000\" style=\"cursor: pointer; font-size: 16px\"></mat-icon>\n  </div>\n  <button *ngIf=\"dialogData.type ==='optimalClusters' && clusterAlgorithm.value === 'Agglomerative' && !showFaq\"\n    mat-flat-button class=\"btn-primary\" type=\"submit\" (click)=\"faq('faq')\" style=\"margin-left: 93%;\">\n    FAQ\n  </button>\n  <button *ngIf=\"dialogData.type === 'optimalClusters' && showFaq\" mat-stroked-button style=\"margin-left: 93%;\"\n    (click)=\"faq('back')\">Back</button>\n</div>\n<!-- <button *ngIf=\"dialogData.type ==='optimalClusters' && clusterAlgorithm.value === 'Agglomerative' && !showFaq\"\n  mat-flat-button class=\"btn-primary\" type=\"submit\" (click)=\"faq('back')\">\n  Back\n</button> -->\n<!-- BODY (HPT)-->\n<mat-dialog-content *ngIf=\"dialogData.type === 'hpt'\" class=\"mat-typography\">\n  <!-- SELECT (algorithm) -->\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Select an algorithm</mat-label>\n    <mat-select [formControl]=\"hyperParaAlgoControl\" (selectionChange)=\"onHyperParamAlgoChange($event.value)\">\n      <mat-option *ngFor=\"let algo of modelAlgorithmArray\" [value]=\"algo.name\" [disabled]=\"algo.status === false\">{{\n        algo.name }}\n      </mat-option>\n    </mat-select>\n    <mat-error *ngIf=\"\n        hyperParaAlgoControl.hasError('required') &&\n        (hyperParaAlgoControl.dirty || hyperParaAlgoControl.touched)\n      \">Algorithm is required.</mat-error>\n  </mat-form-field>\n  <!-- DYNAMIC FORM -->\n  <div *ngIf=\"hyperParaAlgoControl.value\" class=\"row mt-4\" [formGroup]=\"hptForm\">\n    <div *ngFor=\"let field of dynamicFields?.fields\" class=\"col-md-6\">\n      <!-- SELECT -->\n      <mat-form-field *ngIf=\"field?.type === 'select'\" appearance=\"outline\">\n        <mat-label>{{ field.placeholder_text ? field.placeholder_text : field.name }}</mat-label>\n        <mat-select [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\">\n          <mat-option *ngFor=\"let opt of field.select_options\" [value]=\"opt.value\">{{\n            opt.option_label\n            }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n      <!-- NUMBER & TEXT-->\n      <mat-form-field *ngIf=\"field?.type === 'number' || field?.type === 'text'\" appearance=\"outline\">\n        <mat-label>{{ field?.label }}</mat-label>\n        <input matInput [type]=\"field?.type\" (change)=\"onChangeFields(field)\" [placeholder]=\"field?.placeholder_text\"\n          [name]=\"field.name\" [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\" />\n      </mat-form-field>\n      <!-- dynamic errors based on the errs returned by the formcontrols. -->\n      <!-- hptForm.invalid && (hptForm.dirty || hptForm.touched) -->\n      <mat-error *ngIf=\"hptForm.get(field?.name).errors?.required\">\n        This field is required.\n      </mat-error>\n      <mat-error *ngIf=\"hptForm.get(field?.name).errors?.minLength\">\n        No of characters are less than minimum length.\n      </mat-error>\n      <mat-error *ngIf=\"hptForm.get(field?.name).errors?.min\">\n        Value is less than minimum.\n      </mat-error>\n      <mat-error *ngIf=\"hptForm.get(field?.name).errors?.max\">\n        Value is greater than maximum.\n      </mat-error>\n      <mat-error *ngIf=\"hptForm.get(field?.name).errors?.maxLength\">\n        No of characters are more than maximum length.\n      </mat-error>\n      <mat-error *ngIf=\"hptForm.get(field?.name).errors?.pattern\">\n        Value type is not proper.\n      </mat-error>\n      <!-- RADIO -->\n      <label *ngIf=\"field.type === 'radio'\">{{ field.name }}</label>\n      <br />\n      <mat-radio-group *ngIf=\"field.type === 'radio'\" [(ngModel)]=\"field.data\" [formControlName]=\"field?.name\">\n        <mat-radio-button class=\"ml-4\" *ngFor=\"let radio of field.radio_btns\" [value]=\"radio.value\">{{ radio.radio_label\n          }}</mat-radio-button>\n      </mat-radio-group>\n    </div>\n  </div>\n</mat-dialog-content>\n\n<!-- BODY (configure feature)-->\n<mat-dialog-content *ngIf=\"dialogData.type === 'configureFeature' && nlpDefaultConfigData\" class=\"mat-typography\">\n  <div class=\"h5 d-flex align-items-center\">\n    Selected feature:\n    <mat-chip-list>\n      <mat-chip class=\"ml-2\">{{ dialogData.selectedFeature }}</mat-chip>\n    </mat-chip-list>\n  </div>\n  <!-- FORM -->\n  <div class=\"row mt-4\">\n    <!-- RADIO -->\n    <div class=\"col-md-6\">\n      <mat-label id=\"extraction\">NLP Feature Extraction</mat-label>\n      <mat-radio-group class=\"radio-group\" aria-labelledby=\"extraction\" [(ngModel)]=\"nlpFeatureExt\">\n        <mat-radio-button class=\"ml-4\" value=\"CountVectorizer\">Count Vectorizer</mat-radio-button>\n        <mat-radio-button class=\"ml-4\" value=\"TfidfVectorizer\">TfidfVectorizer</mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <!-- SELECT -->\n    <div class=\"col-md-6\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Select language</mat-label>\n        <mat-select [(ngModel)]=\"nlpLanguage\">\n          <mat-option *ngFor=\"let lang of dialogData.nlpLanguages\" [value]=\"lang\">{{\n            lang\n            }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class=\"row mt-4\">\n    <!-- RADIO -->\n    <div class=\"col-md-6\">\n      <mat-label id=\"accents\">Strip Accents</mat-label>\n      <mat-radio-group class=\"radio-group\" aria-labelledby=\"accents\" [(ngModel)]=\"stripAccents\">\n        <mat-radio-button class=\"ml-4\" value=\"none\">None</mat-radio-button>\n        <mat-radio-button class=\"ml-4\" value=\"ascii\">Ascii</mat-radio-button>\n        <mat-radio-button class=\"ml-4\" value=\"unicode\">Unicode</mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <!-- RADIO -->\n    <div class=\"col-md-6\">\n      <mat-label id=\"decode\">Decode Error</mat-label>\n      <mat-radio-group class=\"radio-group\" aria-labelledby=\"decode\" [(ngModel)]=\"decodeError\">\n        <mat-radio-button class=\"ml-4\" value=\"strict\">Strict</mat-radio-button>\n        <mat-radio-button class=\"ml-4\" value=\"ignore\">Ignore</mat-radio-button>\n        <mat-radio-button class=\"ml-4\" value=\"replace\">Replace</mat-radio-button>\n      </mat-radio-group>\n    </div>\n  </div>\n  <div class=\"row mt-4\">\n    <!-- SELECT -->\n    <div class=\"col-md-6\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>N Gram</mat-label>\n        <mat-select [compareWith]=\"compareWithFn\" [(ngModel)]=\"nGram\" (selectionChange)=\"nGramChanged()\" multiple>\n          <mat-option *ngFor=\"let opt of nGramOptions\" [value]=\"opt\">{{ opt.name }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n      <!-- SLIDER -->\n      <h4 *ngIf=\"showNgramSlider\" class=\"mt-3\">\n        <label>N Gram value: {{ngramSliderVal }}</label>\n        <br />\n        <mat-slider thumbLabel class=\"w-100\" color=\"primary\" min=\"1\" max=\"5\" step=\"1\" [(ngModel)]=\"ngramSliderVal\">\n        </mat-slider>\n      </h4>\n    </div>\n    <!-- INPUT (number) -->\n    <div class=\"col-md-6\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>NLP feature count</mat-label>\n        <input matInput type=\"number\" placeholder=\"Enter the value\" [(ngModel)]=\"nFeatureCount\" />\n      </mat-form-field>\n    </div>\n  </div>\n</mat-dialog-content>\n\n<!-- BODY (optimal clusters) -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'optimalClusters'\" class=\"mat-typography mt-2\">\n  <!-- INPUT (number) -->\n  <div class=\"row\" *ngIf=\"!showFaq\">\n    <div class=\"col-md-6\">\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\n        <mat-label>Select algorithm</mat-label>\n        <mat-select [formControl]=\"clusterAlgorithm\">\n          <mat-option *ngFor=\"let algo of clusterAlgo\" [value]=\"algo.name\">{{ algo.name }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div class=\"col-md-6\" *ngIf=\"clusterAlgorithm.value == 'KMeans'\">\n      <mat-form-field class=\"w-100\" appearance=\"outline\" [matTooltip]=\"_utils.getTootip('optimisedCluster')\">\n        <mat-label>Choose max number to get optimal k value</mat-label>\n        <input matInput type=\"number\" min=\"2\" max=\"10\" placeholder=\"Enter the value\"\n          (change)=\"onFocusOut(maxNoClusters)\" [(ngModel)]=\"maxNoClusters\" />\n        <mat-hint>Cluster value should be between 2 to 10.</mat-hint>\n      </mat-form-field>\n    </div>\n    <div class=\"col-md-12\" *ngIf=\"clusterAlgorithm.value == 'Agglomerative'\">\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Affinity</mat-label>\n            <input matInput type=\"text\" placeholder=\"Enter Affinity\" name=\"affinity\" [(ngModel)]=\"affinity\" />\n          </mat-form-field>\n        </div>\n        <div class=\"col-md-6\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Linkage</mat-label>\n            <mat-select [(ngModel)]=\"linkage\">\n              <mat-option *ngFor=\"let opt of linkageOptions\" [value]=\"opt.value\">{{\n                opt.value}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"showFaq\" class=\"row\">\n    <div class=\"col-md-6\">\n      <mat-card class=\"infographics-card\">\n        <img mat-card-image src=\"../../../../assets/img/dendrogram_gif.gif\" alt=\"dendogram\" />\n      </mat-card>\n    </div>\n    <div class=\"col-md-6\">\n      <mat-accordion>\n        <mat-expansion-panel class=\"my-3\" [expanded]=\"1\">\n          <mat-expansion-panel-header>\n            <mat-panel-title> FAQ's </mat-panel-title>\n          </mat-expansion-panel-header>\n          <ul>\n            <li><b>What do the x-axis and y-axis represent?</b></li>\n            <p>\n              The x-axis represents objects. The y-axis represents the distance metric.\n            </p>\n            <li><b>What do the vertical and horizontal lines in a dendrogram represent?</b></li>\n            <p>The vertical lines represent the distance between objects prior to merging. The horizontal lines\n              represent the merging of\n              objects. The higher the vertical lines, larger the distance between clusters/objects.</p>\n            <li><b>How to interpret a dendrogram?</b></li>\n            <p>\n              Optimal clusters have high inter-cluster and low intra-cluster distance. The dendrogram represents the\n              inter-cluster\n              distance matrix. The longest vertical line without any other external extended horizontal line passing\n              through it\n              represents the distance between the farthest clusters prior to merging. The optimal number of clusters is\n              given by the\n              number of vertical lines intersected by the drawn horizontal line cutting the longest vertical line.\n              Sent from Android device\n\n            </p>\n          </ul>\n        </mat-expansion-panel>\n      </mat-accordion>\n    </div>\n    <div class=\"card-deck justify-content-center\">\n    </div>\n  </div>\n  <!-- Progress Spinner -->\n  <app-progress-spinner class=\"spinner\" *ngIf=\"showSpinner\"></app-progress-spinner>\n  <!-- PLOT -->\n  <div class=\"d-flex justify-content-center\" id=\"optimiseClusterGraph\" *ngIf=\"clusterAlgorithm.value =='KMeans'\"></div>\n  <button\n    *ngIf=\"dialogData.type ==='optimalClusters' && clusterAlgorithm.value === 'Agglomerative' && !showFaq && baseImg !== undefined\"\n    mat-flat-button class=\"btn-primary\" type=\"submit\" (click)=\"ondownload()\" style=\"margin-left: 88%;\">\n    Download\n  </button>\n  <div class=\"text-center\" *ngIf=\"clusterAlgorithm.value =='Agglomerative'\">\n    <img width=\"100%\" [src]=\"dendogramImage\" class=\"imgbor\" />\n  </div>\n\n</mat-dialog-content>\n\n<!-- BODY (ordinal encoder) -->\n<mat-dialog-content *ngIf=\"dialogData.type === 'ordinalEncoder'\" class=\"mat-typography\">\n  <div class=\"h5 d-flex align-items-center\">\n    Selected feature:\n    <mat-chip-list>\n      <mat-chip class=\"ml-2\">{{ ordinalEncoderData.colName }}</mat-chip>\n    </mat-chip-list>\n  </div>\n  <!-- Dynamic form -->\n  <div class=\"row mt-4\">\n    <div *ngFor=\"let mapData of ordinalEncoderData.mapperDatas\" class=\"col-md-6\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>{{ mapData }}</mat-label>\n        <mat-select (selectionChange)=\"verifyDuplicateOridinalWeight(oeMapData[mapData])\"\n          [(ngModel)]=\"oeMapData[mapData]\" required>\n          <mat-option *ngFor=\"let opt of selectionArray\" [value]=\"opt.value\">{{\n            opt.value\n            }}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"!oeMapData[mapData]\">Field is required.</mat-error>\n      </mat-form-field>\n    </div>\n    <mat-error class=\"col-md-12\" *ngIf=\"!isValid\">Please enter all the inputs.</mat-error>\n    <mat-error class=\"col-md-12\" *ngIf=\"isDuplicate\">Duplicate values are not allowed.</mat-error>\n  </div>\n</mat-dialog-content>\n<hr />\n<!-- FOOTER -->\n<mat-dialog-actions class=\"justify-content-end m-auto\">\n  <button mat-stroked-button\n    [class]=\"dialogData.type === 'hpt' || dialogData.type === 'optimalClusters' ? 'mr-auto' : ''\"\n    (click)=\"closeModal()\">\n    Cancel\n  </button>\n  <button *ngIf=\"dialogData.type === 'hpt' && hyperParaAlgoControl.value\" mat-stroked-button\n    (click)=\"resetForm(hyperParaAlgoControl.value)\">\n    Reset\n  </button>\n  <!-- HPT preference -->\n  <button *ngIf=\"dialogData.type === 'hpt'\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    (click)=\"onSubmitForm(dialogData.type)\" [disabled]=\"hyperParaAlgoControl.invalid || hptForm.invalid\">\n    Submit\n  </button>\n  <!-- configure feature -->\n  <button *ngIf=\"dialogData.type === 'configureFeature'\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    (click)=\"onSubmitForm(dialogData.type)\"\n    [disabled]=\"!nlpDefaultConfigData.nFeatureCount || !nlpDefaultConfigData.nGram.length\">\n    Submit\n  </button>\n  <!-- optimal clusters -->\n  <button *ngIf=\"dialogData.type === 'optimalClusters' && !showFaq\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    (click)=\"onSubmitForm(dialogData.type)\" [disabled]=\"clusterAlgorithm.value == 'KMeans' && !maxNoClusters\">\n    Submit\n  </button>\n  <!-- Ordinal encoder -->\n  <button *ngIf=\"dialogData.type === 'ordinalEncoder'\" mat-flat-button class=\"btn-primary\" type=\"submit\"\n    (click)=\"onSubmitForm(dialogData.type)\" [disabled]=\"isDuplicate\">\n    Submit\n  </button>\n</mat-dialog-actions>","import { ToastrService } from 'ngx-toastr';\nimport { TrainingService } from './../training.service';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { HPT_FORM_FIELDS } from 'src/assets/data/hpt-form-fields';\nimport { TrainingComponent } from '../training.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { environment } from 'src/environments/environment';\n\nconst swal = require('sweetalert');\nconst Plotly = require('plotly.js-dist');\n@Component({\n  selector: 'app-dialog-handler',\n  templateUrl: './dialog-handler.component.html',\n  styleUrls: ['./dialog-handler.component.scss'],\n})\nexport class DialogHandlerComponent implements OnInit {\n  /** Form control instance */\n  hyperParaAlgoControl = new FormControl('', Validators.required);\n  clusterAlgorithm = new FormControl('', Validators.required);\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Variables with default values */\n  nGramOptions: Array<any> = [\n    { name: 'Unigram', value: 1 },\n    { name: 'Bigram', value: 2 },\n    { name: 'Trigram', value: 3 },\n    { name: 'Ngram', value: 1 },\n  ];\n  showNgramSlider: boolean = false;\n  showSpinner: boolean = false;\n\n  // saas variable\n  appType: string = environment.appType;\n  dialogHeading: string;\n  project: any;\n  modelAlgorithmArray: Array<string> = [];\n  dynamicFields: any;\n  nlpDefaultConfigData: any;\n  nlpConfigs: Array<any> = [];\n  mySelections: Array<any> = [];\n  selectedFeature: string;\n  partialClusterData: any;\n  maxNoClusters: any;\n  ordinalEncoderData: any;\n  oeMapData: any;\n  selectionArray: Array<any> = [];\n  isDuplicate: boolean = false;\n  snackBarRef: MatSnackBarRef<any>;\n  isValid: boolean = true;\n  clusterAlgo;\n  base64: string;\n  imageData: SafeResourceUrl;\n  safeUrl: SafeResourceUrl;\n  dendogramImage: any;\n  showFaq: boolean = false;\n  affinity: any = 'euclidean';\n  linkageOptions = [\n    { option_label: 'ward', value: 'ward' },\n    { option_label: 'complete', value: 'complete' },\n    { option_label: 'average', value: 'average' },\n    { option_label: 'single', value: 'single' },\n  ];\n  linkage: any = 'ward';\n  nlpFeatureExt: any;\n  nFeatureCount: any;\n  ngramSliderVal: any;\n  nGram: any;\n  decodeError: any;\n  stripAccents: any;\n  nlpLanguage: any;\n  indexNlp: any;\n  baseImg: any;\n  // formgroup for hpt forms.\n  hptForm: FormGroup = this.fb.group({});\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\n    private _localStorage: LocalStorageService,\n    private _spinner: SpinnerService,\n    private _training: TrainingService,\n    private _toaster: ToastrService,\n    public _utils: UtilsService,\n    private _snackBar: MatSnackBar,\n    private _sanitizer: DomSanitizer,\n    private _dialog: MatDialog,\n    private _trainingDialogRef: MatDialogRef<TrainingComponent>,\n    private fb: FormBuilder\n  ) { }\n\n  /**\n   * Initializes all the required data\n   */\n  ngOnInit(): void {\n    this.project = this._localStorage.getItem('project');\n    if (this.project.type === 'clustering' && this.dialogData.type === 'optimalClusters') {\n      this.clusterAlgo = this.dialogData.modelAlgorithms.filter((item) => {\n        if (item.name !== 'DBSCAN' && item.status === true) {\n          return item.name;\n        }\n      });\n    }\n    switch (this.dialogData.type) {\n      case 'hpt':\n        this.dialogHeading = 'Algorithm Parameters';\n        this.modelAlgorithmArray = this.dialogData.modelAlgorithms.filter((algo) => {\n          if (\n            algo.name !== 'KMeans' &&\n            !algo.name.includes('Bagging') &&\n            !algo.name.includes('bagging') &&\n            !algo.name.includes('Boosting') &&\n            algo.status === true\n          ) {\n            return algo;\n          }\n        });\n        break;\n      case 'configureFeature':\n        this.dialogHeading = 'Feature Configuration';\n        this.indexNlp = this.dialogData.nlpConfigs.findIndex(\n          (x) => x.colName === this.dialogData.selectedFeature\n        );\n        this.nlpFeatureExt =\n          this.dialogData.nlpConfigs[this.indexNlp].nlpFeatureConfig.nlpFeatureExtractionMethod;\n        this.decodeError = this.dialogData.nlpConfigs[this.indexNlp].nlpFeatureConfig.decodeError;\n        this.nFeatureCount =\n          this.dialogData.nlpConfigs[this.indexNlp].nlpFeatureConfig.nFeatureCount;\n        this.nGram = this.dialogData.nlpConfigs[this.indexNlp].nlpFeatureConfig.nGram;\n        this.nlpLanguage = this.dialogData.nlpConfigs[this.indexNlp].nlpFeatureConfig.nlpLanguage;\n        this.stripAccents = this.dialogData.nlpConfigs[this.indexNlp].nlpFeatureConfig.stripAccents;\n        this.ngramSliderVal = this.nGram.filter(item => { return item.name === 'Ngram' })[0];\n        this.ngramSliderVal = this.ngramSliderVal !== undefined ? this.ngramSliderVal.value : null;\n        this.nlpDefaultConfigData = this.dialogData.nlpDefaultConfigData;\n        this.showNgramSlider = this.dialogData.showNgramSlider;\n        this.mySelections = this.dialogData.nlpDefaultConfigData.nGram;\n        this.selectedFeature = this.dialogData.selectedFeature;\n        break;\n      case 'optimalClusters':\n        this.dialogHeading = 'Optimise Cluster';\n        this.partialClusterData = this.dialogData.clusterReqObj;\n        break;\n      case 'ordinalEncoder':\n        this.dialogHeading = `Ordinal Encoder Mapper`;\n        this.ordinalEncoderData = this.dialogData.ordinalEncoderData;\n        this.oeMapData = this.ordinalEncoderData.itemFound\n          ? this.ordinalEncoderData.itemFound.mapping\n          : {};\n        this.selectionArray = Array.from(\n          { length: this.ordinalEncoderData.mapperDatas.length },\n          (_, i) => ({\n            selected: false,\n            value: ++i,\n          })\n        );\n    }\n  }\n\n  /**\n   * Fetchs the hyper parameter tuning algorithm form fields\n   * @param algorithm\n   */\n  onHyperParamAlgoChange(selectedAlgoName: any): void {\n    if (this.dialogData.hptPreference !== undefined && this.dialogData.hptPreference.length) {\n      this.prefillForm(selectedAlgoName);\n    } else {\n      this.newPreference(selectedAlgoName);\n    }\n  }\n\n  /**\n   * Checks whether preference is already present for a particular algorithm\n   */\n  prefillForm(selectedAlgoName: any): void {\n    this.dynamicFields = this.dialogData.hptPreference.filter(\n      (item: any) => item.algoName === selectedAlgoName\n    )[0];\n    this.dynamicFields ? this.createFormAndAddValidation(this.dynamicFields?.fields) : this.newPreference(selectedAlgoName);\n  }\n\n  /**\n   * Saves the new preference\n   */\n  newPreference(selectedAlgoName: any): void {\n    const dynamicFormFields = this.getOriginalFormFields();\n    if (this.project.projectStatus === 'Model Generated') {\n      // Get previously trained data and set it to formFields\n      if (this.dialogData.prevTrainingData[0].hptPreference) {\n        this.dynamicFields = this.dialogData.prevTrainingData[0].hptPreference.filter(\n          (algo: any) => algo.algoName === selectedAlgoName\n        )[0];\n      } else {\n        this.dynamicFields = dynamicFormFields.filter(\n          (algo: any) => algo.algoName === selectedAlgoName\n        )[0];\n      }\n    } else {\n      this.dynamicFields = dynamicFormFields.filter(\n        (algo: any) => algo.algoName === selectedAlgoName\n      )[0];\n    }\n    this.createFormAndAddValidation(this.dynamicFields?.fields);\n  }\n\n  onChangeFields(data: any) {\n    if (data.name === 'lags') {\n      this.dynamicFields.fields[1].data = data.data;\n    } else if (data.name === 'lags_past_covariates') {\n      this.dynamicFields.fields[1].data = this.dynamicFields.fields[0].data;\n      this.showSnackBar('lags and lags_past_covariates should be same', 'OK');\n    }\n  }\n  /**\n   * Handles the form submission\n   */\n  onSubmitForm(type: string): void {\n    if (type === 'hpt') {\n      this.addPreference();\n    } else if (type === 'configureFeature') {\n      this.nlpConfigs = this.dialogData.nlpConfigs;\n      this.saveFeatureConfiguration();\n    } else if (type === 'optimalClusters') {\n      if (this.maxNoClusters < 2 || this.maxNoClusters > 10) {\n        this.showSnackBar('Clusters value should be between 2 and 10', 'OK');\n      } else {\n        this.getOptimalClusters();\n      }\n    } else if (type === 'ordinalEncoder') {\n      if (Object.keys(this.oeMapData).length !== this.ordinalEncoderData.mapperDatas.length) {\n        this.isValid = false;\n        return;\n      } else {\n        this.isValid = true;\n      }\n      this.saveOrdinalEncoder();\n    }\n  }\n\n  /**\n   * Renders the snackbar\n   */\n  showSnackBar(message: string, button: string): void {\n    this.snackBarRef = this._snackBar.open(message, button, {\n      horizontalPosition: 'right',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  /**\n   * Adds the new HPT preferences\n   */\n  addPreference(): void {\n    let notFound: boolean = false;\n    if (\n      this.dynamicFields.algoName == 'Agglomerative' &&\n      this.dynamicFields.fields[1].data == 'ward' &&\n      this.dynamicFields.fields[0].data !== 'euclidean'\n    ) {\n      this.dynamicFields.fields[0].data = 'euclidean';\n      this.showSnackBar('Ward can only work with euclidean distances', 'OK');\n      return;\n    }\n    if (\n      this.dynamicFields.algoName === 'Agglomerative' &&\n      this.dynamicFields.fields[0].data === ''\n    ) {\n      this.showSnackBar('Please enter all inputs', 'OK');\n      return;\n    }\n    if (this.dynamicFields.algoName === 'Agglomerative' && (this.dynamicFields.fields[0].data === 'wminkowski' ||\n      this.dynamicFields.fields[0].data === 'haversine' || this.dynamicFields.fields[0].data === 'kulsinki')) {\n      this.dynamicFields.fields[0].data = 'euclidean';\n      this._spinner.stopSpinner();\n      this.showSnackBar('wminkowski,haversine & kulsinki distance metric are not supported by agglomerative algorithm.', 'OK');\n      return;\n    }\n    let blankData = this.dynamicFields.fields.filter((element) => {\n      if (element.data === '') {\n        return element;\n      }\n    });\n    if (blankData.length) {\n      this.showSnackBar('Please enter all inputs', 'OK');\n      return;\n    }\n    if (this.dialogData.hptPreference.length) {\n      this.dialogData.hptPreference.map((item: any) => {\n        if (item.algoName === this.dynamicFields.algoName) {\n          item = this.dynamicFields;\n          notFound = true;\n        }\n        return item;\n      });\n      if (!notFound) {\n        this.dialogData.hptPreference.push(this.dynamicFields);\n      } else {\n        this.dialogData.hptPreference.push(this.dynamicFields);\n      }\n      this.closeModal({ hptPreference: this.dialogData.hptPreference });\n    } else {\n      this.dialogData.hptPreference.push(this.dynamicFields);\n      this.closeModal({ hptPreference: this.dialogData.hptPreference });\n    }\n    swal({\n      title: 'HPT Preference',\n      text: `${this.hyperParaAlgoControl.value} preference saved successfully`,\n      icon: 'success',\n      className: 'custom-alert',\n    });\n  }\n\n  /**\n   * Creates the nlpfeatureconfig object to parse\n   */\n  saveFeatureConfiguration(): void {\n    let trigram;\n    trigram = this.nGram.find(item => {\n      if (item.name === 'Trigram') {\n        return item;\n      }\n    });\n    if (trigram == undefined) {\n      //if (trigram.name !== 'Trigram') {\n      trigram = this.nGram.find(item => {\n        if (item.name === 'Bigram') {\n          return item;\n        }\n      });\n      if (trigram !== undefined && trigram.name !== 'Bigram') {\n        trigram = this.nGram.find(item => {\n          if (item.name === 'Unigram') {\n            return item;\n          }\n        });\n      } else if (trigram == undefined) {\n        trigram = this.nGram.find(item => {\n          if (item.name === 'Unigram') {\n            return item;\n          }\n        });\n      }\n    }\n    let ngram = this.nGram.filter(item => { return item.name === 'Ngram' })[0];\n    if (ngram !== undefined) {\n      if (ngram.name === 'Ngram' && trigram.name === 'Trigram' && trigram.value < 3) {\n        this.showSnackBar('Ngram value should be greater than 3', 'OK');\n        return;\n      } else if (ngram.name === 'Ngram' && trigram.name === 'Bigram' && trigram.value < 2) {\n        this.showSnackBar('Ngram value should be greater than 2', 'OK');\n        return;\n      } else if (ngram.name === 'Ngram' && trigram.name === 'Unigram' && trigram.value < 1) {\n        this.showSnackBar('Ngram value should be greater than 1', 'OK');\n        return;\n      }\n    }\n    if (!this.nGram.length) {\n      this.showSnackBar('Please select Ngram value', 'OK');\n      return;\n    }\n    if (this.nFeatureCount == undefined) {\n      this.showSnackBar('Please select NLP feature count value', 'OK');\n      return;\n    }\n    let newConfig = {\n      nlpFeatureExtractionMethod: this.nlpFeatureExt,\n      decodeError: this.decodeError,\n      nFeatureCount: this.nFeatureCount,\n      nGram: this.nGram,\n      nlpLanguage: this.nlpLanguage,\n      stripAccents: this.stripAccents,\n      ngramSliderVal: this.ngramSliderVal,\n    };\n    this.dialogData.nlpConfigs.map((i) => {\n      if (i.colName === this.dialogData.selectedFeature) {\n        i.nlpFeatureConfig = newConfig;\n      }\n      return i;\n    });\n\n    this.checkNgramSettings(this.selectedFeature);\n    if (this.dialogData.nlpConfigs.length > 0) {\n      this.dialogData.nlpConfigs.forEach((config) => {\n        if (config.nlpFeatureConfig.ngramSliderVal) {\n          delete config.nlpFeatureConfig.ngramSliderVal;\n        }\n      });\n    }\n    this.closeModal({ nlpConfigs: this.dialogData.nlpConfigs });\n  }\n\n  onFocusOut(cluster) {\n    if (!Number.isInteger(cluster)) {\n      this.showSnackBar('Number of optimal cluster should be integer', 'OK');\n      this.maxNoClusters = '';\n      return;\n    }\n  }\n\n  /**\n   * Get the optimal clusters graph\n   */\n  getOptimalClusters(): void {\n    this.baseImg = undefined;\n    this._spinner.showSpinner();\n    if (this.clusterAlgorithm.value === '') {\n      this.showSnackBar('Please enter the inputs', 'OK');\n      this._spinner.stopSpinner();\n      return;\n    }\n    if (\n      this.clusterAlgorithm.value === 'Agglomerative' &&\n      this.linkage === 'ward' &&\n      this.affinity === ''\n    ) {\n      this.affinity = 'euclidean';\n      this._spinner.stopSpinner();\n      this.showSnackBar('Ward can only work with euclidean distances', 'OK');\n      return;\n    }\n    if (this.clusterAlgorithm.value === 'Agglomerative' && this.affinity === '') {\n      this.showSnackBar('Please enter the inputs', 'OK');\n      this._spinner.stopSpinner();\n      return;\n    }\n    if (this.clusterAlgorithm.value === 'Agglomerative' && (this.affinity === 'wminkowski' ||\n      this.affinity === 'haversine' || this.affinity === 'kulsinki')) {\n      this.affinity = 'euclidean';\n      this._spinner.stopSpinner();\n      this.showSnackBar('wminkowski,haversine & kulsinki distance metric are not supported by agglomerative algorithm.', 'OK');\n      return;\n    }\n    if (\n      this.clusterAlgorithm.value === 'Agglomerative' &&\n      this.linkage === 'ward' &&\n      this.affinity !== 'euclidean'\n    ) {\n      this.affinity = 'euclidean';\n      this._spinner.stopSpinner();\n      this.showSnackBar('Ward can only work with euclidean distances', 'OK');\n      return;\n    }\n    if (this.clusterAlgorithm.value === 'KMeans') {\n      this.partialClusterData.plotType = 'elbow';\n      this.partialClusterData.maxNoClusters = this.maxNoClusters;\n    } else {\n      this.partialClusterData.plotType = 'dendogram';\n      this.partialClusterData.affinity = this.affinity;\n      this.partialClusterData.linkage = this.linkage;\n    }\n    let optimiseClusterGraph: any;\n    this._training\n      .findOptimalClusters(this.project._id, this.partialClusterData)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            if (this.partialClusterData.plotType === 'elbow') {\n              optimiseClusterGraph = document.getElementById('optimiseClusterGraph');\n              while (optimiseClusterGraph.data && optimiseClusterGraph.data.length > 0) {\n                Plotly.deleteTraces(optimiseClusterGraph, [0]);\n              }\n              res.graphContent.layout.template.layout.title.xanchor = 'center';\n              res.graphContent.layout.template.layout.title.y = 0.9;\n              res.graphContent.layout.template.layout.title.x = 0.5;\n              res.graphContent.layout.template.layout.title.yanchor = 'top';\n              res.graphContent.layout.xaxis.linecolor = 'black';\n              res.graphContent.layout.yaxis.linecolor = 'black';\n              Plotly.plot(optimiseClusterGraph, res.graphContent.data, res.graphContent.layout);\n            } else {\n              this.baseImg = res.graphContent;\n              this.base64 = `data:image/png;base64,${res.graphContent}`;\n              this.safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(this.base64);\n              this.dendogramImage = this.safeUrl;\n            }\n          } else {\n            this._toaster.error('Cannot generate optimal clusters graph', 'Train Model');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(`Server Error: ${err.error.graphContent} `, 'Train Model');\n        }\n      );\n  }\n\n  /**\n   * function to download dendogram \n   */\n  ondownload() {\n    this._spinner.showSpinner();\n    var a = document.createElement(\"a\"); //Create <a>\n    a.href = \"data:image/png;base64,\" + this.baseImg; //Image Base64 Goes here\n    a.download = \"Dendogram.png\"; //File name Here\n    a.click(); //Downloaded file\n    this._spinner.stopSpinner();\n  }\n  /**\n   * Check the ngram options selected and modify if required\n   * @param featureName\n   */\n  checkNgramSettings(featureName: string): void {\n    // Update the ngramslider value if ngram option is selected\n    if (this.showNgramSlider) {\n      if (this.dialogData.nlpConfigs && this.dialogData.nlpConfigs.length > 0) {\n        this.dialogData.nlpConfigs.forEach((featureConfig) => {\n          if (featureConfig.colName === featureName) {\n            featureConfig.nlpFeatureConfig.nGram.map((item: any) => {\n              if (item.name === 'Ngram') {\n                item.value = this.ngramSliderVal;\n              }\n            });\n          }\n        });\n      } else {\n        this.nlpDefaultConfigData.nGram.map((val: any) => {\n          if (val.name === 'Ngram') {\n            val.value = this.ngramSliderVal;\n          }\n        });\n      }\n    }\n    // If ngramSelection array is empty pass default value\n    if (!this.nlpDefaultConfigData.nGram.length) {\n      this.nlpDefaultConfigData.nGram = [this.nGramOptions[0]];\n    }\n  }\n\n  /**\n   * Called when N Gram is changed\n   */\n  nGramChanged(): void {\n    // limits the user for selecting at most 2 options\n    if (this.nGram.length < 3) {\n      this.mySelections = this.nGram;\n    } else {\n      this.nlpDefaultConfigData.nGram = [...this.mySelections];\n    }\n\n    let trigram;\n    trigram = this.nGram.find(item => {\n      if (item.name === 'Trigram') {\n        return item;\n      }\n    });\n    if (trigram == undefined) {\n      //if (trigram.name !== 'Trigram') {\n      trigram = this.nGram.find(item => {\n        if (item.name === 'Bigram') {\n          return item;\n        }\n      });\n      if (trigram !== undefined && trigram.name !== 'Bigram') {\n        trigram = this.nGram.find(item => {\n          if (item.name === 'Unigram') {\n            return item;\n          }\n        });\n      } else if (trigram == undefined) {\n        trigram = this.nGram.find(item => {\n          if (item.name === 'Unigram') {\n            return item;\n          }\n        });\n      }\n    }\n    this.nGram.forEach((item: any) => {\n      if (item.name === 'Ngram' && trigram.name === 'Trigram') {\n        this.showNgramSlider = true;\n        this.ngramSliderVal = 4;\n      } else if (item.name === 'Ngram' && trigram.name === 'Bigram') {\n        this.showNgramSlider = true;\n        this.ngramSliderVal = 3;\n      } else if (item.name === 'Ngram' && trigram.name === 'Unigram') {\n        this.showNgramSlider = true;\n        this.ngramSliderVal = 2;\n      } else {\n        this.showNgramSlider = false;\n        this.ngramSliderVal = null;\n      }\n    });\n  }\n\n  /**\n   * Function to verify dupicate ordinal weight is there or not\n   * @param value\n   */\n  verifyDuplicateOridinalWeight(value: any): void {\n    let dupArr: Array<any> = [];\n    this.isDuplicate = false;\n    // push all items\n    for (let key in this.oeMapData) {\n      dupArr.push(this.oeMapData[key]);\n    }\n    // check array contains duplicate item or not\n    if (new Set(dupArr).size !== dupArr.length) {\n      this.isDuplicate = true;\n    }\n    if (this.isDuplicate === false) {\n      this.isValid = true;\n    }\n  }\n\n  faq(type) {\n    this.showFaq = type === 'faq' ? true : false;\n    // this.showBack = type === 'back' ?  : true;\n  }\n  /**\n   * Saves the ordinal encoder\n   */\n  saveOrdinalEncoder(): void {\n    this.ordinalEncoderData.ordinalEncMap = this.ordinalEncoderData.ordinalEncMap.filter(\n      (item: any) => item.col !== this.ordinalEncoderData.colName\n    );\n    this.ordinalEncoderData.ordinalEncMap.push({\n      col: this.ordinalEncoderData.colName,\n      mapping: this.oeMapData,\n    });\n    this.closeModal({ ordinalEncoder: this.ordinalEncoderData.ordinalEncMap });\n  }\n\n  /**\n   * Resets the form values\n   */\n  resetForm(algorithm: any): void {\n    const dynamicFormFields = this.getOriginalFormFields();\n    this.dynamicFields = dynamicFormFields.filter((algo: any) => algo.algoName === algorithm)[0];\n  }\n\n  /**\n   * Retursn the original form fields array\n   * @returns\n   */\n  getOriginalFormFields(): Array<any> {\n    return JSON.parse(JSON.stringify(HPT_FORM_FIELDS));\n  }\n\n  /**\n   * Binds the object to the drop down (N Gram)\n   * @param item1\n   * @param item2\n   * @returns\n   */\n  compareWithFn(item1: any, item2: any): boolean {\n    return item1 && item2 ? item1.name === item2.name : item1 === item2;\n  }\n\n  /**\n   * Closes the current opened dialog\n   */\n  closeModal(data?: any): void {\n    this._trainingDialogRef.close(data);\n  }\n\n\n  /**\n   * function to create form controls and then attach the validators.\n  */\n  createFormAndAddValidation(controls: any): void {\n    for (const control of controls) {\n      const validatorsToAdd = [];\n      for (const [key, value] of Object.entries(control.validators)) {\n        switch (key) {\n          case 'min':\n            validatorsToAdd.push(Validators.min(Number(value)));\n            break;\n          case 'required':\n            if (value) {\n              validatorsToAdd.push(Validators.required);\n            }\n            break;\n          case 'requiredTrue':\n            if (value) {\n              validatorsToAdd.push(Validators.requiredTrue);\n            }\n            break;\n          case 'email':\n            if (value) {\n              validatorsToAdd.push(Validators.email);\n            }\n            break;\n          case 'minLength':\n            validatorsToAdd.push(Validators.minLength(Number(value)));\n            break;\n          case 'maxLength':\n            validatorsToAdd.push(Validators.maxLength(Number(value)));\n            break;\n          case 'pattern':\n            validatorsToAdd.push(Validators.pattern(String(value)));\n            break;\n          case 'nullValidator':\n            if (value) {\n              validatorsToAdd.push(Validators.nullValidator);\n            }\n            break;\n          default:\n            if (this.appType === 'saas' && key === 'saasMax' && value) {\n              validatorsToAdd.push(Validators.max(Number(value)));\n            } else if (this.appType === 'enterprise' && key === 'entMax' && value) {\n              validatorsToAdd.push(Validators.max(Number(value)));\n            }\n            break;\n        }\n      }\n      this.hptForm.addControl(control.name, this.fb.control(control.data, validatorsToAdd));\n    }\n    this._spinner.stopSpinner();\n  }\n\n\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n    this.snackBarRef ? this.snackBarRef.dismiss() : '';\n  }\n}\n","<div class=\"fluid-container\">\n  <!-- heading section (Train Model) -->\n  <mat-card class=\"heading\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">flash_on</mat-icon>\n      </div>\n      <mat-card-title>Train Model</mat-card-title>\n    </mat-card-header>\n    <mat-card-content *ngIf=\"dataSetsList.length\">\n      <!-- Training form -->\n      <div class=\"row mt-5 mb-3\">\n        <!-- Select dataset -->\n        <div class=\"col-md-3\">\n          <div class=\"col-md-12\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label [matTooltip]=\"_utils.getTootip('selectDataSetTraining')\" for=\"eda file\">Select a dataset\n              </mat-label>\n              <mat-select [formControl]=\"dataSetControl\" (selectionChange)=\"onChangeDataset($event.value)\" required>\n                <mat-option *ngFor=\"let dataItem of dataSetsList\" [value]=\"dataItem._id\">\n                  {{ dataItem.filename | dropFileExtension: dataItem.fileSource }}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"\n                dataSetControl.hasError('required') &&\n                (dataSetControl.dirty || dataSetControl.touched)\n              \">File is requried.</mat-error>\n              <mat-hint *ngIf=\"edaData?.isHighDimensional\">Training with this dataset might take some time. Please\n                consider reducing the\n                dimensions of the data through the \"Feature Reduction\" option.</mat-hint>\n            </mat-form-field>\n          </div>\n          <div class=\"col-md-12\"\n            *ngIf=\"project.type === 'timeseries' && edaData?.isMultipleTimeseries && dataSetControl?.value\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label [matTooltip]=\"_utils.getTootip('forecastHorizon')\">Number of steps</mat-label>\n              <input matInput type=\"number\" min=\"1\" name='cluster' [max]=\"maxnStep\"\n                placeholder=\"Enter the number of group\" [(ngModel)]=\"nSteps\" />\n              <mat-hint>Number of steps value should be between 1 to {{maxnStep}}.</mat-hint>\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"col-md-4\">\n          <!-- Select algorithms -->\n          <div class=\"\" *ngIf=\"dataSetControl?.value\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label [matTooltip]=\"_utils.getTootip('selectAlgorithm')\">Select algorithm(s)</mat-label>\n              <mat-select [formControl]=\"algorithmControl\" (selectionChange)=\"algoChangeHandler()\" required multiple>\n                <mat-option *ngFor=\"let algo of modelAlgorithmArray\" [value]=\"algo.name\" [disabled]=\"\n                    (appType === 'saas' &&\n                      !user?.roles?.includes('super_admin') &&\n                      !user?.roles?.includes('admin') &&\n                      algorithmControl?.value?.length > algoCount - 1 &&\n                      !algorithmControl?.value?.includes(algo.name)) ||\n                    algo.status === false\n                  \">\n                  {{ algo.name }}\n                  <span *ngIf=\"algo.status === false\">(Algorithm is temporary disabled)</span>\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"\n                  algorithmControl.hasError('required') &&\n                  (algorithmControl.dirty || algorithmControl.touched)\n                \">Algorithm(s) is required.</mat-error>\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"col-md-5\" *ngIf=\"project.type === 'clustering'\">\n          <!-- Select clusters -->\n          <div class=\"row\">\n            <div [ngClass]=\"\n                algorithmControl?.value?.includes('Agglomerative') &&\n                algorithmControl?.value?.includes('KMeans')\n                  ? 'col-md-6'\n                  : 'col-md-8'\n              \" *ngIf=\"\n                algorithmControl?.value?.length &&\n                algorithmControl?.value?.includes('KMeans') &&\n                project.type === 'clustering'\n              \">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Clusters for KMeans</mat-label>\n                <input matInput type=\"number\" min=\"2\" name='cluster' #cluster max=\"10\"\n                  placeholder=\"Enter the number of clusters\" [(ngModel)]=\"clusters\"\n                  (change)=\"onFocusOut('kmeans',clusters)\" />\n                <div *ngIf=\"cluster.errors?.min || cluster.errors?.max\">Invalid Name</div>\n                <mat-hint>Cluster value should be between 2 to 10.</mat-hint>\n              </mat-form-field>\n            </div>\n            <div [ngClass]=\"\n                algorithmControl?.value?.includes('Agglomerative') &&\n                algorithmControl?.value?.includes('KMeans')\n                  ? 'col-md-6'\n                  : 'col-md-8'\n              \" *ngIf=\"\n                algorithmControl?.value?.length &&\n                algorithmControl?.value?.includes('Agglomerative') &&\n                project.type === 'clustering'\n              \">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Clusters for Agglomerative</mat-label>\n                <input matInput type=\"number\" min=\"2\" max=\"10\" placeholder=\"Enter the number of clusters\"\n                  [(ngModel)]=\"agglomerativeCluster\" (change)=\"onFocusOut('agglo',agglomerativeCluster)\" />\n                <mat-hint>Cluster value should be between 2 to 10.</mat-hint>\n              </mat-form-field>\n            </div>\n            <p *ngIf=\"\n                algorithmControl?.value?.includes('KMeans') ||\n                algorithmControl?.value?.includes('Agglomerative')\n              \" class=\"col-md-12 mt-4 text-sm mb-0 ml-2\">\n              <i class=\"fas fa-info-circle mr-1\" style=\"font-size: 14px\"></i>\n              To choose the optimal number of clusters click\n              <a id=\"optimal-cluster-link\" (click)=\"dialogHandler('optimalClusters')\" [ngClass]=\"\n                  appType === 'enterprise' ||\n                  (appType === 'saas' &&\n                    (user?.roles?.includes('super_admin') || user?.roles?.includes('admin')))\n                    ? 'text-app-orange text-decoration-none'\n                    : 'text-muted disable-Btn'\n                \"><span matBadge [matBadgeIcon]=\"'ENT'\" matBadgeOverlap=\"false\">here</span></a>\n            </p>\n          </div>\n        </div>\n        <div class=\"col-md-4 border-left ml-5\" *ngIf=\"project.type === 'timeseries' && targetDetails\">\n          <div class=\"card ml-5\">\n            <div class=\"card-body text-center p-0\">\n              <div style=\"background-color: lightcyan\" class=\"p-3\">\n                <h3 class=\"\">{{ edaData.depVariable }}</h3>\n                <p class=\"mb-0\">Target</p>\n              </div>\n              <div class=\"bg-primary p-3\">\n                <em class=\"fas fa-bullseye fa-2x text-alpha\"></em>\n              </div>\n            </div>\n          </div>\n          <!-- <div class=\"card border-0\">\n            <div class=\"row row-flush\">\n              <div\n                class=\"col-md-3 bg-primary text-center d-flex align-items-center justify-content-center rounded-left\"\n              >\n                <em class=\"fas fa-bullseye fa-2x\"></em>\n              </div>\n              <div class=\"col-md-9\">\n                <div class=\"text-center my-3\">\n                  <p class=\"bold m-0\">{{ edaData.depVariable }}</p>\n                  <span class=\"text-muted\">Target</span>\n                </div>\n              </div>\n            </div>\n          </div> -->\n        </div>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- FIRST TIME -->\n  <h4 *ngIf=\"!dataSetsList.length\" class=\"text-center mt-5 font-weight-normal\">\n    You don't have any data set with EDA,\n    <a class=\"text-decoration-none\" href=\"#\" [routerLink]=\"['/project/eda']\"> perform EDA now.</a>\n  </h4>\n\n  <div class=\"row mt-5\" *ngIf=\"project?.type !== 'timeseries' && targetDetails\">\n    <div class=\"col-md-12\">\n      <mat-card-title>Target Details</mat-card-title>\n    </div>\n    <div class=\"col-xl-3 col-lg-6\">\n      <!-- START card-->\n      <div class=\"card bg-primary border-0\">\n        <div class=\"row align-items-center mx-0\">\n          <div class=\"col-4 text-center\">\n            <em class=\"fas fa-bullseye fa-3x\"></em>\n          </div>\n          <div class=\"col-8 py-4 rounded-right wordSpace card-font\">\n            <div class=\"m-0 text-bold\">{{ edaData.depVariable }}</div>\n            <br *ngIf=\"targetLength > 3\" />\n            <div class=\"mb-1\">Target</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xl-3 col-lg-6\">\n      <!-- START card-->\n      <div class=\"card bg-primary border-0\">\n        <div class=\"row align-items-center mx-0\">\n          <div class=\"col-4 text-center\">\n            <em class=\"fas fa-cubes fa-3x\"></em>\n          </div>\n          <div class=\"col-8 py-4 rounded-right wordSpace card-font\">\n            <div class=\"m-0 text-bold\">{{ targetDetails.targetType }}</div>\n            <br *ngIf=\"targetLength > 3\" />\n            <div class=\"mb-1\">Target Type</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xl-6 col-lg-12\" *ngIf=\"project.type !== 'timeseries' && targetDistribution !== undefined\">\n      <!-- START card-->\n      <div class=\"card bg-primary border-0\">\n        <div class=\"row align-items-center mx-0\">\n          <div class=\"col-4 text-center\">\n            <em class=\"fas fa-info fa-3x\"></em>\n          </div>\n          <div class=\"col-8 py-4 rounded-right wordSpace card-font\">\n            <div class=\"row m-0 mb-1\">\n              <div class=\"text-bold d-flex mr-4\" *ngFor=\"let i of targetDistribution | keyvalue\">\n                {{ i.key }}: {{ i.value }}%\n              </div>\n            </div>\n            <div class=\"\">Class Names</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Heading section (Advance options) -->\n  <div *ngIf=\"dataSetControl?.value && clusters && algorithmControl?.value?.length\"\n    class=\"row mt-5 mb-2 d-flex align-items-center justify-content-between\">\n    <div class=\"col-md-3 d-flex align-items-center\">\n      <button mat-icon-button (click)=\"showAdvanceOptions = !showAdvanceOptions\" class=\"bg-grey-300 mr-3\">\n        <mat-icon class=\"chevron-icon\" *ngIf=\"!showAdvanceOptions\">chevron_right</mat-icon>\n        <mat-icon class=\"chevron-icon\" *ngIf=\"showAdvanceOptions\">expand_more</mat-icon>\n      </button>\n      <h5 class=\"mb-0\" style=\"color: #07509d\">Advanced options</h5>\n    </div>\n  </div>\n\n  <!-- Advance options tabs -->\n  <mat-card *ngIf=\"showAdvanceOptions\" class=\"mt-4 p-4\">\n    <mat-card-content>\n      <mat-tab-group *ngIf=\"showAdvanceOptions\" dynamicHeight mat-align-tabs=\"start\">\n        <!-- Transformation -->\n        <mat-tab [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('transformation')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedTrainingAdvanceOptions.includes('transformation') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('transformation')\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('transformation')\n                  ? ''\n                  : 'disable-Btn'\n              \">\n              Transformation\n            </mat-label>\n          </ng-template>\n          <div class=\"row m-3\">\n            <div class=\"col-md-7\">\n              <label id=\"feature-scaling\" [matTooltip]=\"_utils.getTootip('featureScaling')\">Feature scaling\n                options</label>\n              <mat-radio-group class=\"d-flex mt-2\" aria-labelledby=\"feature-scaling\" [(ngModel)]=\"featureScalingOption\"\n                (change)=\"onFeatureScalingOptionChange()\">\n                <mat-radio-button class=\"ml-4\" value=\"none\">None</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"standard_scaler\"\n                  [matTooltip]=\"_utils.getTootip('standardScaler')\">\n                  Standard Scaler</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"robust_scaler\" [matTooltip]=\"_utils.getTootip('robustScaler')\">\n                  Robust Scaler</mat-radio-button>\n              </mat-radio-group>\n              <hr />\n              <label class=\"mt-2 mb-3\" id=\"feature-scaling\"\n                [matTooltip]=\"_utils.getTootip('normalizationMethod')\">Normalization methods</label>\n              <mat-radio-group class=\"mt-3\" aria-labelledby=\"feature-scaling\" [(ngModel)]=\"normalizationMethod\"\n                (change)=\"onNormalizationChange(normalizationMethod)\">\n                <mat-radio-button *ngFor=\"let feature of normalizationOptions | normalizationOptions: project\"\n                  class=\"d-flex ml-4\" [value]=\"feature.value\" [matTooltip]=\"_utils.getTootip(feature.value)\">{{\n                  feature.name }}</mat-radio-button>\n              </mat-radio-group>\n            </div>\n            <div class=\"col-md-5 border-left\" *ngIf=\"featureScalingOption != 'none' || normalizationMethod != 'none'\">\n              <!-- SELECT (for log transform) -->\n              <div class=\"d-flex flex-column ml-3\">\n                <mat-form-field class=\"w-75\" appearance=\"outline\"\n                  [matTooltip]=\"_utils.getTootip('logTransformationColumns')\" *ngIf=\"selection.selected.length\">\n                  <mat-label>Select feature </mat-label>\n                  <mat-select [(ngModel)]=\"featuresToTransform\" multiple>\n                    <mat-option *ngFor=\"let feature of tempfeat\" [value]=\"feature\">{{\n                      feature\n                      }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <mat-checkbox class=\"mt-2 mb-3\" *ngIf=\"project.type != 'clustering' && algoType != 'classification'\"\n                  [(ngModel)]=\"applyToTarget\">Apply to Target\n                </mat-checkbox>\n                <mat-form-field class=\"w-75\" *ngIf=\"normalizationMethod == 'log_transform'\" appearance=\"outline\"\n                  [matTooltip]=\"_utils.getTootip('scalarValue')\">\n                  <mat-label>Select scalar</mat-label>\n                  <mat-select [(ngModel)]=\"scale\">\n                    <mat-option *ngFor=\"let val of tsFrequencies\" [value]=\"val\">{{\n                      val\n                      }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n            </div>\n          </div>\n        </mat-tab>\n        <!-- Feature Generation -->\n        <mat-tab *ngIf=\"project.type === 'predictive_modeling'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('featureGeneration')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedTrainingAdvanceOptions.includes('featureGeneration') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [matTooltip]=\"_utils.getTootip('featureGeneration')\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('featureGeneration')\n                  ? ''\n                  : 'disable-Btn'\n              \">\n              Feature Generation</mat-label>\n          </ng-template>\n          <div class=\"row mx-2 my-4\">\n            <!-- CHECKBOX GROUP -->\n            <div [class]=\"\n                pairwiseLinear || pairwisePolynomial || univariatePolynomial || explicitPairwise\n                  ? 'col-md-8 border-right'\n                  : 'col-md-6'\n              \">\n              <h6 class=\"mb-4\">Auto feature generation</h6>\n              <!-- CHECKBOX (pairwise linear) -->\n              <section class=\"d-flex flex-column my-1\">\n                <mat-checkbox class=\"m-0 w-50\" (change)=\"onAFGOptionSelection('pairwiseLinear', pairwiseLinear)\"\n                  [(ngModel)]=\"pairwiseLinear\" id=\"pairwiseLinear\" name=\"pairwiseLinear\"\n                  [matTooltip]=\"_utils.getTootip('pairWiseLinear')\">Pairwise linear combination\n                </mat-checkbox>\n                <mat-radio-group *ngIf=\"pairwiseLinear\" class=\"ml-4 my-2\" aria-label=\"Select an option\"\n                  [(ngModel)]=\"pairwiseLinearOption\">\n                  <mat-radio-button class=\"mr-3\" value=\"addition\">Addition</mat-radio-button>\n                  <mat-radio-button class=\"mr-3\" value=\"subtraction\">Subtraction</mat-radio-button>\n                </mat-radio-group>\n              </section>\n              <!-- CHECKBOX (pairwise polynomial) -->\n              <section class=\"d-flex flex-column my-1\">\n                <mat-checkbox class=\"m-0 w-50\" (change)=\"onAFGOptionSelection('pairwisePolynomial', pairwisePolynomial)\"\n                  [(ngModel)]=\"pairwisePolynomial\" id=\"pairwisePolynomial\" name=\"pairwisePolynomial\"\n                  [matTooltip]=\"_utils.getTootip('pairWisePolynomial')\">Pairwise polynomial combination</mat-checkbox>\n                <mat-radio-group *ngIf=\"pairwisePolynomial\" class=\"ml-4 my-2\" aria-label=\"Select an option\"\n                  [(ngModel)]=\"pairwisePolynomialOption\">\n                  <mat-radio-button class=\"mr-3\" value=\"multiply\" checked>Multiply</mat-radio-button>\n                </mat-radio-group>\n              </section>\n              <!-- CHECKBOX (univariate polynomial) -->\n              <section class=\"d-flex flex-column my-1\">\n                <mat-checkbox class=\"m-0 w-50\"\n                  (change)=\"onAFGOptionSelection('univariatePolynomial', univariatePolynomial)\"\n                  [(ngModel)]=\"univariatePolynomial\" id=\"univariatePolynomial\" name=\"univariatePolynomial\"\n                  [matTooltip]=\"_utils.getTootip('univariatePolynomial')\">Univariate polynomial generation\n                </mat-checkbox>\n                <!-- RADIO -->\n                <mat-radio-group *ngIf=\"univariatePolynomial\" class=\"ml-4 my-2\" aria-label=\"Select an option\"\n                  [(ngModel)]=\"univariatePolynomialOption\">\n                  <mat-radio-button class=\"mr-3\" value=\"power\" checked>Power</mat-radio-button>\n                </mat-radio-group>\n                <!-- INPUT (exponent) -->\n                <mat-form-field *ngIf=\"univariatePolynomial\" class=\"ml-4 my-2 w-50\" appearance=\"outline\">\n                  <mat-label>Exponent</mat-label>\n                  <input matInput type=\"number\" [(ngModel)]=\"exponent\" placeholder=\"Enter the value\" />\n                  <mat-hint>Value should be greater than zero.</mat-hint>\n                </mat-form-field>\n              </section>\n              <!-- CHECKBOX (explicit) -->\n              <section class=\"my-1\">\n                <mat-checkbox class=\"m-0\" (change)=\"onAFGOptionSelection('explicitPairwise', explicitPairwise)\"\n                  [(ngModel)]=\"explicitPairwise\" id=\"explicitPairwise\" name=\"explicitPairwise\">\n                  Explicit feature generation</mat-checkbox>\n                <!-- FORM -->\n                <div *ngIf=\"explicitPairwise\" class=\"my-3 mx-4\">\n                  <div *ngFor=\"let opt of explicitPairWiseOption; let i = index\" class=\"d-flex\">\n                    <!-- SELECT (operaion) -->\n                    <div>\n                      <mat-form-field appearance=\"outline\" class=\"w-75\">\n                        <mat-label>Select an operation</mat-label>\n                        <mat-select [(ngModel)]=\"opt.operation\">\n                          <mat-option *ngFor=\"let epw of epwMethods\" [value]=\"epw.value\">{{\n                            epw.name\n                            }}</mat-option>\n                        </mat-select>\n                      </mat-form-field>\n                    </div>\n                    <!-- SELECT (feature-0) -->\n                    <div *ngIf=\"\n                        opt.operation === 'addition' ||\n                        opt.operation === 'multiply' ||\n                        opt.operation === 'subtraction' ||\n                        opt.operation === 'power'\n                      \">\n                      <mat-form-field appearance=\"outline\" class=\"w-75\">\n                        <mat-label>Select a feature</mat-label>\n                        <mat-select [(ngModel)]=\"opt.colName[0]\">\n                          <mat-option *ngFor=\"let feature of tempFeatures\" [value]=\"feature.colName\">{{ feature.colName\n                            }}</mat-option>\n                        </mat-select>\n                      </mat-form-field>\n                    </div>\n                    <!-- SELECT (feature-1) -->\n                    <div *ngIf=\"\n                        opt.operation === 'addition' ||\n                        opt.operation === 'multiply' ||\n                        opt.operation === 'subtraction'\n                      \">\n                      <mat-form-field appearance=\"outline\" class=\"w-75\">\n                        <mat-label>Select a feature</mat-label>\n                        <mat-select [(ngModel)]=\"opt.colName[1]\">\n                          <mat-option *ngFor=\"let feature of tempFeatures\" [value]=\"feature.colName\">{{ feature.colName\n                            }}</mat-option>\n                        </mat-select>\n                      </mat-form-field>\n                    </div>\n                    <!-- INPUT (exponent) -->\n                    <div *ngIf=\"opt.operation === 'power'\">\n                      <mat-form-field appearance=\"outline\" class=\"w-75\">\n                        <mat-label>Exponent</mat-label>\n                        <input matInput type=\"number\" [(ngModel)]=\"opt.exponent\" placeholder=\"Enter the value\" />\n                        <mat-hint>Value must be greater than 0.</mat-hint>\n                      </mat-form-field>\n                    </div>\n                    <!-- INPUT (delimeter) -->\n                    <div *ngIf=\"opt.operation === 'split'\">\n                      <mat-form-field appearance=\"outline\" class=\"w-75\">\n                        <mat-label>Delimeter</mat-label>\n                        <input matInput type=\"text\" [(ngModel)]=\"opt.delimiter\" placeholder=\"Ex:_,-,.\" />\n                      </mat-form-field>\n                    </div>\n                    <!-- INPUT (split count) -->\n                    <div *ngIf=\"opt.operation === 'split'\">\n                      <mat-form-field appearance=\"outline\" class=\"w-75\">\n                        <mat-label>Feature split count</mat-label>\n                        <input matInput type=\"number\" [(ngModel)]=\"opt.featureSplitCount\"\n                          placeholder=\"Enter the value\" />\n                        <mat-hint>Value must be greater than 0.</mat-hint>\n                      </mat-form-field>\n                    </div>\n                    <!-- BUTTON (remove) -->\n                    <div *ngIf=\"i > 0\" class=\"ml-n4\">\n                      <button class=\"mt-2\" mat-icon-button>\n                        <mat-icon (click)=\"removeItem(i)\">close</mat-icon>\n                      </button>\n                    </div>\n                  </div>\n                  <button class=\"my-1\" mat-stroked-button type=\"button\" (click)=\"addItem()\">\n                    <mat-icon class=\"mr-1\">add</mat-icon>Add\n                  </button>\n                </div>\n              </section>\n            </div>\n            <!-- RADIO (drop original) -->\n            <div class=\"col-md-3 ml-4 d-flex flex-column\" *ngIf=\"\n                pairwiseLinear || pairwisePolynomial || univariatePolynomial || explicitPairwise\n              \">\n              <label id=\"drop-original\" [matTooltip]=\"_utils.getTootip('dropOriginal')\">Drop original features</label>\n              <mat-radio-group class=\"my-2\" aria-labelledby=\"drop-original\" [(ngModel)]=\"fdropMethod\"\n                (change)=\"dropChange()\">\n                <mat-radio-button class=\"mr-3\" name=\"fdropMethod\" id=\"fdropMethod1\" value=\"true\" selected>True\n                </mat-radio-button>\n                <mat-radio-button class=\"mr-3\" name=\"fdropMethod\" id=\"fdropMethod2\" value=\"false\">False\n                </mat-radio-button>\n              </mat-radio-group>\n            </div>\n          </div>\n        </mat-tab>\n        <!-- Feature Reduction -->\n        <mat-tab *ngIf=\"project.type !== 'timeseries'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('featureReduction')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedTrainingAdvanceOptions.includes('featureReduction') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('featureReduction')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('featureReduction')\">Feature Reduction</mat-label>\n          </ng-template>\n          <div class=\"row mx-2 my-3\">\n            <!-- SECTION-1 -->\n            <div *ngIf=\"!isMultilabel && project.type !== 'clustering'\" class=\"col-md-6 border-right\">\n              <label id=\"feature-selection\" [matTooltip]=\"_utils.getTootip('featureselection')\">Feature selection\n                method</label>\n              <mat-radio-group class=\"d-flex mt-2\" aria-labelledby=\"feature-selection\" [(ngModel)]=\"fsMethod\"\n                (change)=\"onFSMethodChange(algoType, fsMethod)\">\n                <mat-radio-button class=\"ml-4\" value=\"none\">None</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"SelectKBest\" [matTooltip]=\"_utils.getTootip('selectKbest')\">\n                  SelectKBest</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"SelectPercentile\"\n                  [matTooltip]=\"_utils.getTootip('selectPercentile')\">\n                  SelectPercentile</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"RFE\" [matTooltip]=\"_utils.getTootip('rfe')\">RFE</mat-radio-button>\n              </mat-radio-group>\n              <div *ngIf=\"fsMethod !== 'none'\">\n                <hr />\n                <!-- RADIO -->\n                <label id=\"feature-selection\" [matTooltip]=\"_utils.getTootip('scoringFunction')\">Scoring\n                  function</label>\n                <mat-radio-group class=\"d-flex mt-2\" aria-labelledby=\"feature-selection\" [(ngModel)]=\"scoringFunction\">\n                  <mat-radio-button class=\"ml-4\" *ngFor=\"let val of scoringFunctionArray\" [value]=\"val.value\"\n                    [matTooltip]=\"_utils.getTootip(val.value)\">{{ val.name }}\n                  </mat-radio-button>\n                </mat-radio-group>\n                <br />\n                <mat-hint *ngIf=\"scoringFunction === 'chi2'\">chi2 doesn't support negative values present in the\n                  dataset.\n                </mat-hint>\n                <!-- INPUTS (step, CV, estimator) -->\n                <div *ngIf=\"fsMethod === 'RFE'\" class=\"row mt-3\">\n                  <div class=\"col-md-4\">\n                    <mat-form-field appearance=\"outline\">\n                      <mat-label>Step</mat-label>\n                      <input matInput type=\"number\" min=\"1\" max=\"100\" [(ngModel)]=\"featureStep\"\n                        placeholder=\"Enter the value\" />\n                      <mat-hint>Step should be Min. 1 and Max. 100</mat-hint>\n                    </mat-form-field>\n                  </div>\n                  <div class=\"col-md-4\">\n                    <mat-form-field appearance=\"outline\">\n                      <mat-label>CV</mat-label>\n                      <input matInput type=\"number\" min=\"1\" max=\"5\" [(ngModel)]=\"cv\" placeholder=\"Enter the value\" />\n                      <mat-hint>CV should be Min. 1 and Max. 5</mat-hint>\n                    </mat-form-field>\n                  </div>\n                  <div class=\"col-md-4\">\n                    <mat-form-field appearance=\"outline\">\n                      <mat-label>Select estimator</mat-label>\n                      <mat-select [(ngModel)]=\"estimator\">\n                        <mat-option *ngFor=\"let algo of estimatorAlgo\" [value]=\"algo\">{{\n                          algo\n                          }}</mat-option>\n                      </mat-select>\n                    </mat-form-field>\n                  </div>\n                </div>\n                <!-- SLIDER (feature percentage)-->\n                <br />\n                <label class=\"h5 mt-4\">Percentage of features: {{ featurePercentage }}%</label>\n                <br />\n                <mat-slider thumbLabel class=\"w-50\" color=\"primary\" min=\"5\" max=\"100\" step=\"1\"\n                  [(ngModel)]=\"featurePercentage\" [ngModelOptions]=\"{ standalone: true }\"></mat-slider>\n              </div>\n              <!-- BUTTON (calculate)-->\n              <button class=\"mt-4\" *ngIf=\"fsMethod !== 'none'\"\n                [disabled]=\"fsMethod === 'RFE' && (estimator === 'none' || !estimator)\"\n                [matTooltip]=\"_utils.getTootip('calculateFeatureScore')\" mat-stroked-button\n                (click)=\"calculateFeatureScore()\">\n                Calculate Feature Score\n              </button>\n            </div>\n            <!-- SECTION-2 -->\n            <div [class]=\"project.type === 'clustering' ? 'col-md-12' : 'col-md-5 ml-4'\">\n              <!-- RADIO -->\n              <label id=\"dimension-reduction\" [matTooltip]=\"_utils.getTootip('dimensionalityReduction')\">Dimensionality\n                reduction options\n              </label>\n              <mat-radio-group class=\"d-flex mt-2\" aria-labelledby=\"dimension-reduction\" [(ngModel)]=\"decomposition\"\n                (change)=\"onDecompositionChange()\">\n                <mat-radio-button class=\"ml-4\" value=\"none\">None</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"pca\" [matTooltip]=\"_utils.getTootip('PCA')\">PCA</mat-radio-button>\n                <mat-radio-button class=\"ml-4\" value=\"factoranalysis\" [matTooltip]=\"_utils.getTootip('factorAnalysis')\">\n                  Factor Analysis</mat-radio-button>\n              </mat-radio-group>\n              <!-- INPUTS (component, custom feature) -->\n              <div *ngIf=\"decomposition !== 'none'\">\n                <mat-form-field [class]=\"project.type === 'clustering' ? 'mt-4 w-25' : 'mt-4 w-50'\"\n                  appearance=\"outline\">\n                  <mat-label>Components</mat-label>\n                  <input matInput type=\"number\" [(ngModel)]=\"components\" placeholder=\"Enter the value\" />\n                </mat-form-field>\n                <br />\n                <div *ngIf=\"tempfeat.length\">\n                  <mat-slide-toggle class=\"my-2\" labelPosition=\"before\" color=\"primary\"\n                    [matTooltip]=\"_utils.getTootip('customFeatureChecked')\" [(ngModel)]=\"customFeatureChecked\">\n                    Select custom feature\n                  </mat-slide-toggle>\n                  <br />\n                  <mat-form-field *ngIf=\"customFeatureChecked && selection.selected.length\"\n                    [class]=\"project.type === 'clustering' ? 'mt-4 w-25' : 'mt-4 w-50'\" appearance=\"outline\">\n                    <mat-label>Select custom feature</mat-label>\n                    <mat-select [(ngModel)]=\"customFeatures\" multiple>\n                      <ng-container *ngIf=\"project.type !== 'clustering'\">\n                        <mat-option *ngFor=\"let feature of tempfeat\" [value]=\"feature\">{{\n                          feature\n                          }}</mat-option>\n                      </ng-container>\n                      <ng-container *ngIf=\"project.type === 'clustering'\">\n                        <mat-option *ngFor=\"let feature of tempfeat\" [value]=\"feature\">{{ feature }}\n                        </mat-option>\n                      </ng-container>\n                    </mat-select>\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mat-tab>\n        <!-- Sampling -->\n        <mat-tab *ngIf=\"\n            !project.useGPU &&\n            algoType !== 'regression' &&\n            !isMultilabel &&\n            project.type === 'predictive_modeling'\n          \" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('sampling')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedTrainingAdvanceOptions.includes('sampling') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('sampling')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('sampling')\">Sampling</mat-label>\n          </ng-template>\n          <div class=\"mx-2 my-3\">\n            <div class=\"row\">\n              <div [class]=\"samplingData?.length ? 'col-md-6 border-right' : 'col-md-6'\">\n                <label id=\"sampling\" [matTooltip]=\"_utils.getTootip('imbalanceDatasetHandling')\">Imbalanced dataset\n                  handling</label>\n                <mat-radio-group class=\"d-flex mt-2\" aria-labelledby=\"sampling\" [(ngModel)]=\"sampling\"\n                  (change)=\"ischeckSampling(sampling)\">\n                  <mat-radio-button class=\"ml-4\" value=\"none\">None</mat-radio-button>\n                  <mat-radio-button class=\"ml-4\" value=\"over_sampling\" [matTooltip]=\"_utils.getTootip('overSampling')\">\n                    Over Sampling</mat-radio-button>\n                  <mat-radio-button class=\"ml-4\" value=\"under_sampling\"\n                    [matTooltip]=\"_utils.getTootip('underSampling')\">\n                    Under Sampling</mat-radio-button>\n                </mat-radio-group>\n                <!-- BUTTON (calculate)-->\n                <button class=\"my-4\" *ngIf=\"sampling !== 'none'\" mat-stroked-button (click)=\"calculatePercentage()\">\n                  Calculate Sampling Percentage\n                </button>\n              </div>\n              <div class=\"col-md-6\">\n                <!-- BUTTONS (inc/dec) -->\n                <div *ngIf=\"\n                    (sampling === 'over_sampling' || sampling === 'under_sampling') &&\n                    samplingData &&\n                    samplingData.length\n                  \" class=\"d-flex\">\n                  <div *ngFor=\"let item of samplingData\">\n                    <h4 class=\"mx-5 my-4\">{{ item.colName }} : {{ item.value }}%</h4>\n                    <div class=\"d-flex align-items-center justify-content-center\"\n                      *ngIf=\"this.sampling == 'over_sampling'\">\n                      <button mat-icon-button (click)=\"sample(item.value, item.initValue, 'sub', item.colName)\"\n                        *ngIf=\"this.sampling == 'over_sampling' && item.initValue < item.value\">\n                        <mat-icon>remove_circle_outline</mat-icon>\n                      </button>\n                      <mat-chip-list>\n                        <mat-chip class=\"m-2\">{{ item.value }}</mat-chip>\n                      </mat-chip-list>\n                      <button mat-icon-button (click)=\"sample(item.value, item.initValue, 'add', item.colName)\">\n                        <mat-icon>add_circle_outline</mat-icon>\n                      </button>\n                    </div>\n                    <div class=\"d-flex align-items-center justify-content-center\"\n                      *ngIf=\"this.sampling == 'under_sampling'\">\n                      <button mat-icon-button (click)=\"sample(item.value, item.initValue, 'sub', item.colName)\">\n                        <mat-icon>remove_circle_outline</mat-icon>\n                      </button>\n                      <mat-chip-list>\n                        <mat-chip class=\"m-2\">{{ item.value }}</mat-chip>\n                      </mat-chip-list>\n                      <button mat-icon-button (click)=\"sample(item.value, item.initValue, 'add', item.colName)\"\n                        *ngIf=\"this.sampling == 'under_sampling' && item.initValue > item.value\">\n                        <mat-icon>add_circle_outline</mat-icon>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-12 mt-2\">\n                <mat-hint>\n                  Note :\n                  <ul>\n                    <li>\n                      Under Sampling- under sampling percentage can not be increased more than base\n                      percentage\n                    </li>\n                    <li>\n                      Over Sampling - over sampling percentage can not be decreased more than base\n                      percentage\n                    </li>\n                  </ul>\n                </mat-hint>\n              </div>\n            </div>\n          </div>\n        </mat-tab>\n        <!-- HPT -->\n        <mat-tab *ngIf=\"\n            algorithmControl?.value?.includes('DBSCAN') ||\n            (algorithmControl?.value?.includes('Agglomerative') && project.type === 'clustering') ||\n            project.type === 'predictive_modeling' || project.type === 'timeseries'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('algorithmParameters')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedTrainingAdvanceOptions.includes('algorithmParameters') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('algorithmParameters')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('algorithmParameters')\">Algorithm Parameters</mat-label>\n          </ng-template>\n          <div class=\"mx-2 my-3\">\n            <!-- BUTTON (calculate)-->\n            <button class=\"my-3 hpt-btn\" type=\"button\" mat-stroked-button (click)=\"dialogHandler('hpt')\"\n              [matTooltip]=\"_utils.getTootip('algorithmParameters')\">\n              Algorithm Parameters\n            </button>\n          </div>\n        </mat-tab>\n        <!-- NLP -->\n        <mat-tab *ngIf=\"edaData.paragraphColNames.length\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('nlp')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedTrainingAdvanceOptions.includes('nlp') ? '' : 'PRO'\"\n              [matTooltip]=\"_utils.getTootip('NLP')\">NLP</mat-label>\n          </ng-template>\n          <mat-form-field class=\"w-25 mt-2\" appearance=\"outline\">\n            <mat-label>Select feature</mat-label>\n            <mat-select [(ngModel)]=\"feature\" (selectionChange)=\"onChangeFeature(feature)\">\n              <mat-option *ngFor=\"let item of featureList\" [value]=\"item\">\n                {{ item }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <br />\n          <!-- BUTTON (configure)-->\n          <button [disabled]=\"!feature\" [matTooltip]=\"_utils.getTootip('nlpFeatureConfig')\" type=\"button\"\n            mat-stroked-button (click)=\"dialogHandler('configureFeature')\">\n            Configure Feature\n          </button>\n        </mat-tab>\n        <!-- Components -->\n        <mat-tab *ngIf=\"project.type === 'timeseries'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('visualiseComponent')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedTrainingAdvanceOptions.includes('visualiseComponent') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('visualiseComponent')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('visualiseComponent')\">Components</mat-label>\n          </ng-template>\n          <div class=\"d-flex align-items-center mx-2 my-3\">\n            <!-- SELECT -->\n            <mat-form-field class=\"w-25 mt-2\" appearance=\"outline\" [matTooltip]=\"_utils.getTootip('seasonalComponent')\">\n              <mat-label>Select seasonal component</mat-label>\n              <mat-select [(ngModel)]=\"visualizationModel\" #visualize=\"ngModel\" required>\n                <mat-option value=\"Additive\">Additive</mat-option>\n                <mat-option value=\"Multiplicative\">Multiplicative</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"visualize.invalid || visualize.touched\">Seasonal component is required.</mat-error>\n            </mat-form-field>\n            <!-- SELECT -->\n            <mat-form-field class=\"w-25 mt-2 ml-4\" appearance=\"outline\" [matTooltip]=\"_utils.getTootip('frequency')\">\n              <mat-label>Select frequency</mat-label>\n              <mat-select [(ngModel)]=\"selectedFrequency\" #frequency=\"ngModel\" required>\n                <mat-option *ngFor=\"let freq of tsFrequencies\" [value]=\"freq\">{{\n                  freq\n                  }}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"frequency.invalid || frequency.touched\">Frequency is required.</mat-error>\n            </mat-form-field>\n            <!-- SELECT -->\n            <mat-form-field class=\"w-25 mt-2 ml-4\" appearance=\"outline\">\n              <mat-label>Select graph type</mat-label>\n              <mat-select [(ngModel)]=\"selectedGraphType\" #graphType=\"ngModel\" required>\n                <mat-option *ngFor=\"let type of componentGraphTypes\" [value]=\"type\">{{\n                  type | titlecase\n                  }}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"graphType.invalid || graphType.touched\">Graph type is required.</mat-error>\n            </mat-form-field>\n            <!-- BUTTON (show plot)-->\n            <button class=\"show-plot-btn ml-4\"\n              [disabled]=\"!visualizationModel || !selectedFrequency || !selectedGraphType\" type=\"button\"\n              mat-stroked-button (click)=\"visualizeComponents()\">\n              Show Plot\n            </button>\n          </div>\n          <!-- TABS (plot) -->\n          <mat-tab-group *ngIf=\"showTSTabs\" class=\"mx-2 my-3\" [selectedIndex]=\"selectedTabIndex\" dynamicHeight\n            mat-align-tabs=\"start\">\n            <mat-tab *ngFor=\"let tab of componentsTabs\" [label]=\"tab | titlecase\">\n              <div id=\"{{ tab }}\"></div>\n            </mat-tab>\n          </mat-tab-group>\n        </mat-tab>\n        <!-- Stationary test -->\n        <mat-tab *ngIf=\"project.type === 'timeseries'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('stationarityTest')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedTrainingAdvanceOptions.includes('stationarityTest') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('stationarityTest')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('stationarityTest')\">Stationarity Test</mat-label>\n          </ng-template>\n          <div class=\"row mx-3 my-4\">\n            <div class=\"col-md-4\">\n              <!-- RADIO (augmented) -->\n              <mat-radio-group class=\"d-flex\" [(ngModel)]=\"stationarityTestMethod\">\n                <mat-radio-button value=\"adf\" [matTooltip]=\"_utils.getTootip('stationarityTest')\">Augmented\n                  Dickey-Fuller Test</mat-radio-button>\n              </mat-radio-group>\n              <!-- BUTTON (perform test)-->\n              <button class=\"mt-3\" [disabled]=\"!stationarityTestMethod\" type=\"button\" mat-stroked-button\n                (click)=\"doSationarityTest()\">\n                Perform Test\n              </button>\n            </div>\n            <!-- RADIO (make data stationary) -->\n            <div *ngIf=\"stationaryTestData.length\" class=\"col-md-8 pl-4 border-left\">\n              <label id=\"make-stationary\">Make Data Stationary</label>\n              <mat-radio-group class=\"d-flex mt-2\" aria-labelledby=\"make-stationary\" [(ngModel)]=\"stationarityMethod\">\n                <mat-radio-button class=\"ml-3\" value=\"none\">None</mat-radio-button>\n                <mat-radio-button class=\"ml-3\" value=\"differencing\" [matTooltip]=\"_utils.getTootip('differencing')\">\n                  Differencing</mat-radio-button>\n                <mat-radio-button class=\"ml-3\" value=\"log_transformation\"\n                  [matTooltip]=\"_utils.getTootip('log_transform')\">Log Transformation</mat-radio-button>\n                <mat-radio-button class=\"ml-3\" value=\"differencing_with_log_transformation\"\n                  [matTooltip]=\"_utils.getTootip('differencing_with_log_transformation')\">Differencing With Log\n                  Transformation</mat-radio-button>\n              </mat-radio-group>\n              <!-- SELECT -->\n              <div class=\"d-flex my-4 mx-3\" *ngIf=\"stationarityMethod !== 'none'\">\n                <div class=\"mr-4\" *ngIf=\"\n                    stationarityMethod === 'differencing' ||\n                    stationarityMethod === 'differencing_with_log_transformation'\n                  \">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label>Select period</mat-label>\n                    <mat-select [(ngModel)]=\"period\">\n                      <mat-option *ngFor=\"let val of periodFreq\" [value]=\"val\">{{\n                        val\n                        }}</mat-option>\n                    </mat-select>\n                  </mat-form-field>\n                </div>\n                <div *ngIf=\"\n                    stationarityMethod === 'log_transformation' ||\n                    stationarityMethod === 'differencing_with_log_transformation'\n                  \">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label>Select scalar</mat-label>\n                    <mat-select [(ngModel)]=\"scalar\">\n                      <mat-option *ngFor=\"let freq of tsFrequencies\" [value]=\"freq\">{{\n                        freq\n                        }}</mat-option>\n                    </mat-select>\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- TABLE (staionarity) -->\n          <div [hidden]=\"!stationaryTestData.length\" class=\"mx-2\">\n            <!-- Search bar -->\n            <mat-form-field class=\"search-input\">\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event, 'stationarity')\" #input />\n            </mat-form-field>\n            <table #stationarySort=\"matSort\" mat-table [dataSource]=\"stationaryDataSource\" matSort\n              matSortActive=\"colName\" matSortDirection=\"asc\" matSortDisableClear>\n              <!-- feature name column -->\n              <ng-container matColumnDef=\"featureName\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Feature Name</th>\n                <td mat-cell *matCellDef=\"let row\">\n                  {{ row.colName }}\n                </td>\n              </ng-container>\n              <!-- stationary column -->\n              <ng-container matColumnDef=\"stationarity\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Stationarity</th>\n                <td mat-cell *matCellDef=\"let row\">\n                  {{ row.stationarity }}\n                </td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"stationaryDisplayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: stationaryDisplayedColumns\"></tr>\n\n              <!-- Row shown when there is no matching data -->\n              <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell\" colspan=\"4\">\n                  No data matching the filter \"{{ input.value }}\"\n                </td>\n              </tr>\n            </table>\n            <!-- Paginator -->\n            <mat-paginator #stationaryPaginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n          </div>\n        </mat-tab>\n        <!-- Resampling -->\n        <!-- <mat-tab *ngIf=\"project.type === 'timeseries'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('resampling')\n          \">\n          <!-- TAB LABEL -->\n        <!-- <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"allowedTrainingAdvanceOptions.includes('resampling') ? '' : 'PRO'\"\n              matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('resampling')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('resampling')\">Resampling</mat-label>\n          </ng-template>\n          <div class=\"mx-2 my-3\"> -->\n        <!-- SELECT -->\n        <!-- <mat-form-field class=\"w-25 mr-4\" appearance=\"outline\">\n              <mat-label>Select resampling frequency</mat-label>\n              <mat-select [(ngModel)]=\"resamplingMethod\" [disabled]=\"!resamplingConstants.length\">\n                <mat-option *ngFor=\"let const of resamplingConstants\" [value]=\"const.value\">\n                  {{ const.desc }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field> -->\n        <!-- SELECT -->\n        <!-- <mat-form-field *ngIf=\"resamplingMethod\" class=\"w-25\" appearance=\"outline\">\n              <mat-label>Select method</mat-label>\n              <mat-select [(ngModel)]=\"aggregationFunction\">\n                <mat-option *ngFor=\"let const of methodConstants\" [value]=\"const.value\">\n                  {{ const.desc }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n        </mat-tab> -->\n        <!-- Auto correlation -->\n        <mat-tab *ngIf=\"project.type === 'timeseries'\" [disabled]=\"\n            appType === 'saas' &&\n            !user?.roles?.includes('super_admin') &&\n            !user?.roles?.includes('admin') &&\n            !allowedTrainingAdvanceOptions.includes('autoCorrelation')\n          \">\n          <!-- TAB LABEL -->\n          <ng-template mat-tab-label>\n            <mat-label matBadge [matBadgeIcon]=\"\n                allowedTrainingAdvanceOptions.includes('autoCorrelation') ? '' : 'PRO'\n              \" matBadgeOverlap=\"false\" [ngClass]=\"\n                appType === 'enterprise' ||\n                (appType === 'saas' &&\n                  (user?.roles?.includes('super_admin') || user?.roles?.includes('admin'))) ||\n                allowedTrainingAdvanceOptions.includes('autoCorrelation')\n                  ? ''\n                  : 'disable-Btn'\n              \" [matTooltip]=\"_utils.getTootip('autoCorrelation')\">Auto Correlation</mat-label>\n          </ng-template>\n          <div class=\"m-3\">\n            <!-- RADIO -->\n            <label id=\"pacf\">Select PACF method</label>\n            <mat-radio-group aria-labelledby=\"pacf\" class=\"d-flex mt-2\" [(ngModel)]=\"pacfMethod\">\n              <mat-radio-button class=\"ml-3\" value=\"ywadjusted\" [matTooltip]=\"_utils.getTootip('ywunbiased')\">ywadjusted\n              </mat-radio-button>\n              <mat-radio-button class=\"ml-3\" value=\"ywmle\" [matTooltip]=\"_utils.getTootip('ywmle')\">ywmle\n              </mat-radio-button>\n              <mat-radio-button class=\"ml-3\" value=\"ols\" [matTooltip]=\"_utils.getTootip('ols')\">ols</mat-radio-button>\n            </mat-radio-group>\n            <br />\n            <!-- SLIDER -->\n            <h5 class=\"mt-3\">\n              <label>Number of Lags: {{ nlags }} </label>\n              <br />\n              <mat-slider thumbLabel class=\"w-25\" color=\"primary\" min=\"5\" max=\"100\" step=\"5\" [(ngModel)]=\"nlags\">\n              </mat-slider>\n            </h5>\n            <br />\n            <!-- BUTTON (perform test)-->\n            <button type=\"button\" mat-stroked-button (click)=\"getAutoCorrelation()\">\n              Get Correlation\n            </button>\n            <!-- PLOT -->\n            <div id=\"autoCorrelationGraph\"></div>\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- FEATURE TABLE -->\n  <mat-card *ngIf=\"tableData && (algorithmControl?.value?.length || dataSetControl?.value)\"\n    [hidden]=\"!showTrainingTable\" class=\"heading mt-5\">\n    <mat-card-header>\n      <div mat-card-avatar>\n        <mat-icon class=\"folder-icon\">table_chart</mat-icon>\n      </div>\n      <mat-card-title>Features</mat-card-title>\n    </mat-card-header>\n    <mat-card-content class=\"mt-4\">\n      <!-- Search bar -->\n      <mat-form-field class=\"search-input\">\n        <mat-label>Search</mat-label>\n        <input matInput (keyup)=\"applyFilter($event, 'feature')\" #input />\n      </mat-form-field>\n      <!-- Feature table -->\n      <div>\n        <table #featureSort=\"matSort\" mat-table [dataSource]=\"featureDataSource\" matSort matSortActive=\"colName\"\n          matSortDirection=\"asc\" matSortDisableClear>\n          <ng-container [matColumnDef]=\"col\" *ngFor=\"let col of displayedColumns\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header [disabled]=\"col === 'select'\">\n              {{ generateProperColNames(col) }}\n              <!-- checkbox on header -->\n              <mat-checkbox *ngIf=\"col == 'select'\" (change)=\"$event ? masterToggle() : null\"\n                [checked]=\"selection.hasValue() && isAllSelected()\"\n                [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n              </mat-checkbox>\n            </th>\n\n            <!-- checkbox column -->\n            <ng-container *ngIf=\"col === 'select'\">\n              <td mat-cell *matCellDef=\"let element\">\n                <mat-checkbox (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection.toggle(element) : null; propagationMethod(element)\"\n                  [checked]=\"selection.isSelected(element)\" [disabled]=\"element?.isTargetVariable\">\n                </mat-checkbox>\n              </td>\n            </ng-container>\n\n            <!-- Independent feature column -->\n            <ng-container *ngIf=\"col === 'colName'\">\n              <td mat-cell *matCellDef=\"let element\">{{ element.colName }}</td>\n            </ng-container>\n\n            <!-- Categorical/Date column -->\n            <ng-container *ngIf=\"col === 'categoricalDateOperation'\">\n              <td mat-cell *matCellDef=\"let element; let i = index\">\n                <!-- categorical -->\n                <mat-form-field *ngIf=\"element.dataType === 'Categorical'\" class=\"custom-dropdown\" appearance=\"outline\">\n                  <mat-label>Select strategy</mat-label>\n                  <mat-select [(ngModel)]=\"element.encoder\" (selectionChange)=\"\n                      onChangeCatEncoding(element.encoder, element.colName, element)\n                    \">\n                    <!-- Options without (OneHot encoder) -->\n                    <div *ngIf=\"element.highCardinalityFeature\">\n                      <mat-option *ngFor=\"\n                          let encoderType of categoricalEncoders.splice(\n                            categoricalEncoders.indexOf('OneHot encoder'),\n                            1\n                          )\n                        \" [value]=\"encoderType\">\n                        {{ encoderType }}\n                      </mat-option>\n                    </div>\n                    <!-- Options with (OneHot encoder) -->\n                    <div *ngIf=\"!element.highCardinalityFeature\">\n                      <mat-option *ngFor=\"let encoderType of categoricalEncoders\" [value]=\"encoderType\">\n                        {{ encoderType }}\n                      </mat-option>\n                    </div>\n                  </mat-select>\n                </mat-form-field>\n                <!-- date/time -->\n                <mat-form-field *ngIf=\"element.dataType === 'Datetime'\" class=\"custom-dropdown\" appearance=\"outline\">\n                  <mat-label>Select strategy</mat-label>\n                  <mat-select [(ngModel)]=\"element.dateComponent\" (selectionChange)=\"\n                      onChangeCatEncoding(element.encoder, element.colName, element)\n                    \" multiple>\n                    <mat-option *ngFor=\"let opt of element.dateComponentList\" [value]=\"opt\">\n                      {{ opt }}\n                    </mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </td>\n            </ng-container>\n\n            <!-- Is important column -->\n            <ng-container *ngIf=\"col === 'isImportant'\">\n              <td mat-cell *matCellDef=\"let element\">\n                <mat-icon [style.color]=\"element.isSelected ? 'green' : 'red'\" [matTooltip]=\"\n                    element.isSelected\n                      ? 'This feature is ideal for model building.'\n                      : 'This feature is not ideal for model building.'\n                  \">{{ element.isSelected ? 'task_alt' : 'highlight_off' }}</mat-icon>\n              </td>\n            </ng-container>\n\n            <!-- Feature score column -->\n            <ng-container *ngIf=\"col === 'score'\">\n              <td mat-cell *matCellDef=\"let element\">{{ element.score | number: '0.0-2' }}</td>\n            </ng-container>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n          <!-- Row shown when there is no matching data -->\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{ input.value }}\"</td>\n          </tr>\n        </table>\n        <!-- Paginator -->\n        <mat-paginator #featurePaginator [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Sticky button (start training) -->\n  <div *ngIf=\"algorithmControl?.value?.length\" class=\"sticky-button\">\n    <button mat-raised-button class=\"btn-primary start-training-btn\" type=\"submit\" (click)=\"trainingHandler()\">\n      <mat-icon>bolt</mat-icon> Start Training\n    </button>\n  </div>\n</div>","import { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { TrainingService } from './training.service';\nimport { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SocketIoService } from 'src/app/core/socket-io.service';\nimport { LocalStorageService } from 'src/app/shared/local-storage.service';\nimport { SpinnerService } from 'src/app/shared/spinner.service';\nimport { DataService } from '../data/data.service';\nimport { TextAnalysisService } from '../text-analysis/text-analysis.service';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport {\n  FREQUENCIES,\n  METHOD_CONSTANTS,\n  NLP_FEATURE_COUNTS,\n  NLP_LANGUAGES,\n  RESAMPLING_CONSTANTS,\n} from 'src/assets/data/timeseries-nlp';\nimport { DialogHandlerComponent } from '../training/dialog-handler/dialog-handler.component';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { UtilsService } from 'src/app/shared/utils.service';\nimport { ColorsService } from '../../shared/colors/colors.service';\nimport { environment } from 'src/environments/environment';\nconst Plotly = require('plotly.js-dist');\n@Component({\n  selector: 'app-training',\n  templateUrl: './training.component.html',\n  styleUrls: ['./training.component.scss'],\n})\nexport class TrainingComponent implements OnInit {\n  sparkOptions1 = {\n    barColor: '#fff',\n    height: 65,\n    width: '100%',\n    barSpacing: 2,\n  };\n  /** Data table setting */\n  featureDataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  stationaryDataSource: MatTableDataSource<[]> = new MatTableDataSource();\n  targetDetails: any;\n  targetDistribution: any;\n  targetLength: any;\n  @ViewChild('featurePaginator') set featurePaginator(value: MatPaginator) {\n    this.featureDataSource.paginator = value;\n  }\n  @ViewChild('featureSort') set featureSort(value: MatSort) {\n    this.featureDataSource.sort = value;\n  }\n  // @ViewChild('featurePaginator') featurePaginator: MatPaginator;\n  @ViewChild('stationaryPaginator') stationaryPaginator: MatPaginator;\n\n  //@ViewChild('featureSort') featureSort: MatSort;\n  @ViewChild('stationarySort') stationarySort: MatSort;\n\n  displayedColumns: Array<string> = [];\n  stationaryDisplayedColumns: Array<any> = [];\n\n  pageSizeOptions: Array<number> = [10, 15, 20];\n\n  /** Multi selection angular cdk instance */\n  selection = new SelectionModel<any>(true, []);\n\n  /** Usubscription subject */\n  unsubscribe$ = new Subject<boolean>();\n\n  /** Training input form cotrol instances */\n  dataSetControl = new FormControl('', Validators.required);\n  //targetControl = new FormControl('', Validators.required);\n  algorithmControl = new FormControl('', Validators.required);\n\n  /** Auto feature generation variables with default values */\n  pairwiseLinearOption: string = 'addition';\n  pairwisePolynomialOption: string = 'multiply';\n  univariatePolynomialOption: string = 'power';\n  explicitPairWiseOption: Array<any> = [\n    {\n      operation: 'addition',\n      colName: [],\n      typeOfAutoFeatureGen: 'explicitPairwiseCombination',\n    },\n  ];\n  epwMethods: Array<any> = [\n    { name: 'Addition', value: 'addition' },\n    { name: 'Multiply', value: 'multiply' },\n    { name: 'Subtraction', value: 'subtraction' },\n    { name: 'Power', value: 'power' },\n  ];\n\n  /** Variables with default values */\n  decomposition: string = 'none';\n  normalizationMethod: string = 'none';\n  fsMethod: string = 'none';\n  stationarityMethod: string = 'none';\n  sampling: string = 'none';\n  backGround: string = '#ffffff';\n  foreGround: string = '#08509d';\n  pacfMethod: string = 'ywadjusted';\n  stationarityTestMethod: string = 'adf';\n  showClass: boolean = false;\n  estimatorRegAlgo: Array<string> = ['Random Forest Regression', 'Linear Regression'];\n  estimatorClassAlgo: Array<string> = ['Random Forest Classification', 'Logistic Regression'];\n  nGramOptions: Array<any> = [\n    { name: 'Unigram', value: 1 },\n    { name: 'Bigram', value: 2 },\n    { name: 'Trigram', value: 3 },\n    { name: 'Ngram', value: 1 },\n  ];\n  categoricalEncoders: Array<string> = [\n    'OneHot encoder',\n    'Ordinal encoder',\n    'Binary encoder',\n    'Hashing encoder',\n    'Target encoder',\n    'Leave one out encoder',\n  ];\n  dateOperations: Array<string> = [\n    'year',\n    'quarter',\n    'month_name',\n    'day',\n    'day_name',\n    'hour',\n    'minute',\n    'second',\n  ];\n  normalizationOptions: Array<any> = [\n    { name: 'None', value: 'none' },\n    { name: 'Min Max', value: 'minmax_scaler' },\n    { name: 'Quantile Transform', value: 'quantile_transform' },\n    { name: 'Power Transform', value: 'power_transform' },\n    { name: 'Log Transform', value: 'log_transform' },\n  ];\n  componentGraphTypes: Array<any> = ['trend', 'seasonal', 'residuals', 'observed'];\n  componentsTabs: Array<any> = [];\n  nlpLanguages = NLP_LANGUAGES;\n  nFeatureCounts = NLP_FEATURE_COUNTS;\n  methodConstants = METHOD_CONSTANTS;\n  tsFrequencies = FREQUENCIES;\n  showAdvanceOptions: boolean = false;\n  explicitPairwise: boolean = false;\n  isNlp: boolean = false;\n  correlationIsMultilabel: boolean = false;\n  showTSTabs: boolean = false;\n  testSize: number = 20;\n  scale: number = 1;\n  nFeaturesToSelect: number = 70;\n  timesteps: number = 60;\n  nlags: number = 40;\n  components: number = 2;\n  featurePercentage: number = 70;\n  uploadFileSize: number = 500;\n  kfold: number = 10;\n  deafultTestSize: number = 20;\n  clusters: number = 2;\n  agglomerativeCluster: number = 2;\n  selectedTabIndex: any = 0;\n  period: number = 1;\n  scalar: number = 1;\n  // ! Has multiple data type value (string & number)\n  featureStep: any = 10;\n  nSteps = 1;\n  cv: any = 1;\n  project: any;\n  user: any;\n  dataSetsList: Array<any> = [];\n  prevTrainingInfo: Array<any> = [];\n  nlpConfigs: Array<any> = [];\n  selectedDataSet: any;\n  catEnc: any = {};\n  edaData: any;\n  childFileData: any;\n  featureList: Array<any> = [];\n  targetList: any;\n  isMultilabel: boolean;\n  modelAlgorithmArray: Array<any> = [];\n  targetVarDetails: any;\n  indepVariables: Array<any> = [];\n  dateComponent: any = {};\n  selectAll: boolean;\n  showTrainingTable: boolean;\n  selected: Array<any> = [];\n  nlpDefaultConfigData: any = {};\n  showNgramSlider: boolean;\n  feature: string;\n  tempfeat: any = {};\n  showAdvancedOptions: boolean;\n  pcaFeatures: any[];\n  clusterPcaFeatures: any[];\n  split: boolean;\n  pairwiseLinear: boolean;\n  pairwisePolynomial: boolean;\n  univariatePolynomial: boolean;\n  autoFeatureGenTasks: Array<any> = [];\n  featuresToTransform: Array<any> = [];\n  fdropMethod: string;\n  samplingData: any = {};\n  tempSelected: Array<any> = [];\n  isImbalanced: any;\n  classNames: any;\n  algoType: any;\n  dateColumnSelected: any;\n  preprocessedFilepath: any;\n  stationaryMethod: any;\n  featureScalingOption: string;\n  exogVariable: any;\n  methodSelected: any;\n  scoringFunction: any;\n  customFeatureChecked: any;\n  customFeatures: any;\n  estimator: any;\n  estimatorAlgo: any;\n  showlog: boolean;\n  showscalar: boolean;\n  showButton: boolean;\n  exponent: any;\n  delimiter: any;\n  featureSplitCount: any;\n  tempFeatures: Array<any> = [];\n  tableData: Array<any> = [];\n  textOrCategoricalFeatures: Array<any> = [];\n  ordinalEncMap: Array<any> = [];\n  numericFeatures: any;\n  algorithm: number;\n  snackBarRef: MatSnackBarRef<any>;\n  scoringFunctionArray: Array<any> = [];\n  scaleValue: any;\n  hptPreference: Array<any> = [];\n  samplingdat: Array<any> = [];\n  tempFeature: string;\n  visualizationModel: string;\n  selectedFrequency: number;\n  selectedGraphType: string;\n  stationaryTestData: Array<any> = [];\n  periodFreq: Array<any> = [];\n  extFeatures: any[];\n  targetInfo: any[];\n  isTargetChanged: Boolean = false;\n  applyToTarget: boolean = false;\n  // restriction variables\n  allowedTrainingAdvanceOptions: Array<any> = null;\n  appType: string = environment.appType;\n  algoCount: number = null;\n  ALGORITHMS_ARRAY: Array<any>;\n  unsupportedAlgo: any[];\n  featureTemp: any;\n  maxnStep: number;\n  constructor(\n    private _spinner: SpinnerService,\n    private _localStorage: LocalStorageService,\n    private _toaster: ToastrService,\n    private _data: DataService,\n    private _dialog: MatDialog,\n    private _socket: SocketIoService,\n    private _textAnalysis: TextAnalysisService,\n    private _training: TrainingService,\n    private _router: Router,\n    private _snackBar: MatSnackBar,\n    private _fb: FormBuilder,\n    public _utils: UtilsService,\n    private _cdr: ChangeDetectorRef,\n    public colors: ColorsService\n  ) { }\n\n  /**\n   * Initializes all the required data for this page\n   */\n  async ngOnInit(): Promise<any> {\n    this._spinner.showSpinner();\n    this.initSocket();\n    this.ALGORITHMS_ARRAY = await this._utils.getAlgorithms();\n    this.project = this._localStorage.getItem('project');\n    this.user = this._localStorage.getItem('user');\n    // setting the allowed advance options to the array.\n    this.allowedTrainingAdvanceOptions = this.user?.psFeatures?.allowedFeaturesList || [];\n    this.algoCount = this.user?.psFeatures?.trainingAlgoCount;\n    this.project.type === 'clustering'\n      ? (this.featureScalingOption = 'standard_scaler')\n      : (this.featureScalingOption = 'none');\n\n    this.displayedColumns = ['select', 'colName', 'categoricalDateOperation'];\n    this.stationaryDisplayedColumns = ['featureName', 'stationarity'];\n    this.getAllFiles();\n    // this.getPreviousTraining();\n    this.selectedFrequency = this.algorithmControl.value.includes('Prophet') ? 12 : 1;\n    this.periodFreq = this.generateNumericArray(10);\n  }\n\n  ngAfterViewInit(): void {\n    this._cdr.detectChanges();\n  }\n  /**\n   * Fetches all the files\n   * @param projectId\n   */\n  getAllFiles(): void {\n    this._data\n      .getAllProjectDatas(this.project._id, 'dataset_with_eda')\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.dataSetsList = res;\n            this.getPreviousTraining();\n          } else {\n            this._toaster.error('Cannot fetch files list', 'Train Model');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Train Model');\n        }\n      );\n  }\n\n  /**\n   * Fetches the previous training details\n   * @param projectId\n   */\n  getPreviousTraining(): void {\n    this._training\n      .getPreviousTrainingDetails(this.project._id, true)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          this.prevTrainingInfo = res;\n          // Check conditions with localstorage trainings\n          if (this.prevTrainingInfo[0]) {\n            this.catEnc = this.prevTrainingInfo[0].categoricalEncoders || {};\n            this.algorithmControl.setValue(this.prevTrainingInfo[0].algorithms);\n          }\n          if (res.length) {\n            if (this.project.type === 'timeseries') {\n              this.indepVariables = this.prevTrainingInfo[0].timeseriesInfo.exogVariables;\n            } else {\n              this.indepVariables = this.prevTrainingInfo[0].indepVariable;\n            }\n            this.edaData = res[0].edaId;\n            this.dataSetControl.setValue(this.prevTrainingInfo[0].originalFileId);\n            this.dataSetControl.updateValueAndValidity();\n            this.targetVarDetails = this.edaData.edaSummary.find(\n              (feature: any) => this.prevTrainingInfo[0].depVariable === feature.colName\n            );\n            this.maxnStep = this.edaData.lenLongGrp;\n            this._spinner.stopSpinner();\n            this.onChangeDataset(this.prevTrainingInfo[0].originalFileId, 'fc');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Train Model');\n        }\n      );\n  }\n\n  /**\n   * Called when the data set is changed\n   * @param dataSetId\n   * @param type\n   */\n  onChangeDataset(dataSetId: any, type?: string): void {\n    this._spinner.showSpinner();\n    this.tableData = [];\n    this.featureDataSource ? (this.featureDataSource.data = []) : null;\n    this.showAdvanceOptions = false;\n    this.feature = '';\n    this.featureList = [];\n    this.tempfeat = [];\n    this.fsMethod = 'none';\n    this.stationarityMethod = 'none';\n    this.fdropMethod = '';\n    this.normalizationMethod = 'none';\n    this.featureScalingOption = 'none';\n    this.sampling = 'none';\n    this.samplingData = {};\n    this.tempSelected = [];\n    this.featuresToTransform = [];\n    this.dateComponent = {};\n    this.targetList = [];\n    this.applyToTarget = false;\n    this.autoFeatureGenTasks = [];\n    this.univariatePolynomial = false;\n    this.pairwisePolynomial = false;\n    this.pairwiseLinear = false;\n    this.split = false;\n    this.components = 2;\n    this.agglomerativeCluster = 2;\n    this.clusters = 2;\n    this.pcaFeatures = [];\n    this.clusterPcaFeatures = [];\n    this.decomposition = 'none';\n    this.showAdvancedOptions = false;\n    this.showlog = false;\n    this.scale = 1;\n    this.nlpConfigs = [];\n    this.nlpDefaultConfigData = {};\n    this.selectedDataSet = this.dataSetsList.find((data) => data._id === dataSetId);\n    if (\n      this.selectedDataSet &&\n      this.prevTrainingInfo[0]?.metaInfo?.fileName !==\n      (this.selectedDataSet.name || this.selectedDataSet.filename)\n    ) {\n      this.catEnc = {};\n    }\n    this.generateScoringFunctionArray();\n    // API call\n    this._data\n      .getAllChildDatasets(this.project._id, dataSetId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        async (resp) => {\n          let taFeaturesToExclude = [];\n          let taFeatureConfig: any;\n          let taExperiment: any;\n          this.childFileData = resp[0];\n          this.edaData = resp[0].currentEdaId;\n          this.algoType = this.edaData.algoType;\n          this.isMultilabel = this.edaData.isMultilabel;\n          if (this.prevTrainingInfo.length) {\n            this.tempfeat = {};\n            let test: Array<any> = [];\n            let result: Array<any> = [];\n            let temp = this.prevTrainingInfo[0].edaId.edaSummary;\n            let filterFeatures = temp.filter((feature: any) => {\n              if (\n                !feature.constantFeature &&\n                !feature.highCardinalityFeature &&\n                !feature.mostlyMissing &&\n                feature.colName !== this.prevTrainingInfo[0].depVariable &&\n                (feature.dataType === 'Decimal' ||\n                  feature.dataType === 'Integer' ||\n                  feature.dataType === 'Numeric')\n              ) {\n                return feature;\n              }\n            });\n            filterFeatures.forEach((item) => {\n              test.push({ colName: item.colName });\n            });\n            result = test.filter((o1) => {\n              return !this.tempSelected.some((o2) => o1.colName === o2.colName);\n            });\n            this.tempfeat = result.map((feature) => feature.colName);\n            // Filter the timeseriesIds from features list\n            if (this.project.type === 'timeseries' && this.edaData.isMultipleTimeseries) {\n              this.tempfeat = this.tempfeat.filter((i: any) =>\n                !this.edaData.timeseriesIds.includes(i) ? i : null\n              );\n            }\n            this.isTargetChanged =\n              this.project.type != 'clustering' &&\n                this.selectedDataSet.filename == this.prevTrainingInfo[0].metaInfo.fileName &&\n                this.edaData.depVariable !== this.prevTrainingInfo[0].depVariable\n                ? true\n                : false;\n          }\n          if (this.project.type == 'timeseries') {\n            this.getModelAlgorithms('timeseries', false);\n            this.maxnStep = this.edaData.lenLongGrp;\n          } else if (this.project.type == 'clustering') {\n            this.getModelAlgorithms('clustering', false);\n          } else {\n            this.getModelAlgorithms(this.edaData.algoType, this.edaData.isMultilabel);\n          }\n\n          // If experiment id is present for the selected file, fetch the details\n          if (this.selectedDataSet?.taExperimentId) {\n            this._textAnalysis\n              .taExperiment(this.selectedDataSet.taExperimentId)\n              .pipe(takeUntil(this.unsubscribe$))\n              .subscribe(\n                (res) => {\n                  res ? (taExperiment = res) : (taExperiment = null);\n                },\n                (err) => {\n                  this._spinner.stopSpinner();\n                }\n              );\n          }\n          taFeatureConfig = (await taExperiment?.taFeatureConfig) || [];\n          // If taFeatureConfig is present, needs to exclude those features from target list\n          if (taFeatureConfig?.length) {\n            taFeaturesToExclude = taFeatureConfig.filter((item: any) => item.newFeature).flat();\n          }\n          if (this.edaData.isHighDimensional) {\n            this.decomposition = 'pca';\n          }\n          this.edaData.edaSummary.forEach((data: any) => {\n            if (data.dataType === 'Text') {\n              this.featureList.push(data.colName);\n            }\n          });\n          this.setNlpFeatureDefaults();\n          if (this.project.type === 'predictive_modeling') {\n            this.buildTrainingTable(\n              this.edaData.edaSummary,\n              this.project.type,\n              'without_feature_score'\n            );\n          }\n          this.pcaFeatures = this.edaData.edaSummary.filter(\n            (feature: any) =>\n              feature.colName !== this.edaData.depVariable &&\n              feature.dataType !== 'Unstructured' &&\n              !feature.constantFeature &&\n              !feature.mostlyMissing\n          );\n          this.clusterPcaFeatures = this.edaData.edaSummary.filter(\n            (feature: any) => !feature.constantFeature && !feature.mostlyMissing\n          );\n          this.explicitPairWiseOption = [\n            {\n              operation: 'addition',\n              colName: [],\n              typeOfAutoFeatureGen: 'explicitPairwiseCombination',\n            },\n          ];\n          if (type === 'fc') {\n            // Clustring does not have any target columns, so call the setData to set all the previous datas.\n            if (this.project.type === 'clustering') {\n              this.getModelAlgorithms('clustering', this.isMultilabel);\n              this.onClusteringAlgoChange();\n              this.prevTrainingInfo[0] ? this.setModelData() : null;\n            } else if (this.project.type === 'timeseries') {\n              let target = this.targetList.find(\n                (data: any) => data.colName === this.targetVarDetails.colName\n              );\n              this.explicitPairWiseOption = [\n                {\n                  operation: 'addition',\n                  colName: [],\n                  typeOfAutoFeatureGen: 'explicitPairwiseCombination',\n                },\n              ];\n              this.onTsAlgoChange();\n            } else {\n              let target = this.targetList.find(\n                (data: any) => data.colName === this.targetVarDetails.colName\n              );\n            }\n            this.setModelData();\n            if (\n              this.prevTrainingInfo[0] &&\n              this.prevTrainingInfo[0].predictiveModelingInfo?.hasOwnProperty('featureScores')\n            ) {\n              let tempEdaData: Array<any> = [];\n              let edaSummary: Array<any> = [];\n              this.showTrainingTable = false;\n              tempEdaData = [...this.edaData.edaSummary];\n              edaSummary = tempEdaData.map((data) => {\n                let item = this.prevTrainingInfo[0].predictiveModelingInfo.featureScores.find(\n                  (item: any) => item.colName === data.colName\n                );\n                if (item) {\n                  data.isSelected = item.isSelected;\n                  data.score = item.score;\n                }\n                return data;\n              });\n              this.buildTrainingTable(\n                this.edaData.edaSummary,\n                this.project.type,\n                'with_feature_score'\n              );\n            }\n            if (this.isTargetChanged) {\n              this.algorithmControl.reset();\n              this.algorithmControl.updateValueAndValidity();\n            }\n          } else {\n            this.algorithmControl.setValue('');\n            this.algorithmControl.updateValueAndValidity();\n            this.showTrainingTable = false;\n            this.selected = [];\n            this.indepVariables.length = 0;\n          }\n          if (this.project.type !== 'clustering') {\n            this.onTargetChange();\n          }\n          // this.featureTransform();\n          this._spinner.stopSpinner();\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Server Error', 'Training');\n        }\n      );\n  }\n\n  /**\n   * Called when the target is changed\n   * @param event\n   * @param target\n   */\n  onTargetChange(): void {\n    let targetFeature = this.edaData.edaSummary.filter((item) => {\n      return item.colName == this.edaData.depVariable;\n    });\n    let reqObj: any = {\n      afterEdaDataFilePath: this.selectedDataSet.filename,\n      depVariable: this.edaData.depVariable,\n      dependentFeaturetype: targetFeature[0].dataType,\n    };\n    // API call\n    this._training\n      .getTargetDetails(this.selectedDataSet.projectId, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          this.targetDetails = res.targetResponse;\n          this.showClass = res.targetResponse.classNames ? true : false;\n          this.targetDistribution = res.targetResponse.targetDistribution;\n          this.targetLength =\n            this.targetDistribution !== undefined\n              ? Object.getOwnPropertyNames(this.targetDistribution).length\n              : 0;\n        },\n        (err) => {\n          this._spinner.stopSpinner();\n          this._toaster.error('Something went wrong while fetching target details', 'Train Model');\n        }\n      );\n  }\n\n  /**\n   * Set model data before navigating to TrainModel page\n   */\n  setModelData(): void {\n    this.algorithmControl.setValue(this.prevTrainingInfo[0].algorithms);\n    this.algorithmControl.updateValueAndValidity();\n    this.nlpConfigs = this.prevTrainingInfo[0].nlpConfigs;\n    this.hptPreference = this.prevTrainingInfo[0].hptPreference !== undefined ? this.prevTrainingInfo[0].hptPreference : [];\n    this.generateScoringFunctionArray();\n    if (this.project.type === 'timeseries' && this.isTargetChanged === false) {\n      this.dateColumnSelected = this.prevTrainingInfo[0].dateColumnSelected;\n      this.preprocessedFilepath = this.prevTrainingInfo[0].preprocessedFilepath;\n      this.testSize = this.prevTrainingInfo[0].testSize || 20;\n      if (this.prevTrainingInfo[0].timeseriesInfo) {\n        // ! Unused variable\n        this.methodSelected = this.prevTrainingInfo[0].timeseriesInfo.method;\n        this.stationarityMethod = this.prevTrainingInfo[0].timeseriesInfo.stationaryMethod;\n        this.period = this.prevTrainingInfo[0].timeseriesInfo.period;\n        this.scalar = this.prevTrainingInfo[0].timeseriesInfo.scalar;\n        this.featureScalingOption = this.prevTrainingInfo[0].timeseriesInfo.featureScaling;\n        this.normalizationMethod = this.prevTrainingInfo[0].timeseriesInfo.normalizationMethod;\n      }\n      if (this.prevTrainingInfo[0].timeseriesInfo.stationaryMethod) {\n        this.stationaryTestData = this.prevTrainingInfo[0].timeseriesInfo.stationaryColumns;\n        this.stationaryDataSource = new MatTableDataSource(\n          this.prevTrainingInfo[0].timeseriesInfo.stationaryColumns\n        );\n        this.stationaryDataSource.paginator = this.stationaryPaginator;\n        this.stationaryDataSource.sort = this.stationarySort;\n      }\n      this.tempfeat = {};\n      let test: Array<any> = [];\n      let result: Array<any> = [];\n      let temp = this.prevTrainingInfo[0].edaId.edaSummary;\n      let colname = temp.filter((feature: any) => {\n        if (\n          !feature.constantFeature &&\n          !feature.highCardinalityFeature &&\n          !feature.mostlyMissing &&\n          feature.colName !== this.prevTrainingInfo[0].depVariable &&\n          (feature.dataType === 'Decimal' ||\n            feature.dataType === 'Integer' ||\n            feature.dataType === 'Numeric')\n        ) {\n          return feature;\n        }\n      });\n      colname.forEach((item) => {\n        test.push({ colName: item.colName });\n      });\n      result = test.filter((o1) => {\n        return this.indepVariables.some((o2) => o1.colName === o2.colName);\n      });\n      this.tempfeat = result.map((feature) => feature.colName);\n      // Filter the timeseriesIds from features list\n      if (this.edaData.isMultipleTimeseries) {\n        this.tempfeat = this.tempfeat.filter((i: any) =>\n          !this.edaData.timeseriesIds.includes(i) ? i : null\n        );\n      }\n      this.featureTemp = this.tempfeat;\n      this.featuresToTransform = this.prevTrainingInfo[0].timeseriesInfo.featuresToTransform;\n      this.ordinalEncMap = this.prevTrainingInfo[0].ordinalEncoderMap;\n      this.applyToTarget = this.prevTrainingInfo[0].timeseriesInfo.applyToTarget;\n      this.nSteps = this.prevTrainingInfo[0].nSteps;\n      if (\n        this.algorithmControl.value.includes('Sarimax') ||\n        this.algorithmControl.value.includes('Random Forest')\n      ) {\n        // ! Unused variable\n        this.exogVariable = this.prevTrainingInfo[0].timeseriesInfo.exogVariables;\n        this.tempSelected = this.prevTrainingInfo[0].timeseriesInfo.exogVariables;\n      }\n      this.onTsAlgoChange();\n    } else if (this.project.type === 'predictive_modeling' && this.isTargetChanged == false) {\n      this.tempSelected = [];\n      let algo = this.prevTrainingInfo[0].algoType;\n      if (algo === 'regression') {\n        this.estimatorAlgo = this.estimatorRegAlgo;\n      } else if (algo === 'classification') {\n        this.estimatorAlgo = this.estimatorClassAlgo;\n      }\n      this.indepVariables = this.prevTrainingInfo[0].indepVariable;\n      this.kfold = this.prevTrainingInfo[0].kFold;\n      this.testSize = this.prevTrainingInfo[0].testSize;\n      this.featureScalingOption = this.prevTrainingInfo[0].predictiveModelingInfo.featureScaling;\n      this.normalizationMethod =\n        this.prevTrainingInfo[0].predictiveModelingInfo.normalizationMethod;\n      this.sampling = this.prevTrainingInfo[0].sampling;\n      this.decomposition = this.prevTrainingInfo[0].predictiveModelingInfo.decomposition;\n      this.components = this.prevTrainingInfo[0].predictiveModelingInfo.components;\n      this.fsMethod = this.prevTrainingInfo[0].predictiveModelingInfo.featureSelectionMethod;\n      this.cv = this.prevTrainingInfo[0].predictiveModelingInfo.featureSelectionCV;\n      this.featureStep = this.prevTrainingInfo[0].predictiveModelingInfo.featureSelectionStep;\n      this.scoringFunction = this.prevTrainingInfo[0].predictiveModelingInfo.scoringFunction;\n      this.featurePercentage = this.prevTrainingInfo[0].predictiveModelingInfo.featurePercentage;\n      this.estimator = this.prevTrainingInfo[0].predictiveModelingInfo.featureSelectionEstimator;\n      this.tempfeat = {};\n      let test: Array<any> = [];\n      let result: Array<any> = [];\n      let temp = this.prevTrainingInfo[0].edaId.edaSummary;\n      let colname = temp.filter((feature: any) => {\n        if (\n          !feature.constantFeature &&\n          !feature.highCardinalityFeature &&\n          !feature.mostlyMissing &&\n          feature.colName !== this.prevTrainingInfo[0].depVariable &&\n          (feature.dataType === 'Decimal' ||\n            feature.dataType === 'Integer' ||\n            feature.dataType === 'Numeric')\n        ) {\n          return feature;\n        }\n      });\n      colname.forEach((item) => {\n        test.push({ colName: item.colName });\n      });\n      result = test.filter((o1) => {\n        return this.indepVariables.some((o2) => o1.colName === o2.colName);\n      });\n      this.tempfeat = result.map((feature) => feature.colName);\n      this.featureTemp = this.tempfeat;\n      this.featuresToTransform =\n        this.prevTrainingInfo[0].predictiveModelingInfo.featuresToTransform;\n      this.applyToTarget = this.prevTrainingInfo[0].predictiveModelingInfo.applyToTarget;\n      this.customFeatureChecked =\n        this.prevTrainingInfo[0].predictiveModelingInfo.customFeatureChecked;\n      this.customFeatures = this.customFeatureChecked\n        ? this.prevTrainingInfo[0].predictiveModelingInfo.customFeatures\n        : [];\n      if (this.normalizationMethod === 'log_transform') {\n        this.scale = this.prevTrainingInfo[0].predictiveModelingInfo.scalarValue;\n        this.showlog = true;\n        this.showscalar = true;\n      }\n      if (\n        (this.sampling === 'under_sampling' || this.sampling === 'over_sampling') &&\n        this.prevTrainingInfo[0].samplingPercentage\n      ) {\n        let output: Array<any> = [];\n        this.showButton = true;\n        this.samplingData = this.prevTrainingInfo[0].samplingPercentage;\n        Object.keys(this.samplingData).forEach((record) => {\n          output.push({\n            colName: record,\n            value: this.samplingData[record],\n            initValue: this.samplingData[record],\n          });\n        });\n        this.samplingData = output;\n        this.samplingdat = output;\n      } else {\n        this.showButton = false;\n      }\n      if (this.prevTrainingInfo[0]) {\n        this.tempSelected = this.indepVariables;\n      }\n      //All features are selected\n      if (this.edaData.edaSummary.length - 1 === this.indepVariables.length) {\n        this.featureDataSource?.data.forEach((row) => this.selection.select(row));\n      }\n      if (this.prevTrainingInfo[0].autoFeatureGenTasks) {\n        if (this.prevTrainingInfo[0].dropOriginal) {\n          this.fdropMethod = 'true';\n        } else if (!this.prevTrainingInfo[0].dropOriginal) {\n          this.fdropMethod = 'false';\n        }\n        this.explicitPairWiseOption = [];\n        this.prevTrainingInfo[0].autoFeatureGenTasks.forEach((data: any) => {\n          if (data.typeOfAutoFeatureGen === 'pairwiseLinear') {\n            this.pairwiseLinear = true;\n            this.pairwiseLinearOption = data.operation;\n          } else if (data.typeOfAutoFeatureGen === 'pairwisePolynomial') {\n            this.pairwisePolynomial = true;\n            this.pairwisePolynomialOption = data.operation;\n          } else if (data.typeOfAutoFeatureGen === 'univariatePolynomial') {\n            this.univariatePolynomial = true;\n            this.exponent = data.exponent;\n          } else if (data.typeOfAutoFeatureGen === 'split') {\n            this.split = true;\n            this.delimiter = data.delimiter;\n            this.featureSplitCount = data.featureSplitCount;\n          } else if (data.typeOfAutoFeatureGen === 'explicitPairwiseCombination') {\n            this.tempFeatures = this.indepVariables.filter((item: any) => {\n              let dataType = this.tableData.find(\n                (data: any) => data.colName === item.colName\n              ).dataType;\n              if (dataType === 'Integer' || dataType === 'Decimal') {\n                return true;\n              } else {\n                return false;\n              }\n            });\n            this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n            this.textOrCategoricalFeatures = this.tempSelected.filter((item: any) => {\n              let dataType = this.tableData.find(\n                (data: any) => data.colName === item.colName\n              ).dataType;\n              if (dataType === 'Text' || dataType === 'Categorical') {\n                return true;\n              } else {\n                return false;\n              }\n            });\n            this.explicitPairwise = true;\n            this.explicitPairWiseOption.push(data);\n          }\n        });\n      }\n      this.ordinalEncMap = this.prevTrainingInfo[0].ordinalEncoderMap;\n    } else if (this.project.type === 'clustering') {\n      this.customFeatureChecked = this.prevTrainingInfo[0].clusteringInfo.customFeatureChecked;\n      this.customFeatures = this.customFeatureChecked\n        ? this.prevTrainingInfo[0].clusteringInfo.customFeatures\n        : [];\n      if (this.edaData.edaSummary.length === this.indepVariables.length) {\n        this.featureDataSource?.data.forEach((row) => this.selection.select(row));\n      }\n      this.onClusteringAlgoChange();\n      // All features are selected\n      if (this.prevTrainingInfo[0].clusteringInfo) {\n        const datatype = typeof this.prevTrainingInfo[0].clusteringInfo.clusters;\n        if (datatype === 'number') {\n          this.clusters = this.clusters = this.prevTrainingInfo[0].clusteringInfo.clusters;\n        } else {\n          this.prevTrainingInfo[0].algorithms.forEach((element) => {\n            if (element.includes('KMeans')) {\n              this.clusters = this.prevTrainingInfo[0].clusteringInfo.clusters['KMeans'];\n            } else if (element.includes('Agglomerative')) {\n              this.agglomerativeCluster =\n                this.prevTrainingInfo[0].clusteringInfo.clusters['Agglomerative'];\n            }\n          });\n        }\n        this.decomposition = this.prevTrainingInfo[0].clusteringInfo.decomposition;\n        this.components = this.prevTrainingInfo[0].clusteringInfo.components;\n        this.numericFeatures = this.prevTrainingInfo[0].clusteringInfo.numericFeatures;\n        this.normalizationMethod = this.prevTrainingInfo[0].clusteringInfo.normalizationMethod;\n        this.featureScalingOption = this.prevTrainingInfo[0].clusteringInfo.featureScaling;\n      }\n      let test: Array<any> = [];\n      let result: Array<any> = [];\n      let temp = this.prevTrainingInfo[0].edaId.edaSummary;\n      let colname = temp.filter((feature: any) => {\n        if (\n          !feature.constantFeature &&\n          !feature.highCardinalityFeature &&\n          !feature.mostlyMissing &&\n          (feature.dataType === 'Decimal' ||\n            feature.dataType === 'Integer' ||\n            feature.dataType === 'Numeric')\n        ) {\n          return feature;\n        }\n      });\n      colname.forEach((item) => {\n        test.push({ colName: item.colName });\n      });\n      result = test.filter((o1) => {\n        return this.indepVariables.some((o2) => o1.colName === o2.colName);\n      });\n      this.tempfeat = result.map((feature) => feature.colName);\n      this.featureTemp = this.tempfeat;\n      this.featuresToTransform = this.prevTrainingInfo[0].clusteringInfo.featuresToTransform;\n      // this.applyToTarget = this.prevTrainingInfo[0].clusteringInfo.applyToTarget;\n      if (this.normalizationMethod === 'log_transform') {\n        this.scale = this.prevTrainingInfo[0].clusteringInfo.scalarValue;\n        this.showlog = true;\n        this.showscalar = true;\n      }\n      this.ordinalEncMap = this.prevTrainingInfo[0].ordinalEncoderMap;\n    }\n  }\n\n  /**\n   * Function to form independent variable list\n   * @param target\n   * @param type\n   * @returns\n   */\n  generateIndepVariableList(target: any, type: string): Array<any> {\n    const tSelected: Array<any> = [];\n    const selectedFeatures: Array<any> = this.selection.selected;\n    // lOb - list of objects, which will convert to list of objects\n    if (type === 'lOb') {\n      selectedFeatures.forEach((item: any) => {\n        if (item.colName !== target.colName) {\n          tSelected.push({ colName: item.colName });\n        }\n        // Updates the selected array with new features\n        for (var k in this.selected) {\n          this.selected[k] === item.colName\n            ? (this.selected[item.colName] = true)\n            : (this.selected[item.colName] = false);\n        }\n      });\n    } else {\n      selectedFeatures.forEach((item: any) => {\n        tSelected.push({ colName: item.colName });\n        // Updates the selected array with new features\n        for (var k in this.selected) {\n          this.selected[k] === item.colName\n            ? (this.selected[item.colName] = true)\n            : (this.selected[item.colName] = false);\n        }\n      });\n    }\n    return tSelected;\n  }\n\n  /**\n   * Called when timeseries algo changes\n   */\n  onTsAlgoChange(): void {\n    this.selection.clear();\n    var dateExcludedFeatures = this.edaData.edaSummary.filter(\n      (feature: any) =>\n        feature.dataType !== 'Datetime' && feature.colName !== this.edaData.depVariable\n    );\n    if (this.edaData.isMultipleTimeseries) {\n      dateExcludedFeatures = dateExcludedFeatures.filter((i: any) => {\n        return !this.edaData.timeseriesIds.includes(i.colName) ? i : null\n      });\n    }\n    // if (this.edaData.isMultipleTimeseries === true) {\n    //   dateExcludedFeatures = dateExcludedFeatures.filter((item: any) => item.dataType !== 'Categorical');\n    // }\n    if (this.algorithmControl.value.length && this.algorithmControl.value[0] !== 'Prophet') {\n      this.buildTrainingTable(dateExcludedFeatures, this.project.type, 'without_feature_score');\n    } else {\n      this.featureDataSource.data = [];\n      this.featureDataSource._updateChangeSubscription();\n      this.showTrainingTable = false;\n    }\n  }\n\n  /**\n   * Calls when the algorithm is changed\n   */\n  onClusteringAlgoChange(): void {\n    // ! Deprecated event key\n    // if (event != 'fc') {\n    //   this.selectAll = false;\n    // }\n    if (this.project.type === 'clustering') {\n      this.buildTrainingTable(this.edaData.edaSummary, this.project.type, 'without_feature_score');\n    }\n  }\n\n  /**\n   * Sets the default value as unigram for n gram, default data for nlp feature\n   */\n  setNlpFeatureDefaults(): void {\n\n    let featureVal: any = {};\n    let featureExists: boolean = false;\n    this.nlpDefaultConfigData = {\n      nlpFeatureExtractionMethod: 'CountVectorizer',\n      nlpLanguage: 'English',\n      nFeatureCount: 100,\n      stripAccents: 'none',\n      decodeError: 'strict',\n      nGram: [this.nGramOptions[0]],\n    };\n    this.featureList.forEach((feature) => {\n      featureVal = {\n        colName: feature,\n        nlpFeatureConfig: this.nlpDefaultConfigData,\n      };\n      if (this.nlpConfigs.length) {\n        this.nlpConfigs.forEach((nlpFeature) => {\n          if (nlpFeature.colName === featureVal.colName) {\n            featureExists = true;\n          }\n        });\n        if (!featureExists) {\n          this.nlpConfigs.push(featureVal);\n        }\n      } else {\n        this.nlpConfigs.push(featureVal);\n      }\n    });\n    this.showNgramSlider = false;\n  }\n\n  /**\n   * On auto feature generation option changes\n   * @param option\n   * @param model\n   * @returns\n   */\n  onAFGOptionSelection(option: any, model: any): void {\n    if (\n      (option === 'pairwiseLinear' ||\n        option === 'pairwisePolynomial' ||\n        option === 'univariatePolynomial' ||\n        option === 'explicitPairwise') &&\n      model\n    ) {\n      this.fdropMethod = 'true';\n    } else {\n      this.fdropMethod = '';\n      this.normalizationMethod = 'none';\n      this.showlog = false;\n    }\n    if (option === 'explicitPairwise') {\n      this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n      if (!this.tempSelected.length) {\n        this.showSnackBar('Please select features first', 'OK');\n        this.explicitPairwise = false;\n      } else {\n        this.getEPCFeatures();\n        this.univariatePolynomial = false;\n        this.pairwisePolynomial = false;\n        this.pairwiseLinear = false;\n        this.split = false;\n        this.explicitPairWiseOption = [\n          {\n            operation: 'addition',\n            colName: [],\n            typeOfAutoFeatureGen: 'explicitPairwiseCombination',\n          },\n        ];\n      }\n    } else {\n      this.explicitPairwise = false;\n    }\n  }\n\n  /**\n   * Generates EPC features\n   */\n  getEPCFeatures(): void {\n    this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n    this.tempFeatures = this.tempSelected.filter((item: any) => {\n      var dataType = this.tableData.find((data: any) => data.colName === item.colName).dataType;\n      if (dataType === 'Integer' || dataType === 'Decimal') {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    this.textOrCategoricalFeatures = this.tempSelected.filter((item: any) => {\n      var dataType = this.tableData.find((data: any) => data.colName === item.colName).dataType;\n      if (dataType === 'Text' || dataType === 'Categorical') {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Generates the training feature selection table\n   * @param edaSummary\n   * @param problemType predictive_modeling / timeseries / clustering\n   * @param featureScore\n   */\n  buildTrainingTable(edaSummary: any, problemType: string, featureScore: string): void {\n    this.tableData = [];\n    this.selection.clear();\n    if (problemType === 'clustering') {\n      edaSummary.map((feature: any) => {\n        if (\n          !feature.constantFeature &&\n          !feature.highCardinalityFeature &&\n          feature.colName !== this.edaData.depVariable &&\n          !feature.mostlyMissing\n        ) {\n          if (this.prevTrainingInfo[0] && this.prevTrainingInfo[0].categoricalEncoders) {\n            if (this.prevTrainingInfo[0].categoricalEncoders[feature.colName]) {\n              feature.encoder = this.prevTrainingInfo[0].categoricalEncoders[feature.colName];\n            } else if (feature.highCardinalityFeature) {\n              feature.encoder = 'Binary encoder';\n            } else {\n              feature.encoder = 'Binary encoder';\n            }\n          } else if (feature.highCardinalityFeature) {\n            feature.encoder = 'Binary encoder';\n          } else {\n            feature.encoder = 'Binary encoder';\n          }\n          if (feature.dataType === 'Categorical') {\n            this.catEnc[feature.colName] = feature.encoder;\n          }\n          if (feature.dataType === 'Datetime') {\n            feature.dateComponentList = this.dateOperations;\n            if (this.prevTrainingInfo[0]?.dateComponent) {\n              feature.dateComponent = this.prevTrainingInfo[0].dateComponent[feature.colName];\n            } else {\n              feature.dateComponentList = this.dateOperations.filter(function (o1) {\n                // return the ones with equal id\n                return feature.dateComponent.some((o2) => o1 === o2);\n              });\n            }\n          }\n          this.tableData.push(feature);\n        }\n      });\n    } else {\n      edaSummary.map((feature: any) => {\n        if (\n          !feature.constantFeature &&\n          !feature.highCardinalityFeature &&\n          feature.colName !== this.edaData.depVariable &&\n          !feature.mostlyMissing\n        ) {\n          if (this.prevTrainingInfo[0] && this.prevTrainingInfo[0].categoricalEncoders) {\n            if (this.prevTrainingInfo[0].categoricalEncoders[feature.colName]) {\n              feature.encoder = this.prevTrainingInfo[0].categoricalEncoders[feature.colName];\n            } else if (feature.highCardinalityFeature) {\n              feature.encoder = 'Binary encoder';\n            } else {\n              feature.encoder = 'Binary encoder';\n            }\n          } else if (feature.highCardinalityFeature) {\n            feature.encoder = 'Binary encoder';\n          } else {\n            feature.encoder = 'Binary encoder';\n          }\n          if (feature.dataType === 'Categorical') {\n            this.catEnc[feature.colName] = feature.encoder;\n          }\n          if (feature.dataType === 'Datetime') {\n            feature.dateComponentList = this.dateOperations;\n            if (this.prevTrainingInfo[0]?.dateComponent) {\n              feature.dateComponent = this.prevTrainingInfo[0].dateComponent[feature.colName];\n            } else {\n              feature.dateComponentList = this.dateOperations.filter(function (o1) {\n                // return the ones with equal id\n                return feature.dateComponent.some((o2) => o1 === o2);\n              });\n            }\n          }\n          this.tableData.push(feature);\n        }\n      });\n      this.tableData = this.tableData.filter((item) => {\n        return item.colName !== this.edaData.depVariable;\n      });\n    }\n    if (this.project.projectStatus === 'Model Generated') {\n      // All features are selected\n      if (this.tableData.length === this.indepVariables.length) {\n        this.featureDataSource.data.forEach((row) => this.selection.select(row));\n      }\n    }\n    // Generates dateComponent object, only if dataType is Datetime\n    this.tableData.filter((item) => {\n      if (item?.dataType === 'Datetime') {\n        this.dateComponent[item.colName] = item.dateComponent;\n      }\n    });\n    // Generates the indepVariables selected features array\n    this.tableData.forEach((item: any) => {\n      let itemFound: boolean = true;\n      this.indepVariables.forEach((indep) => {\n        if (indep.colName === item.colName) {\n          // Checks the checkbox for particular selected feature name\n          this.selection.select(item);\n          this.selected[item.colName] = true;\n        }\n        if (!itemFound) {\n          this.selected[item.colName] = false;\n        }\n      });\n    });\n    // Excludes all the features having unstructured data type\n    this.tableData = this.tableData.filter((item) => item.dataType !== 'Unstructured');\n\n    // Datatable coulmns for clustering and timeseries\n    if (problemType === 'clustering' || problemType === 'timeseries') {\n      if (this.categoricalEncoders.includes('Leave one out encoder')) {\n        this.categoricalEncoders.splice(\n          this.categoricalEncoders.indexOf('Leave one out encoder'),\n          1\n        );\n      }\n      if (this.categoricalEncoders.includes('Target encoder')) {\n        this.categoricalEncoders.splice(this.categoricalEncoders.indexOf('Target encoder'), 1);\n      }\n      this.featureDataSource.data = this.tableData;\n      this.featureDataSource._updateChangeSubscription();\n      this.featureDataSource.sort = this.featureSort;\n      this.featureDataSource.paginator = this.featurePaginator;\n    } else {\n      // Datatable coulmns for predictive modeling\n      this.featureDataSource.data = this.tableData;\n      this.featureDataSource._updateChangeSubscription();\n      this.featureDataSource.sort = this.featureSort;\n      this.featureDataSource.paginator = this.featurePaginator;\n      if (featureScore === 'with_feature_score') {\n        // Adds the new columns in the table, if not exists\n        this.displayedColumns.includes('isImportant')\n          ? this.displayedColumns\n          : this.displayedColumns.push('isImportant');\n        this.displayedColumns.includes('score')\n          ? this.displayedColumns\n          : this.displayedColumns.push('score');\n        this.featureDataSource.data = this.tableData;\n        this.featureDataSource._updateChangeSubscription();\n        this.featureDataSource.sort = this.featureSort;\n        this.featureDataSource.paginator = this.featurePaginator;\n      } else if (featureScore === 'without_feature_score') {\n        if (this.displayedColumns.includes('isImportant')) {\n          this.displayedColumns.splice(this.displayedColumns.indexOf('isImportant'), 1);\n        }\n        if (this.displayedColumns.includes('score')) {\n          this.displayedColumns.splice(this.displayedColumns.indexOf('score'), 1);\n        }\n        this.featureDataSource.data = this.tableData;\n        this.featureDataSource._updateChangeSubscription();\n        this.featureDataSource.sort = this.featureSort;\n        this.featureDataSource.paginator = this.featurePaginator;\n      }\n    }\n    this.showTrainingTable = true;\n  }\n\n  /**\n   * Called when categorical encoder selection changes\n   * @param encoder\n   * @param colName\n   */\n  onChangeCatEncoding(encoder: string, colName: string, feature: any): void {\n    let mapperDatas: Array<any> = [];\n    let itemFound: any;\n    let encoderData: any;\n    let reqObj: any;\n    if (encoder === 'Ordinal encoder') {\n      itemFound = this.ordinalEncMap.find((item) => item.col === colName);\n      if (itemFound) {\n        mapperDatas = Object.keys(itemFound.mapping);\n        encoderData = {\n          colName: colName,\n          mapperDatas: mapperDatas,\n          itemFound: itemFound,\n          ordinalEncMap: this.ordinalEncMap,\n        };\n        this._spinner.stopSpinner();\n        // Open ordinal encoder mapper pop up\n        this.openDialog('ordinalEncoder', encoderData);\n      } else {\n        this._spinner.showSpinner();\n        reqObj = {\n          filename: this.selectedDataSet.filename,\n          colName: colName,\n          projectId: this.project._id,\n        };\n        // API call\n        this._training\n          .getUniqueCategories(reqObj)\n          .pipe(takeUntil(this.unsubscribe$))\n          .subscribe(\n            (res) => {\n              if (res) {\n                this._spinner.stopSpinner();\n                mapperDatas = res.body;\n                encoderData = {\n                  colName: colName,\n                  mapperDatas: mapperDatas,\n                  itemFound: itemFound,\n                  ordinalEncMap: this.ordinalEncMap,\n                };\n                // Open ordinal encoder mapper pop up\n                this.openDialog('ordinalEncoder', encoderData);\n              } else {\n                this._spinner.stopSpinner();\n                mapperDatas = [];\n                this._toaster.error('Cannot fetch unique categories', 'Train Model');\n              }\n            },\n            (err) => {\n              mapperDatas = [];\n              this._spinner.stopSpinner();\n              this._toaster.error('Server Error', 'Train Model');\n            }\n          );\n      }\n    } else {\n      this.ordinalEncMap.map((item) => {\n        if (item.col == colName) {\n          let index = this.ordinalEncMap.findIndex((item) => {\n            return item.col == colName;\n          });\n          this.ordinalEncMap.splice(index, 1);\n        }\n      });\n    }\n    // Updates the dateComponent object, if it is changed\n    if (feature.dataType === 'Datetime') {\n      this.dateComponent[feature.colName] = feature.dateComponent;\n    } else if (feature.dataType === 'Categorical') {\n      this.catEnc[feature.colName] = feature.encoder;\n    }\n  }\n\n  /**\n   * Fetches all the algorithms\n   * @param algoType\n   * @param isMultilabel\n   */\n  getModelAlgorithms(algoType: string, isMultilabel: boolean): void {\n    this.modelAlgorithmArray = this.ALGORITHMS_ARRAY.filter((algorithm) => {\n      if (isMultilabel) {\n        return (\n          algorithm.type === algoType.toLowerCase() &&\n          algorithm.multilabel === (isMultilabel ? isMultilabel : false)\n        );\n      } else {\n        return (\n          algorithm.type === algoType.toLowerCase() &&\n          algorithm.useGPU === (this.project.useGPU || false)\n        );\n      }\n    });\n    if (this.project.type == 'timeseries' && this.edaData.isMultipleTimeseries) {\n      this.modelAlgorithmArray = this.modelAlgorithmArray.filter((item) => {\n        return (item.name === 'Random Forest' || item.name === 'Linear Regression Ts');\n      });\n    } else if (this.project.type == 'timeseries' && !this.edaData.isMultipleTimeseries) {\n      this.modelAlgorithmArray = this.modelAlgorithmArray.filter((item) => {\n        return (item.name !== 'Random Forest' && item.name !== 'Linear Regression Ts');\n      });\n    }\n  }\n\n  /**\n   * Called when - drop original feature, is changed\n   */\n  dropChange(): void {\n    this.normalizationMethod = 'none';\n    // this.showlog = false;\n  }\n\n  /**\n   * On feature scaling option changes\n   */\n  onFeatureScalingOptionChange(): void {\n    if (this.featureScalingOption !== 'none') {\n      this.normalizationMethod = 'none';\n    }\n  }\n\n  featureTransform() {\n    let colnameFeature: Array<any> = [];\n    let colname: Array<any> = [];\n    let test: Array<any> = [];\n    let result: Array<any> = [];\n    let temp: Array<any> = [];\n    if (this.project.type === 'predictive_modeling') {\n      this.showlog = true;\n      this.getAFGoptions();\n      if (this.autoFeatureGenTasks.length > 0 && this.fdropMethod === 'true') {\n        this.tempfeat = {};\n        colnameFeature = this.edaData.edaSummary;\n        colname = colnameFeature.filter((feature: any) => {\n          return (\n            !feature.constantFeature &&\n            !feature.highCardinalityFeature &&\n            !feature.mostlyMissing &&\n            feature.colName !== this.edaData.depVariable &&\n            (feature.dataType === 'Decimal' ||\n              feature.dataType === 'Integer' ||\n              feature.dataType === 'Numeric')\n          );\n        });\n        colname.forEach((item) => {\n          test.push({ colName: item.colName });\n        });\n        result = test.filter((o1) => {\n          return !this.tempSelected.some((o2) => o1.colName === o2.colName);\n        });\n        this.tempfeat = result.map((feature) => feature.colName);\n        // if (this.tempfeat.length < 1) {\n        //   this.showSnackBar('Sorry! No independent feature(s) is available for transformer.', 'OK');\n        //   this.showlog = false;\n        //   // this.showLoading = false;\n        // }\n      } else {\n        temp = this.edaData.edaSummary;\n        temp = temp.filter((feature) => {\n          return (\n            !feature.constantFeature &&\n            !feature.highCardinalityFeature &&\n            !feature.mostlyMissing &&\n            feature.colName !== this.edaData.depVariable &&\n            (feature.dataType === 'Decimal' ||\n              feature.dataType === 'Integer' ||\n              feature.dataType === 'Numeric')\n          );\n        });\n        this.tempfeat = temp.map((feature) => feature.colName);\n        // if (this.tempfeat.length < 1) {\n        //   this.showSnackBar('Sorry! No independent feature(s) is available for transformer.', 'OK');\n        //   this.showlog = false;\n        //   // this.showLoading = false;\n        // }\n        this.showlog = true;\n      }\n    } else if (this.project.type === 'clustering') {\n      this.showlog = true;\n      temp = this.edaData.edaSummary;\n      temp = temp.filter((feature) => {\n        return (\n          !feature.constantFeature &&\n          !feature.highCardinalityFeature &&\n          !feature.mostlyMissing &&\n          (feature.dataType === 'Decimal' ||\n            feature.dataType === 'Integer' ||\n            feature.dataType === 'Numeric')\n        );\n      });\n      this.tempfeat = temp.map((feature) => feature.colName);\n      this.showlog = true;\n    } else {\n      this.showlog = false;\n    }\n  }\n  /**\n   * On normalization method changes\n   * @param method\n   * @returns\n   */\n  onNormalizationChange(method: string): void {\n    if (this.normalizationMethod !== 'none') {\n      this.featureScalingOption = 'none';\n    }\n  }\n\n  /**\n   * Function triggerd on selection of feature selction methods\n   * @param algoType\n   * @param fsMethod\n   */\n  onFSMethodChange(algoType: string, fsMethod: string): void {\n    if (fsMethod !== 'RFE' && algoType === 'regression') {\n      this.featureStep = 'none';\n      this.cv = 'none';\n      this.scoringFunction = 'f_regression';\n    } else if (fsMethod === 'RFE' && algoType === 'regression') {\n      this.scoringFunction = 'Rmse';\n      this.estimatorAlgo = this.estimatorRegAlgo;\n      this.featureStep = 10;\n      this.cv = 1;\n    } else if (fsMethod === 'RFE' && algoType === 'classification') {\n      this.scoringFunction = 'accuracy';\n      this.estimatorAlgo = this.estimatorClassAlgo;\n      this.featureStep = 10;\n      this.cv = 1;\n    } else {\n      this.featureStep = 'none';\n      this.cv = 'none';\n      this.estimator = '';\n      this.scoringFunction = 'f_classif';\n    }\n    this.generateScoringFunctionArray();\n  }\n\n  /**\n   * Changed when decomposition changes\n   */\n  onDecompositionChange(): void {\n    // When selects pca featureScalingOption options is set to standard_scaler\n    if (this.project.type === 'clustering') {\n      this.featureScalingOption =\n        this.decomposition === 'pca' && this.normalizationMethod === 'none'\n          ? 'standard_scaler'\n          : this.featureScalingOption;\n    } else {\n      this.featureScalingOption =\n        this.decomposition === 'pca' && this.normalizationMethod === 'none'\n          ? 'standard_scaler'\n          : 'none';\n    }\n  }\n\n  /**\n   * Generates the scoring function array dynamically\n   */\n  generateScoringFunctionArray(): void {\n    if (this.fsMethod !== 'RFE' && this.algoType === 'regression') {\n      this.scoringFunctionArray = [\n        { name: 'f_regression', value: 'f_regression' },\n        { name: 'f_classif', value: 'f_classif' },\n        { name: 'mutual_info_regression', value: 'mutual_info_regression' },\n      ];\n    } else if (this.fsMethod !== 'RFE' && this.algoType === 'classification') {\n      this.scoringFunctionArray = [\n        { name: 'chi2', value: 'chi2' },\n        { name: 'f_classif', value: 'f_classif' },\n        { name: 'mutual_info_classif', value: 'mutual_info_classif' },\n      ];\n    } else if (this.fsMethod === 'RFE' && this.algoType === 'regression') {\n      this.scoringFunctionArray = [\n        { name: 'RMSE', value: 'Root Mean Square Error' },\n        { name: 'MAE', value: 'Mean Absolute Error' },\n      ];\n    } else if (this.fsMethod === 'RFE' && this.algoType === 'classification') {\n      this.scoringFunctionArray = [\n        { name: 'Accuracy', value: 'accuracy' },\n        { name: 'F1_Score', value: 'f1' },\n      ];\n    }\n  }\n\n  /**\n   * Calculates the feature score by triggering API\n   */\n  calculateFeatureScore(): void {\n    let featureScoreData: any = null;\n    let categoricalColNames: Array<any> = [];\n    let isError: Boolean = false;\n    let fileData = this.dataSetsList.find((item) => item._id === this.selectedDataSet._id);\n    this.getAFGoptions();\n    categoricalColNames = this.getFeatures(\n      this.edaData.edaSummary,\n      'Categorical',\n      this.edaData.depVariable\n    );\n    this.indepVariables = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n    // Predictive modeling\n    if (this.indepVariables.length < 1) {\n      this.showSnackBar('Please select features', 'OK');\n      isError = true;\n    }\n    if (!this.featureStep) {\n      this.showSnackBar('Feature steps should be between 0-1', 'OK');\n      isError = true;\n    }\n    if (!this.cv) {\n      this.showSnackBar('CV should be between 0-5', 'OK');\n      isError = true;\n    }\n    if (\n      (this.decomposition === 'pca' || this.decomposition === 'factoranalysis') &&\n      (this.components < 2 || this.components > fileData.noOfCols)\n    ) {\n      this.showSnackBar(\n        `Dimensional reduction components should be between 2 and ${fileData.noOfCols}`,\n        'OK'\n      );\n      isError = true;\n    }\n    if (this.customFeatureChecked && this.decomposition !== 'none') {\n      if (!this.customFeatures) {\n        this.showSnackBar('Custom features cannot be empty', 'OK');\n        isError = true;\n      }\n      if (this.customFeatures.length <= this.components) {\n        this.showSnackBar('No. of custom features should be greater than components', 'OK');\n        isError = true;\n      }\n    }\n    if (\n      this.normalizationMethod == 'log_transform' &&\n      this.featuresToTransform.length < 1 &&\n      this.applyToTarget == false\n    ) {\n      this.showSnackBar('Please select independent feature or target for feature transform', 'OK');\n      isError = true;\n    }\n    if (\n      this.normalizationMethod == 'log_transform' &&\n      (this.featuresToTransform.length > 0 || this.applyToTarget)\n    ) {\n      this.scaleValue = this.scale;\n    }\n\n    featureScoreData = {\n      parentFileId: this.childFileData._id,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      fileSchema: this.childFileData.fileSchema,\n      depVariable: this.edaData.depVariable,\n      indepVariable: this.indepVariables,\n      algorithms: this.algorithmControl.value,\n      testSize: this.testSize,\n      pId: this.project._id,\n      hptPreference: this.hptPreference,\n      categoricalColNames: categoricalColNames || [],\n      originalFileName: this.selectedDataSet.filename,\n      indexPath: this.edaData.indexPath,\n      afterEdaDataFilePath: this.edaData.afterEdaDataFilePath,\n      noOfCol: this.edaData.edaSummary.length,\n      paragraphColNames: this.edaData.paragraphColNames,\n      dimReductionFitSize: this.edaData.dimReductionFitSize || 1.0,\n      algoType: this.algoType,\n      isMultilabel: this.isMultilabel,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      edaId: this.edaData._id,\n      datetimeColumnName: this.edaData.datetimeColumnName,\n      problemType: this.edaData.problemType,\n      isImbalanced: this.isImbalanced,\n      sampling: this.sampling,\n      autoFeatureGenTasks: this.autoFeatureGenTasks.length ? this.autoFeatureGenTasks : null,\n      rootFileName: this.selectedDataSet.filename,\n      categoricalEncoders: this.catEnc || [],\n      dateComponent: this.dateComponent,\n      predictiveModelingInfo: {\n        decomposition: this.decomposition,\n        components: this.components,\n        featureSelectionMethod: this.fsMethod || 'none',\n        scoringFunction: this.scoringFunction || 'none',\n        featurePercentage: this.featurePercentage,\n        nFeaturesToSelect: this.nFeaturesToSelect,\n        featuresToTransform: this.featuresToTransform || {},\n        applyToTarget: this.applyToTarget,\n        // ! Replaced this.step with this.featureStep (unused variable this.step)\n        step: this.featureStep,\n        customFeatureChecked: this.customFeatureChecked,\n        customFeatures: this.customFeatures,\n        featureScaling: this.featureScalingOption || 'none',\n        normalizationMethod: this.normalizationMethod,\n        featureSelectionEstimator: this.estimator || 'none',\n        featureSelectionStep: this.featureStep || 'none',\n        featureSelectionCV: this.cv || 'none',\n        scalarValue: this.scaleValue || {},\n      },\n      nlpConfigs: this.nlpConfigs,\n    };\n    if (this.fsMethod !== 'RFE') {\n      featureScoreData.predictiveModelingInfo.featureSelectionEstimator = 'none';\n      featureScoreData.predictiveModelingInfo.featureSelectionStep = 'none';\n      featureScoreData.predictiveModelingInfo.featureSelectionCV = 'none';\n    }\n    if (featureScoreData.predictiveModelingInfo.normalizationMethod !== 'log_transform') {\n      delete featureScoreData.predictiveModelingInfo['scalarValue'];\n    }\n    // API call\n    if (!isError) {\n      this._spinner.showSpinner();\n      this._training\n        .calculateFeatureScore(this.project._id, featureScoreData)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              let tempEdaData: Array<any> = [];\n              let edaSummary: Array<any> = [];\n              this.showTrainingTable = false;\n              tempEdaData = [...this.edaData.edaSummary];\n              edaSummary = tempEdaData.map((data) => {\n                const item = res.featureScores.find((item: any) => item.colName === data.colName);\n                if (item) {\n                  data.isSelected = item.isSelected;\n                  data.score = item.score;\n                }\n                return data;\n              });\n              this.buildTrainingTable(edaSummary, this.project.type, 'with_feature_score');\n            } else {\n              this._toaster.error('Cannot calculate feature score', 'Train Model');\n            }\n            this._spinner.stopSpinner();\n          },\n          (err) => {\n            this._spinner.stopSpinner();\n            this._toaster.error(err.error.message, 'Train Model');\n          }\n        );\n    }\n  }\n\n  /**\n   * Function for sampling percentage increment or decrement depending on sampling type\n   // tslint:disable-next-line: no-redundant-jsdoc\n   * @param sampling\n   */\n  ischeckSampling(sampling: any): void {\n    if (sampling === 'over_sampling' || sampling === 'under_sampling') {\n      if (this.samplingdat && this.samplingdat.length) {\n        this.calculatePercentage();\n      }\n    } else {\n      this.samplingdat = [];\n      this.samplingData = [];\n    }\n  }\n\n  /**\n   * Calculates the sampling percentage\n   * @returns\n   */\n  calculatePercentage(): void {\n    this.samplingData = {};\n    if (this.tempSelected.length == 0) {\n      this.showSnackBar('Please select features.', 'OK');\n    } else {\n      this._spinner.showSpinner();\n      let reqObj = {\n        projectId: this.project._id,\n        depVariable: this.edaData.depVariable,\n        rootFileName: this.selectedDataSet.filename,\n        indexPath: this.edaData.indexPath,\n        parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n        isMultilabel: this.isMultilabel,\n        testSize: this.testSize,\n        indepVariable: this.tempSelected,\n      };\n      // API call\n      this._training\n        .calculateSamplingPercentage(this.project._id, reqObj)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this.samplingdat = res.data;\n              this.samplingdat = this.samplingdat.map((item: any) => {\n                let s = Object.assign({}, item);\n                s.initValue = item.value;\n                return s;\n              });\n              this.samplingData = res.data;\n              this.samplingData = this.samplingData.map((item: any) => {\n                var s = Object.assign({}, item);\n                s.initValue = item.value;\n                return s;\n              });\n            } else {\n              this._toaster.error('Cannot calculate sampling percentage', 'Train Model');\n            }\n            this._spinner.stopSpinner();\n          },\n          (err) => {\n            this._spinner.stopSpinner();\n            this._toaster.error('Server Error', 'Train Model');\n          }\n        );\n    }\n  }\n\n  /**\n   * Calls on increment/decrement buttons and update the value\n   * @param item\n   * @param value\n   * @param operator\n   * @param colName\n   */\n  sample(item: any, value: any, operator: string, colName: string) {\n    if (operator === 'add') {\n      item = item + 1;\n    } else if (operator === 'sub') {\n      item = item - 1;\n    }\n    let percenatge = this.samplingData.findIndex((doc: any) => doc.colName === colName);\n    if (this.sampling === 'over_sampling') {\n      if (item < value) {\n        this.samplingData[percenatge].value = value;\n      } else {\n        this.samplingData[percenatge].value = item;\n      }\n    } else if (this.sampling === 'under_sampling') {\n      if (item < value) {\n        this.samplingData[percenatge].value = item;\n      } else {\n        this.samplingData[percenatge].value = value;\n      }\n      // if (item < value) {\n      //   this.samplingData[percenatge].value = value;\n      // } else {\n      //   this.samplingData[percenatge].value = item;\n      // }\n    }\n  }\n\n  /**\n   * Checks the train-split ratio percentage change\n   * @param size\n   * @returns\n   */\n  testsizeChange(size: number): void {\n    if (this.deafultTestSize !== size && this.sampling !== 'none') {\n      this.showSnackBar('Calucalute sampling percentage again', 'OK');\n    }\n  }\n\n  /**\n   * Create an empty array for k-fold\n   * @param data\n   * @returns\n   */\n  getArray(data: any): Array<any> {\n    return new Array(data);\n  }\n\n  /**\n   * Function to get all the auto feature generation options\n   */\n  getAFGoptions(): void {\n    let select = [];\n    this.autoFeatureGenTasks = [];\n    let intColNames: Array<any> = [];\n    intColNames = this.getFeatures(\n      this.edaData.edaSummary,\n      ['Integer', 'Decimal'],\n      this.edaData.depVariable\n    );\n    this.selection.selected.forEach((item) => {\n      select[item.colName] = true;\n    });\n    intColNames = intColNames.filter((feature) => {\n      if (select[feature]) {\n        return true;\n      }\n    });\n    if (this.pairwiseLinear) {\n      if (intColNames.length > 1) {\n        this.autoFeatureGenTasks.push({\n          operation: this.pairwiseLinearOption,\n          colName: intColNames,\n          typeOfAutoFeatureGen: 'pairwiseLinear',\n        });\n      }\n    }\n    if (this.pairwisePolynomial) {\n      if (intColNames.length > 1) {\n        this.autoFeatureGenTasks.push({\n          operation: this.pairwisePolynomialOption,\n          colName: intColNames,\n          typeOfAutoFeatureGen: 'pairwisePolynomial',\n        });\n      }\n    }\n    if (this.univariatePolynomial) {\n      if (this.exponent > 0) {\n        this.autoFeatureGenTasks.push({\n          operation: this.univariatePolynomialOption,\n          colName: intColNames,\n          exponent: this.exponent,\n          typeOfAutoFeatureGen: 'univariatePolynomial',\n        });\n      }\n    }\n    // if (this.split) {\n    //   var textCols = this.getFeatures(\n    //     this.edaData.edaSummary,\n    //     ['Text'],\n    //     this.edaData.depVariable\n    //   ).filter((feature) => (this.selected[feature] ? true : false));\n    //   if (this.featureSplitCount && this.delimiter) {\n    //     this.autoFeatureGenTasks.push({\n    //       operation: 'split',\n    //       colName: textCols,\n    //       featureSplitCount: this.featureSplitCount,\n    //       delimiter: this.delimiter,\n    //       typeOfAutoFeatureGen: 'split',\n    //     });\n    //   }\n    // }\n    if (this.explicitPairwise) {\n      this.autoFeatureGenTasks = this.explicitPairWiseOption;\n    }\n  }\n\n  /**\n   * Return features of a particular data type\n   * @param allFeatures\n   * @param dataTypes\n   * @param target\n   * @returns\n   */\n  getFeatures(allFeatures: any, dataTypes: any, target: any): Array<any> {\n    this.extFeatures = [];\n    allFeatures.forEach((feature: any) => {\n      // If target is present exclude it\n      if (target) {\n        if (dataTypes.indexOf(feature.dataType) !== -1 && feature.colName !== target) {\n          this.extFeatures.push(feature.colName);\n        }\n      } else {\n        if (dataTypes.indexOf(feature.dataType) !== -1) {\n          this.extFeatures.push(feature.colName);\n        }\n      }\n    });\n    return this.extFeatures;\n  }\n\n  /**\n   * Handles the feature change functionality\n   * @param featureName\n   */\n  onChangeFeature(featureName: string): void {\n    let foundFeatureData: boolean = false;\n    // this.nlpConfigs.forEach((item) => {\n    //   if (item.colName !== featureName) {\n    //     let featureCon = {\n    //       colName: featureName,\n    //       nlpFeatureConfig: this.nlpDefaultConfigData,\n    //     };\n    //     this.nlpConfigs.push(featureCon);\n    //   }\n    // });\n    this.nlpConfigs.forEach((item) => {\n      if (item.colName === featureName) {\n        item.nlpFeatureConfig.nGram.forEach((val: any) => {\n          if (val.name === 'Ngram') {\n            this.nlpDefaultConfigData.ngramSliderVal = val.value;\n            this.showNgramSlider = true;\n          } else {\n            this.showNgramSlider = false;\n          }\n        });\n      }\n    });\n    if (featureName !== this.tempFeature) {\n      this.nlpConfigs.forEach((featureConfig: any) => {\n        if (featureConfig.colName === featureName) {\n          this.nlpDefaultConfigData = featureConfig.nlpFeatureConfig;\n          foundFeatureData = true;\n        }\n      });\n      if (!foundFeatureData) {\n        this.setNlpFeatureDefaults();\n      }\n    } else {\n      this.nlpConfigs.forEach((featureConfig: any) => {\n        if (featureConfig.colName === featureName) {\n          this.nlpDefaultConfigData = featureConfig.nlpFeatureConfig;\n        }\n      });\n    }\n  }\n\n  /**\n   * Generates all the required data and then opens the dialog\n   */\n  generateConfigureData(type: string): void {\n    this.tempFeature = this.feature;\n    this.nlpConfigs.forEach((feature) => {\n      if (feature.colName === this.feature) {\n        feature.nlpFeatureConfig.nGram.forEach((item: any) => {\n          if (item.name === 'Ngram') {\n            this.nlpDefaultConfigData.ngramSliderVal = item.value;\n            this.showNgramSlider = true;\n          } else {\n            this.showNgramSlider = false;\n          }\n        });\n      }\n    });\n    this.openDialog(type);\n  }\n\n  /**\n   * Generates all the required data and then opens the dialog\n   */\n  generateClusterData(type: string): void {\n    let isError: Boolean = false;\n    let numericFeatures: Array<any> = [];\n    let reqObj: any;\n    let categoricalColNames: Array<any> = [];\n\n    categoricalColNames = this.getFeatures(this.edaData.edaSummary, 'Categorical', null);\n    if (this.decomposition === 'pca' && (this.components < 2 || this.components > 50)) {\n      this.showSnackBar('PCA Value should be between 2-50', 'OK');\n      isError = true;\n    }\n    if (this.clusters < 2 || this.clusters > 10) {\n      this.showSnackBar('Cluster value should be between 2-10', 'OK');\n      isError = true;\n    }\n    numericFeatures = this.edaData.edaSummary.filter(\n      (feature: any) => feature.dataType === 'Integer' || feature.dataType === 'Decimal'\n    );\n    this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'clustering');\n    if (this.tempSelected.length < 1) {\n      this.showSnackBar('Please select features', 'OK');\n      isError = true;\n    }\n    if (!isError) {\n      reqObj = {\n        originalFileId: this.selectedDataSet._id,\n        parentFileId: this.childFileData._id,\n        parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n        fileSchema: this.childFileData.fileSchema,\n        algorithms: this.algorithmControl.value,\n        algoType: 'clustering',\n        edaId: this.edaData._id,\n        pId: this.project._id,\n        hptPreference: this.hptPreference,\n        categoricalColNames: categoricalColNames || [],\n        indexPath: this.edaData.indexPath,\n        paragraphColNames: this.edaData.paragraphColNames,\n        indepVariable: this.tempSelected,\n        backGround: this.backGround,\n        foreGround: this.foreGround,\n        rootFileName: this.selectedDataSet.filename,\n        problemType: this.project.type,\n        datetimeColumnName: this.edaData.datetimeColumnName,\n        usingGPU: this.project.useGPU || false,\n        categoricalEncoders: this.catEnc || {},\n        dateComponent: this.dateComponent || {},\n        clusteringInfo: {\n          decomposition: this.decomposition,\n          components: this.components,\n          clusters: Number(this.clusters),\n          numericFeatures: numericFeatures,\n          scalarValue: this.scaleValue || {},\n          featuresToTransform: this.featuresToTransform || {},\n          normalizationMethod: this.normalizationMethod,\n          featureScaling: this.featureScalingOption,\n          // applyToTarget: this.applyToTarget,\n        },\n        nlpConfigs: this.nlpConfigs,\n      };\n      if (reqObj.clusteringInfo.normalizationMethod !== 'log_transform') {\n        delete reqObj.clusteringInfo['scalarValue'];\n      }\n      this.openDialog(type, reqObj);\n    }\n  }\n\n  /**\n   * Filter and return ordinal encoder map according to the selected indep feature\n   * @returns\n   */\n  filterOridinalEncoderMap(): Array<any> {\n    let finalOrdinalEncoderMap: Array<any> = [];\n    if (this.ordinalEncMap.length && this.tempSelected.length) {\n      this.ordinalEncMap.forEach((item) => {\n        let itemFound = this.tempSelected.find((featureSelected) => {\n          return featureSelected.colName === item.col;\n        });\n        if (itemFound) {\n          finalOrdinalEncoderMap.push(item);\n        }\n      });\n    }\n    return finalOrdinalEncoderMap;\n  }\n\n  /**\n   * Training execution handler\n   * @returns\n   */\n  trainingHandler(): void {\n    this.tempSelected = [];\n    // if (window.d3 && window.d3.version == '3.5.12') {\n    //   NVD3Config.setMplD3Object(window.d3);\n    // }\n    if (\n      this.featuresToTransform &&\n      this.featuresToTransform.length &&\n      this.normalizationMethod == 'log_transform'\n    ) {\n      this.scaleValue = this.scale;\n    }\n    let algo = [];\n    this.modelAlgorithmArray.forEach((element) => {\n      let found = this.algorithmControl.value.filter((item) => {\n        return item === element.name && element.status === true;\n      });\n      if (found.length) {\n        algo.push(found[0]);\n      }\n    });\n    this.algorithmControl.setValue(algo);\n    if (algo.length === 0) {\n      this.showSnackBar('Select algorithm which are not disabled', 'OK');\n      return;\n    }\n    // Clustering project\n    if (this.project.type === 'clustering') {\n      this.trainClusteringProject();\n    } else {\n      if (this.edaData.depVariable) {\n        // checkThemeColor();\n        // Timeseries project\n        if (this.project.type === 'timeseries') {\n          this.trainTimeseriesProject();\n        }\n        // Predictive modeling\n        else {\n          this.trainPredictiveProject();\n        }\n      } else {\n        this.showSnackBar('Please select target variable', 'OK');\n      }\n    }\n  }\n\n  /**\n   * Execute training for timeseries project type\n   */\n  trainTimeseriesProject(): void {\n    const reqObj: any = this.createTimeseriesReqData();\n    if (reqObj) {\n      this._spinner.showSpinner();\n      // API call\n      this._training\n        .startTimeseriesTraining(this.project._id, reqObj)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this._toaster.info('Training started', 'Train Model');\n            }\n          },\n          (err: HttpErrorResponse) => {\n            this._spinner.stopSpinner();\n            if (typeof err.error === 'string') {\n              err = JSON.parse(err.error);\n            }\n            this._toaster.error(err?.message, 'Train Model');\n          }\n        );\n    }\n  }\n\n  /**\n   * Generates a timeseries request data to parse in the API call of training\n   */\n  createTimeseriesReqData(): any {\n    this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'timeseries');\n    if (this.edaData.isMultipleTimeseries) {\n      if (this.nSteps < 1) {\n        this.showSnackBar('Number of steps can not be less than 1', 'OK');\n        return;\n      }\n      if (!Number.isInteger(this.nSteps)) {\n        this.showSnackBar('Number of steps should be an integer', 'OK');\n        return;\n      }\n      if (this.nSteps > this.maxnStep) {\n        this.showSnackBar(`Number of steps can not be greater than ${this.maxnStep}`, 'OK');\n        return;\n      }\n    }\n    if (this.algorithmControl.value.length === 1) {\n      this.algorithm = 1;\n    }\n    let trainingReqData: any;\n    let finalOrdinalEncoderMap: Array<any> = [];\n    let stationaryColumns: Array<any> = [];\n    let categoricalColNames: Array<any> = [];\n    categoricalColNames = this.getFeatures(this.edaData.edaSummary, 'Categorical', null);\n    if (this.stationaryTestData.length) {\n      stationaryColumns = this.stationaryTestData.filter((sData: any) => sData.stationarity);\n    }\n    if (!this.project.useGPU) {\n      this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n      if (this.tempSelected.length) {\n        finalOrdinalEncoderMap = this.filterOridinalEncoderMap();\n      } else {\n        finalOrdinalEncoderMap = this.ordinalEncMap;\n      }\n    }\n    if (this.featureScalingOption == 'none' && this.normalizationMethod == 'none') {\n      this.applyToTarget = false;\n    }\n    trainingReqData = {\n      originalFileId: this.selectedDataSet._id,\n      depVariable: this.edaData.depVariable,\n      testSize: this.edaData.dataSetInfo.testSize,\n      algorithms: this.algorithmControl.value,\n      hptPreference: this.hptPreference,\n      pId: this.project._id,\n      exogVariables: this.tempSelected || [],\n      parentFileId: this.selectedDataSet._id,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      categoricalColNames: categoricalColNames || [],\n      noOfCol: this.edaData.edaSummary.length,\n      paragraphColNames: this.edaData.paragraphColNames,\n      algoType: this.algoType,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      edaId: this.edaData._id,\n      edaSummary: this.edaData.edaSummary,\n      fileSchema: this.selectedDataSet.fileSchema,\n      dateColumnSelected: this.dateColumnSelected,\n      problemType: this.project.type,\n      preprocessedFilepath: this.preprocessedFilepath,\n      rootFileName: this.selectedDataSet.filename,\n      usingGPU: this.project['useGPU'] ? this.project['useGPU'] : false,\n      categoricalEncoders: this.catEnc || {},\n      ordinalEncoderMap: finalOrdinalEncoderMap,\n      dateComponent: this.dateComponent,\n      classNames: this.edaData.classNames,\n      indexPath: this.edaData.indexPath,\n      timeseriesIds: this.edaData.timeseriesIds,\n      isMultipleTimeseries: this.edaData.isMultipleTimeseries,\n      nSteps: this.edaData.isMultipleTimeseries ? this.nSteps : null,\n      timeseriesInfo: {\n        exogVariables: this.tempSelected || [],\n        timesteps: this.timesteps || null,\n        stationaryColumns: stationaryColumns || [],\n        stationaryMethod: this.stationarityMethod || 'none',\n        featureScaling: this.featureScalingOption || 'none',\n        normalizationMethod: this.normalizationMethod,\n        featuresToTransform: this.featuresToTransform,\n        applyToTarget: this.applyToTarget,\n        scalarValue: this.scaleValue,\n      },\n      nlpConfigs: this.nlpConfigs,\n    };\n    if (trainingReqData.timeseriesInfo.normalizationMethod !== 'log_transform') {\n      delete trainingReqData.timeseriesInfo['scalarValue'];\n    }\n    if (this.stationarityMethod) {\n      trainingReqData.timeseriesInfo.period = this.period;\n      trainingReqData.timeseriesInfo.scalar = this.scalar;\n    }\n    return trainingReqData;\n  }\n\n  /**\n   * Execute training for clustering project type\n   */\n  trainClusteringProject(): void {\n    let isDataValid: boolean;\n    isDataValid = this.validateClusteringTrainingData();\n    if (!isDataValid) {\n      this._spinner.showSpinner();\n      let reqObj = this.createClusteringReqData();\n      // API call\n      this._training\n        .startClusteringTraining(this.project._id, reqObj)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this._toaster.info('Training started', 'Train Model');\n            }\n          },\n          (err: HttpErrorResponse) => {\n            this._spinner.stopSpinner();\n            if (typeof err.error === 'string') {\n              err = JSON.parse(err.error);\n            }\n            this._toaster.error(err?.message, 'Train Model');\n          }\n        );\n    }\n  }\n\n  /**\n   * Performs validation on the whole clustering training data before starting training\n   */\n  validateClusteringTrainingData(): boolean {\n    let isError: boolean = false;\n    let fileData = this.dataSetsList.find((item) => item._id === this.selectedDataSet._id);\n    this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'clustering');\n    if (this.tempSelected.length < 1) {\n      this.showSnackBar('Please select feature(s)', 'OK');\n      isError = true;\n    }\n    if (this.algorithmControl.value.length === 1) {\n      this.algorithm = 1;\n    }\n    if (this.customFeatureChecked && this.decomposition !== 'none') {\n      if (!this.customFeatures) {\n        this.showSnackBar('Custom features cannot be empty', 'OK');\n        isError = true;\n      }\n      if (this.customFeatures.length <= this.components) {\n        this.showSnackBar('No. of custom features should be greater than components', 'OK');\n        isError = true;\n      }\n    }\n    if (\n      (this.decomposition === 'pca' || this.decomposition === 'factoranalysis') &&\n      (this.components < 2 || this.components > fileData.noOfCols)\n    ) {\n      this.showSnackBar(\n        `Dimensional reduction components should be between 2 and ${fileData.noOfCols}`,\n        'OK'\n      );\n      isError = true;\n    }\n    if (this.clusters < 2 || this.clusters > 10) {\n      this.showSnackBar('Clusters value should be between 2 and 10', 'OK');\n      isError = true;\n    }\n    if (this.agglomerativeCluster < 2 || this.agglomerativeCluster > 10) {\n      this.showSnackBar('Clusters value should be between 2 and 10', 'OK');\n      isError = true;\n    }\n    if (\n      this.normalizationMethod == 'log_transform' &&\n      this.featuresToTransform.length < 1 &&\n      this.applyToTarget == false\n    ) {\n      this.showSnackBar('Please select independent feature or target for feature transform', 'OK');\n      isError = true;\n    }\n    return isError;\n  }\n\n  /**\n   * Generates a clustering request data to parse in the API call of training\n   */\n  createClusteringReqData(): any {\n    let trainingReqData: any;\n    let categoricalColNames: Array<any> = [];\n    let finalOrdinalEncoderMap: Array<any> = [];\n    let numericFeatures: Array<any> = [];\n    categoricalColNames = this.getFeatures(this.edaData.edaSummary, 'Categorical', null);\n    numericFeatures = this.edaData.edaSummary.filter(function (feature) {\n      return feature.dataType === 'Integer' || feature.dataType === 'Decimal';\n    });\n    finalOrdinalEncoderMap = this.filterOridinalEncoderMap();\n    trainingReqData = {\n      originalFileId: this.selectedDataSet._id,\n      parentFileId: this.edaData._id,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      fileSchema: this.selectedDataSet.fileSchema,\n      algorithms: this.algorithmControl.value,\n      algoType: 'clustering',\n      edaId: this.edaData._id,\n      edaSummary: this.edaData.edaSummary,\n      pId: this.project._id,\n      hptPreference: this.hptPreference,\n      categoricalColNames: categoricalColNames || [],\n      afterEdaDataFilePath: this.edaData.afterEdaDataFilePath,\n      paragraphColNames: this.edaData.paragraphColNames,\n      indepVariable: this.tempSelected,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      rootFileName: this.selectedDataSet.filename,\n      problemType: this.project.type,\n      datetimeColumnName: this.edaData.datetimeColumnName,\n      usingGPU: this.project.useGPU || false,\n      categoricalEncoders: this.catEnc || {},\n      ordinalEncoderMap: finalOrdinalEncoderMap,\n      classNames: this.edaData.classNames,\n      dateComponent: this.dateComponent,\n      indexPath: this.edaData.indexPath,\n      clusteringInfo: {\n        scalarValue: this.scaleValue,\n        featuresToTransform: this.featuresToTransform,\n        normalizationMethod: this.normalizationMethod,\n        decomposition: this.decomposition,\n        clusters: {},\n        components: this.components,\n        numericFeatures: numericFeatures,\n        customFeatureChecked: this.customFeatureChecked,\n        customFeatures: this.customFeatures,\n        featureScaling: this.featureScalingOption,\n      },\n      nlpConfigs: this.nlpConfigs,\n    };\n    trainingReqData.algorithms.forEach((element) => {\n      if (element === 'KMeans') {\n        trainingReqData.clusteringInfo.clusters['KMeans'] = this.clusters;\n      } else if (element === 'Agglomerative') {\n        trainingReqData.clusteringInfo.clusters['Agglomerative'] = this.agglomerativeCluster;\n      }\n    });\n    if (trainingReqData.clusteringInfo.normalizationMethod !== 'log_transform') {\n      delete trainingReqData.clusteringInfo['scalarValue'];\n    }\n    return trainingReqData;\n  }\n\n  /**\n   * Execute training for prodictive modelling project type\n   */\n  trainPredictiveProject(): void {\n    let isDataValid: boolean;\n    this.getAFGoptions();\n    isDataValid = this.validatePredictiveTrainingData();\n    if (!isDataValid) {\n      this._spinner.showSpinner();\n      let reqObj = this.createPredictiveReqData();\n      // API call\n      this._training\n        .startPredictiveTraining(this.project._id, reqObj)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (res) => {\n            if (res) {\n              this._toaster.info('Training started', 'Train Model');\n            }\n          },\n          (err: any) => {\n            this._spinner.stopSpinner();\n            if (typeof err.error === 'string') {\n              err = JSON.parse(err.error);\n            }\n            this._toaster.error(err?.message, 'Train Model');\n          }\n        );\n    }\n  }\n\n  /**\n   * Performs validation on the whole predictive training data before starting training\n   */\n  validatePredictiveTrainingData(): boolean {\n    let isError: boolean = false;\n    let fileData = this.dataSetsList.find((item) => item._id === this.selectedDataSet._id);\n    this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n    if (this.algorithmControl.value.length === 1) {\n      this.algorithm = 1;\n    }\n    if (this.tempSelected.length < 1) {\n      this.showSnackBar('Please select feature(s)', 'OK');\n      isError = true;\n    }\n    if (!this.featureStep) {\n      this.showSnackBar('Feature steps should be between 0-1', 'OK');\n      isError = true;\n    }\n    if (!this.cv) {\n      this.showSnackBar('CV should be between 0-5', 'OK');\n      isError = true;\n    }\n    if (\n      (this.decomposition === 'pca' || this.decomposition === 'factoranalysis') &&\n      (this.components < 2 || this.components > fileData.noOfCols)\n    ) {\n      this.showSnackBar(\n        `Dimensional reduction components should be between 2 and ${fileData.noOfCols}`,\n        'OK'\n      );\n      isError = true;\n    }\n    if (this.customFeatureChecked && this.decomposition !== 'none') {\n      if (!this.customFeatures) {\n        this.showSnackBar('Custom features cannot be empty', 'OK');\n        isError = true;\n      }\n      if (this.customFeatures.length <= this.components) {\n        this.showSnackBar('No. of custom features should be greater than components', 'OK');\n        isError = true;\n      }\n    }\n    if (this.sampling !== 'none' && !this.samplingData.length) {\n      this.showSnackBar('Please complete sampling percentage calculation', 'OK');\n      isError = true;\n    }\n    this.autoFeatureGenTasks.forEach((item) => {\n      if (item.exponent <= 0) {\n        this.showSnackBar('Exponent value must be greater than 0', 'OK');\n        isError = true;\n      } else if (item.featureSplitCount <= 0) {\n        this.showSnackBar('Feature split count value must be greater than 0', 'OK');\n        isError = true;\n      }\n    });\n    if (this.fsMethod === 'RFE') {\n      if (this.featureStep === 'none' || this.featureStep < 1 || this.featureStep > 100) {\n        this.showSnackBar('Feature Reduction - Step value must be in between 1 and 100', 'OK');\n        isError = true;\n      }\n      if (this.cv === 'none' || this.cv < 1 || this.cv > 5) {\n        this.showSnackBar('Feature Reduction - CV value must be in between 1 and 5', 'OK');\n        isError = true;\n      }\n      if (!this.estimator) {\n        this.showSnackBar('Feature Reduction - Estimator is required', 'OK');\n        isError = true;\n      }\n    }\n    if (\n      this.normalizationMethod === 'log_transform' &&\n      this.featuresToTransform.length < 1 &&\n      this.applyToTarget === false\n    ) {\n      this.showSnackBar('Please select independent feature or target for feature transform', 'OK');\n      isError = true;\n    }\n    return isError;\n  }\n\n  /**\n   * Generates a predictive request data to parse in the API call of training\n   */\n  createPredictiveReqData(): any {\n    let samplingPer: Array<any> = [];\n    let samplingdict: any = {};\n    let categoricalColNames: Array<any> = [];\n    let finalOrdinalEncoderMap: Array<any> = [];\n    let trainingReqData: any;\n    if (this.samplingdat?.length) {\n      for (var i = 0; i < this.samplingData.length; i++) {\n        let obj = {\n          colName: this.samplingData[i].colName,\n          value: this.samplingData[i].value,\n        };\n        samplingPer.push(obj);\n      }\n      samplingPer.forEach((item) => {\n        samplingdict[item.colName] = item.value;\n      });\n    }\n    categoricalColNames = this.getFeatures(\n      this.edaData.edaSummary,\n      'Categorical',\n      this.edaData.depVariable\n    );\n    if (this.algorithmControl.value.length === 1) {\n      this.algorithm = 1;\n    }\n    finalOrdinalEncoderMap = this.filterOridinalEncoderMap();\n    if (this.featureScalingOption == 'none' && this.normalizationMethod == 'none') {\n      this.applyToTarget = false;\n    }\n    trainingReqData = {\n      targetType: this.targetDetails.targetType,\n      originalFileId: this.selectedDataSet._id,\n      parentFileId: this.selectedDataSet._id,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      fileSchema: this.selectedDataSet.fileSchema,\n      depVariable: this.edaData.depVariable,\n      indepVariable: this.tempSelected,\n      algorithms: this.algorithmControl.value,\n      testSize: this.edaData.dataSetInfo.testSize,\n      pId: this.project._id,\n      hptPreference: this.hptPreference,\n      categoricalColNames: categoricalColNames || [],\n      noOfCol: this.edaData.edaSummary.length,\n      paragraphColNames: this.edaData.paragraphColNames,\n      algoType: this.algoType,\n      isMultilabel: this.isMultilabel,\n      backGround: this.backGround,\n      foreGround: this.foreGround,\n      edaId: this.edaData._id,\n      edaSummary: this.edaData.edaSummary,\n      datetimeColumnName: this.edaData.datetimeColumnName,\n      problemType: this.project.type,\n      isImbalanced: this.isImbalanced,\n      sampling: this.sampling,\n      autoFeatureGenTasks: this.autoFeatureGenTasks.length ? this.autoFeatureGenTasks : null,\n      rootFileName: this.selectedDataSet.filename,\n      dimReductionFitSize: this.edaData.dimReductionFitSize || 1.0,\n      usingGPU: this.project.useGPU || false,\n      categoricalEncoders: this.catEnc || {},\n      ordinalEncoderMap: finalOrdinalEncoderMap,\n      dateComponent: this.dateComponent,\n      classNames: this.edaData.classNames,\n      dropOriginal: this.fdropMethod || false,\n      indexPath: this.edaData.indexPath,\n      predictiveModelingInfo: {\n        scalarValue: this.scaleValue,\n        featuresToTransform: this.featuresToTransform,\n        applyToTarget: this.applyToTarget,\n        decomposition: this.decomposition,\n        components: this.components,\n        featureSelectionMethod: this.fsMethod || 'none',\n        scoringFunction: this.scoringFunction || 'none',\n        featurePercentage: this.featurePercentage,\n        nFeaturesToSelect: this.nFeaturesToSelect,\n        // ! Replaced this.step with this.featureStep (unused variable this.step)\n        step: this.featureStep,\n        customFeatureChecked: this.customFeatureChecked,\n        customFeatures: this.customFeatures,\n        featureScaling: this.featureScalingOption || 'none',\n        normalizationMethod: this.normalizationMethod,\n        featureSelectionEstimator: this.estimator || 'none',\n        featureSelectionStep: this.featureStep || 'none',\n        featureSelectionCV: this.cv || 'none',\n      },\n      samplingPercentage: samplingdict || {},\n      nlpConfigs: this.nlpConfigs,\n    };\n    if (trainingReqData.predictiveModelingInfo.normalizationMethod !== 'log_transform') {\n      delete trainingReqData.predictiveModelingInfo['scalarValue'];\n    }\n    if (this.fsMethod != 'RFE') {\n      trainingReqData.predictiveModelingInfo.featureSelectionEstimator = 'none';\n      trainingReqData.predictiveModelingInfo.featureSelectionStep = 'none';\n      trainingReqData.predictiveModelingInfo.featureSelectionCV = 'none';\n    }\n    return trainingReqData;\n  }\n\n  /**\n   * Visualize components\n   */\n  visualizeComponents(): void {\n    let reqObj: any;\n    this.showTSTabs = true;\n    // checkThemeColor();\n    this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n    // Pushes the new graph type in tabs and select it\n    if (!this.componentsTabs.includes(this.selectedGraphType)) {\n      this.componentsTabs.push(this.selectedGraphType);\n      this.selectedTabIndex = this.componentsTabs.length - 1;\n    } else {\n      this.componentsTabs.forEach((item: any, i: number) =>\n        item === this.selectedGraphType ? (this.selectedTabIndex = i) : 0\n      );\n    }\n    reqObj = {\n      projectId: this.project._id,\n      indexPath: this.edaData.indexPath,\n      filename: this.selectedDataSet.filename,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      afterEdaDataFilePath: this.edaData.afterEdaDataFilePath,\n      foreGround: this.foreGround,\n      target: this.edaData.depVariable,\n      timeseriesInfo: {\n        frequency: this.selectedFrequency || null,\n        tab: this.selectedGraphType || 'trend',\n        model: this.visualizationModel,\n        exogVariables: this.tempSelected || [],\n      },\n      fileSchema: this.childFileData.fileSchema,\n      timeseriesIds: this.edaData.timeseriesIds\n    };\n    // API call\n    this._training\n      .getVisualizeComponentPlot(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            let element: any = document.getElementById(this.selectedGraphType);\n            while (element.data && element.data.length > 0) {\n              Plotly.deleteTraces(element, [0]);\n            }\n            Plotly.plot(element, res.graphContent.data, res.graphContent.layout);\n          }\n        },\n        (err: HttpErrorResponse) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(err.error.message, 'Train Model');\n        }\n      );\n  }\n\n  /**\n   * Function to trigger stationarity check API\n   */\n  doSationarityTest(): void {\n    this._spinner.showSpinner();\n    let reqObj: any;\n    reqObj = {\n      afterEdaDataFilePath: this.edaData.afterEdaDataFilePath,\n      target: this.edaData.depVariable,\n      indexPath: this.edaData.indexPath,\n      filename: this.selectedDataSet.filename,\n      fileSchema: this.selectedDataSet.fileSchema,\n      stationarityTest: this.stationarityTestMethod,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      projectId: this.project._id,\n      timeseriesInfo: {\n        exogVariables: this.generateIndepVariableList(this.edaData.depVariable, 'lOb'),\n      },\n      timeseriesIds: this.edaData.timeseriesIds\n    };\n    // API call\n    this._training\n      .startStationarityTest(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            this.stationaryTestData = res.data;\n            // Assigns the data to mat-table\n            this.stationaryDataSource = new MatTableDataSource(res.data);\n            this.stationaryDataSource.paginator = this.stationaryPaginator;\n            this.stationaryDataSource.sort = this.stationarySort;\n          } else {\n            this._toaster.error('Cannot perform stationarity test', 'Train Model');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err: Error) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(`Server Error - ${err.message}`, 'Train Model');\n        }\n      );\n  }\n\n  /**\n   * Generates auto correlation graph\n   */\n  getAutoCorrelation(): void {\n    this._spinner.showSpinner();\n    let reqObj: any;\n    // checkThemeColor();\n    reqObj = {\n      projectId: this.project._id,\n      nlags: this.nlags,\n      foreGround: this.foreGround,\n      depVariable: this.edaData.depVariable,\n      indexPath: this.edaData.indexPath,\n      filename: this.selectedDataSet.filename,\n      pacfMethod: this.pacfMethod,\n      parentPipelineFilename: this.edaData.tasks[0].currentPipelineFilename,\n      afterEdaDataFilePath: this.edaData.afterEdaDataFilePath,\n      timeseriesIds: this.edaData.timeseriesIds\n    };\n    // API call\n    this._training\n      .getAutoCorrelationGraph(this.project._id, reqObj)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (res) => {\n          if (res) {\n            let autoCorrelationGraph: any = document.getElementById('autoCorrelationGraph');\n            while (autoCorrelationGraph.data && autoCorrelationGraph.data.length > 0) {\n              Plotly.deleteTraces(autoCorrelationGraph, [0]);\n            }\n            Plotly.plot(autoCorrelationGraph, res.graphContent.data, res.graphContent.layout);\n          } else {\n            this._toaster.error('Cannot generate auto correlation graph', 'Train Model');\n          }\n          this._spinner.stopSpinner();\n        },\n        (err: HttpErrorResponse) => {\n          this._spinner.stopSpinner();\n          this._toaster.error(\n            err.error.graphContent || 'Cannot generate auto correlation graph',\n            'Train Model'\n          );\n        }\n      );\n  }\n\n  /**\n   * Called when the target is changed\n   */\n  // targetChangeHandler(target: any): void {\n  //   if (this.project.type === 'predictive_modeling') {\n  //     this.onTargetChange(target);\n  //   } else if (this.project.type === 'timeseries') {\n  //     this.onTsTargetChange();\n  //   } else {\n  //     return;\n  //   }\n  // }\n\n  /**\n   * Called when algorithm is changed\n   */\n  algoChangeHandler(): void {\n    if (this.project.type === 'clustering') {\n      this.onClusteringAlgoChange();\n    } else if (this.project.type === 'timeseries') {\n      this.onTsAlgoChange();\n    } else {\n      this.buildTrainingTable(this.edaData.edaSummary, this.project.type, 'without_feature_score');\n    }\n  }\n\n  /**\n   * Opens the dynamic dialog\n   * @param type\n   */\n  dialogHandler(type: string): void {\n    if (type === 'configureFeature') {\n      this.generateConfigureData(type);\n    } else if (type === 'optimalClusters') {\n      (environment.appType === 'enterprise' ||\n        (environment.appType === 'saas' &&\n          (this.user?.roles?.includes('super_admin') || this.user?.roles?.includes('admin')))) &&\n        this.generateClusterData(type);\n      environment.appType === 'saas' &&\n        !this.user?.roles?.includes('super_admin') &&\n        !this.user?.roles?.includes('admin') &&\n        this.showSnackBar('Selected feature is under premium subscription', 'OK');\n    } else if (type === 'hpt') {\n      this.openDialog(type);\n    }\n  }\n\n  /**\n   * Opens the dialog\n   */\n  openDialog(type: string, reqObj?: any): void {\n    let t = this.nlpConfigs;\n    this._dialog\n      .open(DialogHandlerComponent, {\n        minWidth: type === 'optimalClusters' ? '80vw' : '50vw',\n        maxWidth: type === 'optimalClusters' ? '80vw' : '50vw',\n        data: {\n          type: type,\n          algorithm: this.modelAlgorithmArray,\n          // Filters only the selected algorithms\n          modelAlgorithms: this.modelAlgorithmArray.filter((x: any) =>\n            this.algorithmControl.value.map((y: any) => y).includes(x.name)\n          ),\n          prevTrainingData: this.prevTrainingInfo,\n          hptPreference: this.hptPreference,\n          selectedFeature: this.feature,\n          nlpDefaultConfigData: this.nlpDefaultConfigData,\n          showNgramSlider: this.showNgramSlider,\n          nlpConfigs: this.nlpConfigs,\n          nlpLanguages: NLP_LANGUAGES,\n          clusterReqObj: reqObj,\n          ordinalEncoderData: reqObj,\n        },\n      })\n      .afterClosed()\n      .subscribe((data: any) => {\n        if (data) {\n          if (data.hptPreference?.length) {\n            // Converts the HPT form data values into integer, if type is integer.\n            data.hptPreference.forEach((item: any) => {\n              if (item.fields.length) {\n                item.fields = item.fields.map((obj: any) => {\n                  if (obj.type === 'number' && typeof obj.data === 'string') {\n                    obj.data = parseFloat(obj.data);\n                  }\n                  return obj;\n                });\n              }\n            });\n            this.hptPreference = [...data.hptPreference];\n          } else if (data.nlpConfigs?.length) {\n            this.nlpConfigs = [...data.nlpConfigs];\n          } else if (data.ordinalEncoder?.length) {\n            this.ordinalEncMap = [...data.ordinalEncoder];\n          }\n        } else {\n          // If canceled, reset the strategy to old one\n          this.tableData.map((item: any) => {\n            if (item && item.colName === reqObj?.colName) {\n              item.encoder = 'Binary encoder';\n            }\n            return item;\n          });\n          this.featureDataSource = new MatTableDataSource(this.tableData);\n          this.featureDataSource.sort = this.featureSort;\n          this.featureDataSource.paginator = this.featurePaginator;\n          this.featureDataSource._updateChangeSubscription();\n          this.catEnc[reqObj?.colName] = 'Binary encoder';\n        }\n      });\n  }\n\n  /**\n   * Adds the new item in the form array\n   */\n  addItem(): void {\n    if (this.explicitPairWiseOption.length > 10) {\n      this.showSnackBar('You can add only 10 custom option', 'OK');\n    } else {\n      this.explicitPairWiseOption.push({\n        operation: 'addition',\n        colName: [],\n        typeOfAutoFeatureGen: 'explicitPairwiseCombination',\n      });\n    }\n  }\n\n  /**\n   * Removes the item from form array\n   */\n  removeItem(index: number): void {\n    this.explicitPairWiseOption.splice(this.explicitPairWiseOption.indexOf(index), 1);\n  }\n\n  /**\n   * Creates and returns a new form structure\n   * @returns\n   */\n  createItem(): FormGroup {\n    return this._fb.group({\n      operation: 'addition',\n      colName: [],\n      exponent: '',\n      typeOfAutoFeatureGen: 'explicitPairwiseCombination',\n    });\n  }\n\n  /**\n   * Renders the snackbar\n   */\n  showSnackBar(message: string, button: string): void {\n    this.snackBarRef = this._snackBar.open(message, button, {\n      horizontalPosition: 'right',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  /**\n   * Returns the proper colum names\n   * @param colName\n   * @returns\n   */\n  generateProperColNames(colName: string): string {\n    switch (colName) {\n      case 'colName':\n        if (this.project.type === 'clustering') {\n          return 'Feature Name';\n        } else if (this.project.type === 'predictive_modeling') {\n          return 'Independent Feature';\n        } else {\n          return 'Exogenous Feature';\n        }\n      case 'categoricalDateOperation':\n        return 'Categorical/Date Operation';\n      case 'isImportant':\n        return 'Is Important';\n      case 'score':\n        return 'Feature Score';\n    }\n  }\n\n  /**\n   * Selects all rows if they are not all selected; otherwise clear selection\n   */\n  masterToggle() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.featureDataSource.data.forEach((row) => this.selection.select(row));\n    if (this.project.type !== 'clustering') {\n      this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n    }\n    let colname = this.selection.selected.filter((feature: any) => {\n      if (\n        !feature.constantFeature &&\n        !feature.highCardinalityFeature &&\n        !feature.mostlyMissing &&\n        feature.colName !== this.edaData.depVariable &&\n        (feature.dataType === 'Decimal' ||\n          feature.dataType === 'Integer' ||\n          feature.dataType === 'Numeric')\n      ) {\n        return feature;\n      }\n    });\n    this.tempfeat = colname.map((feature) => feature.colName);\n    if (this.project.type === 'timeseries' && this.edaData.isMultipleTimeseries) {\n      this.tempfeat = this.tempfeat.filter((i: any) =>\n        !this.edaData.timeseriesIds.includes(i) ? i : null\n      );\n    }\n  }\n\n  propagationMethod(row) {\n    //$event.stopPropagation();\n    let filterFeatures = this.selection.selected.filter((feature: any) => {\n      if (\n        !feature.constantFeature &&\n        !feature.highCardinalityFeature &&\n        !feature.mostlyMissing &&\n        feature.colName !== this.edaData.depVariable &&\n        (feature.dataType === 'Decimal' ||\n          feature.dataType === 'Integer' ||\n          feature.dataType === 'Numeric')\n      ) {\n        return feature;\n      }\n    });\n    this.tempfeat = filterFeatures.map((feature) => feature.colName);\n    // Filter the timeseriesIds from features list\n    if (this.project.type === 'timeseries' && this.edaData.isMultipleTimeseries) {\n      this.tempfeat = this.tempfeat.filter((i: any) =>\n        !this.edaData.timeseriesIds.includes(i) ? i : null\n      );\n    }\n    // this.tempSelected = this.generateIndepVariableList(this.edaData.depVariable, 'lOb');\n  }\n\n  /**\n   * Whether the number of selected elements matches the total number of rows.\n   */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.featureDataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /**\n   * Generates the number array with limit\n   * @param max\n   * @returns\n   */\n  generateNumericArray(max: number): Array<any> {\n    let arr: Array<any> = [];\n    for (var i = 1; i <= max; i++) {\n      arr.push(i);\n    }\n    return arr;\n  }\n\n  /**\n   * Called when any string is entered in search box\n   * @param event keyup event\n   */\n  applyFilter(event: Event, tableName: string): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    if (tableName === 'stationarity') {\n      this.stationaryDataSource.filter = filterValue.trim().toLowerCase();\n      if (this.stationaryDataSource.paginator) {\n        this.stationaryDataSource.paginator.firstPage();\n      }\n    } else if (tableName === 'feature') {\n      this.featureDataSource.filter = filterValue.trim().toLowerCase();\n      if (this.featureDataSource.paginator) {\n        this.featureDataSource.paginator.firstPage();\n      }\n    }\n  }\n\n  onFocusOut(algo, cluster) {\n    if (!Number.isInteger(cluster)) {\n      this.showSnackBar('Number of optimal cluster should be integer', 'OK');\n      this.clusters = algo == 'kmeans' ? 2 : this.clusters;\n      this.agglomerativeCluster = algo == 'agglo' ? 2 : this.agglomerativeCluster;\n      return;\n    }\n  }\n  /**\n   * Initializes the socket to listen events when emmited\n   */\n  initSocket(): void {\n    // Listens to the TrainingProgress event\n    this._socket.listen('TrainingProgress').subscribe(\n      (data: any) => {\n        if (data) {\n          if (data.status === 'training_failed') {\n            this._spinner.stopSpinner();\n            this._toaster.error(data.message, 'Train Model');\n          } else {\n            this._spinner.stopSpinner();\n            if (this.algorithm === 1 && data.status === 'model_failed') {\n              this._toaster.error(`Model training failed for ${data.algoName}. ${data.message}`, 'Train Model');\n            } else if (this.algorithm !== 1 && data.status === 'model_failed') {\n              this._toaster.error(`Model training failed for ${data.algoName}. ${data.message}`, 'Train Model');\n              this._toaster.success('Model training completed', 'Train Model');\n              this._router.navigate(['/project/models']);\n            } else {\n              this._toaster.success('Model training completed', 'Train Model');\n              this._router.navigate(['/project/models']);\n            }\n          }\n        } else {\n          this._spinner.stopSpinner();\n        }\n      },\n      (err: Error) => {\n        this._spinner.stopSpinner();\n        this._toaster.error('Socket Error', 'Train Model');\n      }\n    );\n  }\n\n  /**\n   * Perform operations when the module is destroyed\n   */\n  ngOnDestroy() {\n    this._socket.removeListener('TrainingProgress');\n    this.snackBarRef ? this.snackBarRef.dismiss() : '';\n    this.unsubscribe$.next(false);\n    this.unsubscribe$.unsubscribe();\n  }\n}\n","import { SharedModule } from 'src/app/shared/shared.module';\nimport { TrainingComponent } from './training.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { DialogHandlerComponent } from './dialog-handler/dialog-handler.component';\nimport { MatBadgeModule } from '@angular/material/badge';\n\n@NgModule({\n  declarations: [TrainingComponent, DialogHandlerComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild([{\n      path: '', component: TrainingComponent,\n    }]),\n    MatBadgeModule\n  ]\n})\nexport class TrainingModule { }\n"]}